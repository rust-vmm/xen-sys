/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __XEN_LATEST_INTERFACE_VERSION__: u32 = 265728;
pub const __XEN_INTERFACE_VERSION__: u32 = 265728;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const INVALID_PADDR: i32 = -1;
pub const PRIpaddr: &[u8; 6usize] = b"016lx\0";
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT_MAX: i32 = -1;
pub const ULONG_MAX: i32 = -1;
pub const FLAT_RING3_CS32: u32 = 57379;
pub const FLAT_RING3_CS64: u32 = 57395;
pub const FLAT_RING3_DS32: u32 = 57387;
pub const FLAT_RING3_DS64: u32 = 0;
pub const FLAT_RING3_SS32: u32 = 57387;
pub const FLAT_RING3_SS64: u32 = 57387;
pub const FLAT_KERNEL_DS64: u32 = 0;
pub const FLAT_KERNEL_DS32: u32 = 57387;
pub const FLAT_KERNEL_DS: u32 = 0;
pub const FLAT_KERNEL_CS64: u32 = 57395;
pub const FLAT_KERNEL_CS32: u32 = 57379;
pub const FLAT_KERNEL_CS: u32 = 57395;
pub const FLAT_KERNEL_SS64: u32 = 57387;
pub const FLAT_KERNEL_SS32: u32 = 57387;
pub const FLAT_KERNEL_SS: u32 = 57387;
pub const FLAT_USER_DS64: u32 = 0;
pub const FLAT_USER_DS32: u32 = 57387;
pub const FLAT_USER_DS: u32 = 0;
pub const FLAT_USER_CS64: u32 = 57395;
pub const FLAT_USER_CS32: u32 = 57379;
pub const FLAT_USER_CS: u32 = 57395;
pub const FLAT_USER_SS64: u32 = 57387;
pub const FLAT_USER_SS32: u32 = 57387;
pub const FLAT_USER_SS: u32 = 57387;
pub const __HYPERVISOR_VIRT_START: i64 = -140737488355328;
pub const __HYPERVISOR_VIRT_END: i64 = -131941395333120;
pub const __MACH2PHYS_VIRT_START: i64 = -140737488355328;
pub const __MACH2PHYS_VIRT_END: i64 = -140462610448384;
pub const SEGBASE_FS: u32 = 0;
pub const SEGBASE_GS_USER: u32 = 1;
pub const SEGBASE_GS_KERNEL: u32 = 2;
pub const SEGBASE_GS_USER_SEL: u32 = 3;
pub const _VGCF_in_syscall: u32 = 8;
pub const VGCF_in_syscall: u32 = 256;
pub const VGCF_IN_SYSCALL: u32 = 256;
pub const PRI_xen_pfn: &[u8; 3usize] = b"lx\0";
pub const PRIu_xen_pfn: &[u8; 3usize] = b"lu\0";
pub const XEN_HAVE_PV_GUEST_ENTRY: u32 = 1;
pub const XEN_HAVE_PV_UPCALL_MASK: u32 = 1;
pub const FIRST_RESERVED_GDT_PAGE: u32 = 14;
pub const FIRST_RESERVED_GDT_BYTE: u32 = 57344;
pub const FIRST_RESERVED_GDT_ENTRY: u32 = 7168;
pub const XEN_LEGACY_MAX_VCPUS: u32 = 32;
pub const PRI_xen_ulong: &[u8; 3usize] = b"lx\0";
pub const VGCF_I387_VALID: u32 = 1;
pub const VGCF_IN_KERNEL: u32 = 4;
pub const _VGCF_i387_valid: u32 = 0;
pub const VGCF_i387_valid: u32 = 1;
pub const _VGCF_in_kernel: u32 = 2;
pub const VGCF_in_kernel: u32 = 4;
pub const _VGCF_failsafe_disables_events: u32 = 3;
pub const VGCF_failsafe_disables_events: u32 = 8;
pub const _VGCF_syscall_disables_events: u32 = 4;
pub const VGCF_syscall_disables_events: u32 = 16;
pub const _VGCF_online: u32 = 5;
pub const VGCF_online: u32 = 32;
pub const _XEN_X86_EMU_LAPIC: u32 = 0;
pub const XEN_X86_EMU_LAPIC: u32 = 1;
pub const _XEN_X86_EMU_HPET: u32 = 1;
pub const XEN_X86_EMU_HPET: u32 = 2;
pub const _XEN_X86_EMU_PM: u32 = 2;
pub const XEN_X86_EMU_PM: u32 = 4;
pub const _XEN_X86_EMU_RTC: u32 = 3;
pub const XEN_X86_EMU_RTC: u32 = 8;
pub const _XEN_X86_EMU_IOAPIC: u32 = 4;
pub const XEN_X86_EMU_IOAPIC: u32 = 16;
pub const _XEN_X86_EMU_PIC: u32 = 5;
pub const XEN_X86_EMU_PIC: u32 = 32;
pub const _XEN_X86_EMU_VGA: u32 = 6;
pub const XEN_X86_EMU_VGA: u32 = 64;
pub const _XEN_X86_EMU_IOMMU: u32 = 7;
pub const XEN_X86_EMU_IOMMU: u32 = 128;
pub const _XEN_X86_EMU_PIT: u32 = 8;
pub const XEN_X86_EMU_PIT: u32 = 256;
pub const _XEN_X86_EMU_USE_PIRQ: u32 = 9;
pub const XEN_X86_EMU_USE_PIRQ: u32 = 512;
pub const _XEN_X86_EMU_VPCI: u32 = 10;
pub const XEN_X86_EMU_VPCI: u32 = 1024;
pub const XEN_X86_EMU_ALL: u32 = 2047;
pub const XEN_X86_MSR_RELAXED: u32 = 1;
pub const XEN_X86_ASSISTED_XAPIC: u32 = 2;
pub const XEN_X86_ASSISTED_X2APIC: u32 = 4;
pub const XEN_X86_MISC_FLAGS_MAX: u32 = 4;
pub const XEN_CPUID_NO_SUBLEAF: u32 = 4294967295;
pub const XEN_EMULATE_PREFIX: &[u8; 34usize] = b".byte 0x0f,0x0b,0x78,0x65,0x6e ; \0";
pub const XEN_CPUID: &[u8; 39usize] = b".byte 0x0f,0x0b,0x78,0x65,0x6e ; cpuid\0";
pub const XEN_HVM_DEBUGCONS_IOPORT: u32 = 233;
pub const __HYPERVISOR_set_trap_table: u32 = 0;
pub const __HYPERVISOR_mmu_update: u32 = 1;
pub const __HYPERVISOR_set_gdt: u32 = 2;
pub const __HYPERVISOR_stack_switch: u32 = 3;
pub const __HYPERVISOR_set_callbacks: u32 = 4;
pub const __HYPERVISOR_fpu_taskswitch: u32 = 5;
pub const __HYPERVISOR_sched_op_compat: u32 = 6;
pub const __HYPERVISOR_platform_op: u32 = 7;
pub const __HYPERVISOR_set_debugreg: u32 = 8;
pub const __HYPERVISOR_get_debugreg: u32 = 9;
pub const __HYPERVISOR_update_descriptor: u32 = 10;
pub const __HYPERVISOR_memory_op: u32 = 12;
pub const __HYPERVISOR_multicall: u32 = 13;
pub const __HYPERVISOR_update_va_mapping: u32 = 14;
pub const __HYPERVISOR_set_timer_op: u32 = 15;
pub const __HYPERVISOR_event_channel_op_compat: u32 = 16;
pub const __HYPERVISOR_xen_version: u32 = 17;
pub const __HYPERVISOR_console_io: u32 = 18;
pub const __HYPERVISOR_physdev_op_compat: u32 = 19;
pub const __HYPERVISOR_grant_table_op: u32 = 20;
pub const __HYPERVISOR_vm_assist: u32 = 21;
pub const __HYPERVISOR_update_va_mapping_otherdomain: u32 = 22;
pub const __HYPERVISOR_iret: u32 = 23;
pub const __HYPERVISOR_vcpu_op: u32 = 24;
pub const __HYPERVISOR_set_segment_base: u32 = 25;
pub const __HYPERVISOR_mmuext_op: u32 = 26;
pub const __HYPERVISOR_xsm_op: u32 = 27;
pub const __HYPERVISOR_nmi_op: u32 = 28;
pub const __HYPERVISOR_sched_op: u32 = 29;
pub const __HYPERVISOR_callback_op: u32 = 30;
pub const __HYPERVISOR_xenoprof_op: u32 = 31;
pub const __HYPERVISOR_event_channel_op: u32 = 32;
pub const __HYPERVISOR_physdev_op: u32 = 33;
pub const __HYPERVISOR_hvm_op: u32 = 34;
pub const __HYPERVISOR_sysctl: u32 = 35;
pub const __HYPERVISOR_domctl: u32 = 36;
pub const __HYPERVISOR_kexec_op: u32 = 37;
pub const __HYPERVISOR_tmem_op: u32 = 38;
pub const __HYPERVISOR_argo_op: u32 = 39;
pub const __HYPERVISOR_xenpmu_op: u32 = 40;
pub const __HYPERVISOR_dm_op: u32 = 41;
pub const __HYPERVISOR_hypfs_op: u32 = 42;
pub const __HYPERVISOR_arch_0: u32 = 48;
pub const __HYPERVISOR_arch_1: u32 = 49;
pub const __HYPERVISOR_arch_2: u32 = 50;
pub const __HYPERVISOR_arch_3: u32 = 51;
pub const __HYPERVISOR_arch_4: u32 = 52;
pub const __HYPERVISOR_arch_5: u32 = 53;
pub const __HYPERVISOR_arch_6: u32 = 54;
pub const __HYPERVISOR_arch_7: u32 = 55;
pub const VIRQ_TIMER: u32 = 0;
pub const VIRQ_DEBUG: u32 = 1;
pub const VIRQ_CONSOLE: u32 = 2;
pub const VIRQ_DOM_EXC: u32 = 3;
pub const VIRQ_TBUF: u32 = 4;
pub const VIRQ_DEBUGGER: u32 = 6;
pub const VIRQ_XENOPROF: u32 = 7;
pub const VIRQ_CON_RING: u32 = 8;
pub const VIRQ_PCPU_STATE: u32 = 9;
pub const VIRQ_MEM_EVENT: u32 = 10;
pub const VIRQ_ARGO: u32 = 11;
pub const VIRQ_ENOMEM: u32 = 12;
pub const VIRQ_XENPMU: u32 = 13;
pub const VIRQ_ARCH_0: u32 = 16;
pub const VIRQ_ARCH_1: u32 = 17;
pub const VIRQ_ARCH_2: u32 = 18;
pub const VIRQ_ARCH_3: u32 = 19;
pub const VIRQ_ARCH_4: u32 = 20;
pub const VIRQ_ARCH_5: u32 = 21;
pub const VIRQ_ARCH_6: u32 = 22;
pub const VIRQ_ARCH_7: u32 = 23;
pub const NR_VIRQS: u32 = 24;
pub const MMU_NORMAL_PT_UPDATE: u32 = 0;
pub const MMU_MACHPHYS_UPDATE: u32 = 1;
pub const MMU_PT_UPDATE_PRESERVE_AD: u32 = 2;
pub const MMU_PT_UPDATE_NO_TRANSLATE: u32 = 3;
pub const MMUEXT_PIN_L1_TABLE: u32 = 0;
pub const MMUEXT_PIN_L2_TABLE: u32 = 1;
pub const MMUEXT_PIN_L3_TABLE: u32 = 2;
pub const MMUEXT_PIN_L4_TABLE: u32 = 3;
pub const MMUEXT_UNPIN_TABLE: u32 = 4;
pub const MMUEXT_NEW_BASEPTR: u32 = 5;
pub const MMUEXT_TLB_FLUSH_LOCAL: u32 = 6;
pub const MMUEXT_INVLPG_LOCAL: u32 = 7;
pub const MMUEXT_TLB_FLUSH_MULTI: u32 = 8;
pub const MMUEXT_INVLPG_MULTI: u32 = 9;
pub const MMUEXT_TLB_FLUSH_ALL: u32 = 10;
pub const MMUEXT_INVLPG_ALL: u32 = 11;
pub const MMUEXT_FLUSH_CACHE: u32 = 12;
pub const MMUEXT_SET_LDT: u32 = 13;
pub const MMUEXT_NEW_USER_BASEPTR: u32 = 15;
pub const MMUEXT_CLEAR_PAGE: u32 = 16;
pub const MMUEXT_COPY_PAGE: u32 = 17;
pub const MMUEXT_FLUSH_CACHE_GLOBAL: u32 = 18;
pub const MMUEXT_MARK_SUPER: u32 = 19;
pub const MMUEXT_UNMARK_SUPER: u32 = 20;
pub const CONSOLEIO_write: u32 = 0;
pub const CONSOLEIO_read: u32 = 1;
pub const VMASST_CMD_enable: u32 = 0;
pub const VMASST_CMD_disable: u32 = 1;
pub const VMASST_TYPE_4gb_segments: u32 = 0;
pub const VMASST_TYPE_4gb_segments_notify: u32 = 1;
pub const VMASST_TYPE_writable_pagetables: u32 = 2;
pub const VMASST_TYPE_pae_extended_cr3: u32 = 3;
pub const VMASST_TYPE_architectural_iopl: u32 = 4;
pub const VMASST_TYPE_runstate_update_flag: u32 = 5;
pub const VMASST_TYPE_m2p_strict: u32 = 32;
pub const XEN_PVCLOCK_TSC_STABLE_BIT: u32 = 1;
pub const XEN_PVCLOCK_GUEST_STOPPED: u32 = 2;
pub const MAX_GUEST_CMDLINE: u32 = 1024;
pub const SIF_PRIVILEGED: u32 = 1;
pub const SIF_INITDOMAIN: u32 = 2;
pub const SIF_MULTIBOOT_MOD: u32 = 4;
pub const SIF_MOD_START_PFN: u32 = 8;
pub const SIF_VIRT_P2M_4TOOLS: u32 = 16;
pub const SIF_PM_MASK: u32 = 65280;
pub const XEN_VGATYPE_TEXT_MODE_3: u32 = 3;
pub const XEN_VGATYPE_VESA_LFB: u32 = 35;
pub const XEN_VGATYPE_EFI_LFB: u32 = 112;
pub const EVTCHNOP_bind_interdomain: u32 = 0;
pub const EVTCHNOP_bind_virq: u32 = 1;
pub const EVTCHNOP_bind_pirq: u32 = 2;
pub const EVTCHNOP_close: u32 = 3;
pub const EVTCHNOP_send: u32 = 4;
pub const EVTCHNOP_status: u32 = 5;
pub const EVTCHNOP_alloc_unbound: u32 = 6;
pub const EVTCHNOP_bind_ipi: u32 = 7;
pub const EVTCHNOP_bind_vcpu: u32 = 8;
pub const EVTCHNOP_unmask: u32 = 9;
pub const EVTCHNOP_reset: u32 = 10;
pub const EVTCHNOP_init_control: u32 = 11;
pub const EVTCHNOP_expand_array: u32 = 12;
pub const EVTCHNOP_set_priority: u32 = 13;
pub const BIND_PIRQ__WILL_SHARE: u32 = 1;
pub const EVTCHNSTAT_closed: u32 = 0;
pub const EVTCHNSTAT_unbound: u32 = 1;
pub const EVTCHNSTAT_interdomain: u32 = 2;
pub const EVTCHNSTAT_pirq: u32 = 3;
pub const EVTCHNSTAT_virq: u32 = 4;
pub const EVTCHNSTAT_ipi: u32 = 5;
pub const EVTCHN_FIFO_PRIORITY_MAX: u32 = 0;
pub const EVTCHN_FIFO_PRIORITY_DEFAULT: u32 = 7;
pub const EVTCHN_FIFO_PRIORITY_MIN: u32 = 15;
pub const EVTCHN_FIFO_MAX_QUEUES: u32 = 16;
pub const EVTCHN_FIFO_PENDING: u32 = 31;
pub const EVTCHN_FIFO_MASKED: u32 = 30;
pub const EVTCHN_FIFO_LINKED: u32 = 29;
pub const EVTCHN_FIFO_BUSY: u32 = 28;
pub const EVTCHN_FIFO_LINK_BITS: u32 = 17;
pub const EVTCHN_FIFO_LINK_MASK: u32 = 131071;
pub const EVTCHN_FIFO_NR_CHANNELS: u32 = 131072;
pub const GNTTAB_NR_RESERVED_ENTRIES: u32 = 8;
pub const GNTTAB_RESERVED_CONSOLE: u32 = 0;
pub const GNTTAB_RESERVED_XENSTORE: u32 = 1;
pub const GTF_invalid: u32 = 0;
pub const GTF_permit_access: u32 = 1;
pub const GTF_accept_transfer: u32 = 2;
pub const GTF_transitive: u32 = 3;
pub const GTF_type_mask: u32 = 3;
pub const _GTF_readonly: u32 = 2;
pub const GTF_readonly: u32 = 4;
pub const _GTF_reading: u32 = 3;
pub const GTF_reading: u32 = 8;
pub const _GTF_writing: u32 = 4;
pub const GTF_writing: u32 = 16;
pub const _GTF_PWT: u32 = 5;
pub const GTF_PWT: u32 = 32;
pub const _GTF_PCD: u32 = 6;
pub const GTF_PCD: u32 = 64;
pub const _GTF_PAT: u32 = 7;
pub const GTF_PAT: u32 = 128;
pub const _GTF_sub_page: u32 = 8;
pub const GTF_sub_page: u32 = 256;
pub const _GTF_transfer_committed: u32 = 2;
pub const GTF_transfer_committed: u32 = 4;
pub const _GTF_transfer_completed: u32 = 3;
pub const GTF_transfer_completed: u32 = 8;
pub const GNTTABOP_map_grant_ref: u32 = 0;
pub const GNTTABOP_unmap_grant_ref: u32 = 1;
pub const GNTTABOP_setup_table: u32 = 2;
pub const GNTTABOP_dump_table: u32 = 3;
pub const GNTTABOP_transfer: u32 = 4;
pub const GNTTABOP_copy: u32 = 5;
pub const GNTTABOP_query_size: u32 = 6;
pub const GNTTABOP_unmap_and_replace: u32 = 7;
pub const GNTTABOP_set_version: u32 = 8;
pub const GNTTABOP_get_status_frames: u32 = 9;
pub const GNTTABOP_get_version: u32 = 10;
pub const GNTTABOP_swap_grant_ref: u32 = 11;
pub const GNTTABOP_cache_flush: u32 = 12;
pub const _GNTCOPY_source_gref: u32 = 0;
pub const GNTCOPY_source_gref: u32 = 1;
pub const _GNTCOPY_dest_gref: u32 = 1;
pub const GNTCOPY_dest_gref: u32 = 2;
pub const GNTTAB_CACHE_CLEAN: u32 = 1;
pub const GNTTAB_CACHE_INVAL: u32 = 2;
pub const GNTTAB_CACHE_SOURCE_GREF: u32 = 2147483648;
pub const _GNTMAP_device_map: u32 = 0;
pub const GNTMAP_device_map: u32 = 1;
pub const _GNTMAP_host_map: u32 = 1;
pub const GNTMAP_host_map: u32 = 2;
pub const _GNTMAP_readonly: u32 = 2;
pub const GNTMAP_readonly: u32 = 4;
pub const _GNTMAP_application_map: u32 = 3;
pub const GNTMAP_application_map: u32 = 8;
pub const _GNTMAP_contains_pte: u32 = 4;
pub const GNTMAP_contains_pte: u32 = 16;
pub const _GNTMAP_guest_avail0: u32 = 16;
pub const GNTST_okay: u32 = 0;
pub const GNTST_general_error: i32 = -1;
pub const GNTST_bad_domain: i32 = -2;
pub const GNTST_bad_gntref: i32 = -3;
pub const GNTST_bad_handle: i32 = -4;
pub const GNTST_bad_virt_addr: i32 = -5;
pub const GNTST_bad_dev_addr: i32 = -6;
pub const GNTST_no_device_space: i32 = -7;
pub const GNTST_permission_denied: i32 = -8;
pub const GNTST_bad_page: i32 = -9;
pub const GNTST_bad_copy_arg: i32 = -10;
pub const GNTST_address_too_big: i32 = -11;
pub const GNTST_eagain: i32 = -12;
pub const GNTST_no_space: i32 = -13;
pub const HVM_FILE_MAGIC: u32 = 1412960902;
pub const HVM_FILE_VERSION: u32 = 1;
pub const _XEN_X86_FPU_INITIALISED: u32 = 0;
pub const XEN_X86_FPU_INITIALISED: u32 = 1;
pub const VIOAPIC_NUM_PINS: u32 = 48;
pub const RTC_CMOS_SIZE: u32 = 14;
pub const HPET_TIMER_NUM: u32 = 3;
pub const MTRR_VCNT: u32 = 8;
pub const NUM_FIXED_MSR: u32 = 11;
pub const CPU_XSAVE_CODE: u32 = 16;
pub const CPU_MSR_CODE: u32 = 20;
pub const HVM_SAVE_CODE_MAX: u32 = 20;
pub const PHYSDEVOP_eoi: u32 = 12;
pub const PHYSDEVOP_pirq_eoi_gmfn_v1: u32 = 17;
pub const PHYSDEVOP_pirq_eoi_gmfn_v2: u32 = 28;
pub const PHYSDEVOP_irq_status_query: u32 = 5;
pub const _XENIRQSTAT_needs_eoi: u32 = 0;
pub const XENIRQSTAT_needs_eoi: u32 = 1;
pub const _XENIRQSTAT_shared: u32 = 1;
pub const XENIRQSTAT_shared: u32 = 2;
pub const PHYSDEVOP_set_iopl: u32 = 6;
pub const PHYSDEVOP_set_iobitmap: u32 = 7;
pub const PHYSDEVOP_apic_read: u32 = 8;
pub const PHYSDEVOP_apic_write: u32 = 9;
pub const PHYSDEVOP_alloc_irq_vector: u32 = 10;
pub const PHYSDEVOP_free_irq_vector: u32 = 11;
pub const MAP_PIRQ_TYPE_MSI: u32 = 0;
pub const MAP_PIRQ_TYPE_GSI: u32 = 1;
pub const MAP_PIRQ_TYPE_UNKNOWN: u32 = 2;
pub const MAP_PIRQ_TYPE_MSI_SEG: u32 = 3;
pub const MAP_PIRQ_TYPE_MULTI_MSI: u32 = 4;
pub const PHYSDEVOP_map_pirq: u32 = 13;
pub const PHYSDEVOP_unmap_pirq: u32 = 14;
pub const PHYSDEVOP_manage_pci_add: u32 = 15;
pub const PHYSDEVOP_manage_pci_remove: u32 = 16;
pub const PHYSDEVOP_restore_msi: u32 = 19;
pub const PHYSDEVOP_manage_pci_add_ext: u32 = 20;
pub const PHYSDEVOP_setup_gsi: u32 = 21;
pub const PHYSDEVOP_get_free_pirq: u32 = 23;
pub const XEN_PCI_MMCFG_RESERVED: u32 = 1;
pub const PHYSDEVOP_pci_mmcfg_reserved: u32 = 24;
pub const XEN_PCI_DEV_EXTFN: u32 = 1;
pub const XEN_PCI_DEV_VIRTFN: u32 = 2;
pub const XEN_PCI_DEV_PXM: u32 = 4;
pub const PHYSDEVOP_pci_device_add: u32 = 25;
pub const PHYSDEVOP_pci_device_remove: u32 = 26;
pub const PHYSDEVOP_restore_msi_ext: u32 = 27;
pub const PHYSDEVOP_prepare_msix: u32 = 30;
pub const PHYSDEVOP_release_msix: u32 = 31;
pub const PHYSDEVOP_DBGP_RESET_PREPARE: u32 = 1;
pub const PHYSDEVOP_DBGP_RESET_DONE: u32 = 2;
pub const PHYSDEVOP_DBGP_BUS_UNKNOWN: u32 = 0;
pub const PHYSDEVOP_DBGP_BUS_PCI: u32 = 1;
pub const PHYSDEVOP_dbgp_op: u32 = 29;
pub const PHYSDEVOP_IRQ_UNMASK_NOTIFY: u32 = 4;
pub const PHYSDEVOP_pirq_eoi_gmfn: u32 = 28;
pub const XENMEM_increase_reservation: u32 = 0;
pub const XENMEM_decrease_reservation: u32 = 1;
pub const XENMEM_populate_physmap: u32 = 6;
pub const XENMEMF_populate_on_demand: u32 = 65536;
pub const XENMEMF_exact_node_request: u32 = 131072;
pub const XENMEMF_vnode: u32 = 262144;
pub const XENMEM_exchange: u32 = 11;
pub const XENMEM_maximum_ram_page: u32 = 2;
pub const XENMEM_current_reservation: u32 = 3;
pub const XENMEM_maximum_reservation: u32 = 4;
pub const XENMEM_maximum_gpfn: u32 = 14;
pub const XENMEM_machphys_mfn_list: u32 = 5;
pub const XENMEM_machphys_compat_mfn_list: u32 = 25;
pub const XENMEM_machphys_mapping: u32 = 12;
pub const XENMAPSPACE_shared_info: u32 = 0;
pub const XENMAPSPACE_grant_table: u32 = 1;
pub const XENMAPSPACE_gmfn: u32 = 2;
pub const XENMAPSPACE_gmfn_range: u32 = 3;
pub const XENMAPSPACE_gmfn_foreign: u32 = 4;
pub const XENMAPSPACE_dev_mmio: u32 = 5;
pub const XENMEM_add_to_physmap: u32 = 7;
pub const XENMAPIDX_grant_table_status: u32 = 2147483648;
pub const XENMEM_add_to_physmap_batch: u32 = 23;
pub const XENMEM_remove_from_physmap: u32 = 15;
pub const XENMEM_memory_map: u32 = 9;
pub const XENMEM_machine_memory_map: u32 = 10;
pub const XENMEM_set_memory_map: u32 = 13;
pub const XENMEM_set_pod_target: u32 = 16;
pub const XENMEM_get_pod_target: u32 = 17;
pub const XENMEM_get_sharing_freed_pages: u32 = 18;
pub const XENMEM_get_sharing_shared_pages: u32 = 19;
pub const XENMEM_paging_op: u32 = 20;
pub const XENMEM_paging_op_nominate: u32 = 0;
pub const XENMEM_paging_op_evict: u32 = 1;
pub const XENMEM_paging_op_prep: u32 = 2;
pub const XENMEM_access_op: u32 = 21;
pub const XENMEM_access_op_set_access: u32 = 0;
pub const XENMEM_access_op_get_access: u32 = 1;
pub const XENMEM_access_op_set_access_multi: u32 = 4;
pub const XENMEM_sharing_op: u32 = 22;
pub const XENMEM_sharing_op_nominate_gfn: u32 = 0;
pub const XENMEM_sharing_op_nominate_gref: u32 = 1;
pub const XENMEM_sharing_op_share: u32 = 2;
pub const XENMEM_sharing_op_debug_gfn: u32 = 3;
pub const XENMEM_sharing_op_debug_mfn: u32 = 4;
pub const XENMEM_sharing_op_debug_gref: u32 = 5;
pub const XENMEM_sharing_op_add_physmap: u32 = 6;
pub const XENMEM_sharing_op_audit: u32 = 7;
pub const XENMEM_sharing_op_range_share: u32 = 8;
pub const XENMEM_sharing_op_fork: u32 = 9;
pub const XENMEM_sharing_op_fork_reset: u32 = 10;
pub const XENMEM_SHARING_OP_S_HANDLE_INVALID: i32 = -10;
pub const XENMEM_SHARING_OP_C_HANDLE_INVALID: i32 = -9;
pub const XENMEM_FORK_WITH_IOMMU_ALLOWED: u32 = 1;
pub const XENMEM_FORK_BLOCK_INTERRUPTS: u32 = 2;
pub const XENMEM_FORK_RESET_STATE: u32 = 4;
pub const XENMEM_FORK_RESET_MEMORY: u32 = 8;
pub const XENMEM_claim_pages: u32 = 24;
pub const XENMEM_reserved_device_memory_map: u32 = 27;
pub const XENMEM_RDM_ALL: u32 = 1;
pub const XENMEM_acquire_resource: u32 = 28;
pub const XENMEM_resource_ioreq_server: u32 = 0;
pub const XENMEM_resource_grant_table: u32 = 1;
pub const XENMEM_resource_vmtrace_buf: u32 = 2;
pub const XENMEM_resource_grant_table_id_shared: u32 = 0;
pub const XENMEM_resource_grant_table_id_status: u32 = 1;
pub const XENMEM_resource_ioreq_server_frame_bufioreq: u32 = 0;
pub const XENMEM_get_vnumainfo: u32 = 26;
pub const XEN_DOMCTL_INTERFACE_VERSION: u32 = 21;
pub const _XEN_DOMCTL_CDF_hvm: u32 = 0;
pub const XEN_DOMCTL_CDF_hvm: u32 = 1;
pub const _XEN_DOMCTL_CDF_hap: u32 = 1;
pub const XEN_DOMCTL_CDF_hap: u32 = 2;
pub const _XEN_DOMCTL_CDF_s3_integrity: u32 = 2;
pub const XEN_DOMCTL_CDF_s3_integrity: u32 = 4;
pub const _XEN_DOMCTL_CDF_oos_off: u32 = 3;
pub const XEN_DOMCTL_CDF_oos_off: u32 = 8;
pub const _XEN_DOMCTL_CDF_xs_domain: u32 = 4;
pub const XEN_DOMCTL_CDF_xs_domain: u32 = 16;
pub const _XEN_DOMCTL_CDF_iommu: u32 = 5;
pub const XEN_DOMCTL_CDF_iommu: u32 = 32;
pub const _XEN_DOMCTL_CDF_nested_virt: u32 = 6;
pub const XEN_DOMCTL_CDF_nested_virt: u32 = 64;
pub const XEN_DOMCTL_CDF_vpmu: u32 = 128;
pub const XEN_DOMCTL_CDF_MAX: u32 = 128;
pub const _XEN_DOMCTL_IOMMU_no_sharept: u32 = 0;
pub const XEN_DOMCTL_IOMMU_no_sharept: u32 = 1;
pub const XEN_DOMCTL_IOMMU_MAX: u32 = 1;
pub const XEN_DOMCTL_GRANT_version_mask: u32 = 15;
pub const _XEN_DOMINF_dying: u32 = 0;
pub const XEN_DOMINF_dying: u32 = 1;
pub const _XEN_DOMINF_hvm_guest: u32 = 1;
pub const XEN_DOMINF_hvm_guest: u32 = 2;
pub const _XEN_DOMINF_shutdown: u32 = 2;
pub const XEN_DOMINF_shutdown: u32 = 4;
pub const _XEN_DOMINF_paused: u32 = 3;
pub const XEN_DOMINF_paused: u32 = 8;
pub const _XEN_DOMINF_blocked: u32 = 4;
pub const XEN_DOMINF_blocked: u32 = 16;
pub const _XEN_DOMINF_running: u32 = 5;
pub const XEN_DOMINF_running: u32 = 32;
pub const _XEN_DOMINF_debugged: u32 = 6;
pub const XEN_DOMINF_debugged: u32 = 64;
pub const _XEN_DOMINF_xs_domain: u32 = 7;
pub const XEN_DOMINF_xs_domain: u32 = 128;
pub const _XEN_DOMINF_hap: u32 = 8;
pub const XEN_DOMINF_hap: u32 = 256;
pub const XEN_DOMINF_shutdownmask: u32 = 255;
pub const XEN_DOMINF_shutdownshift: u32 = 16;
pub const XEN_INVALID_MAX_VCPU_ID: i32 = -1;
pub const XEN_DOMCTL_PFINFO_LTAB_SHIFT: u32 = 28;
pub const XEN_DOMCTL_PFINFO_NOTAB: u32 = 0;
pub const XEN_DOMCTL_PFINFO_L1TAB: u32 = 268435456;
pub const XEN_DOMCTL_PFINFO_L2TAB: u32 = 536870912;
pub const XEN_DOMCTL_PFINFO_L3TAB: u32 = 805306368;
pub const XEN_DOMCTL_PFINFO_L4TAB: u32 = 1073741824;
pub const XEN_DOMCTL_PFINFO_LTABTYPE_MASK: u32 = 1879048192;
pub const XEN_DOMCTL_PFINFO_LPINTAB: u32 = 2147483648;
pub const XEN_DOMCTL_PFINFO_XTAB: u32 = 4026531840;
pub const XEN_DOMCTL_PFINFO_XALLOC: u32 = 3758096384;
pub const XEN_DOMCTL_PFINFO_BROKEN: u32 = 3489660928;
pub const XEN_DOMCTL_PFINFO_LTAB_MASK: u32 = 4026531840;
pub const XEN_DOMCTL_SHADOW_OP_OFF: u32 = 0;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE: u32 = 32;
pub const XEN_DOMCTL_SHADOW_OP_CLEAN: u32 = 11;
pub const XEN_DOMCTL_SHADOW_OP_PEEK: u32 = 12;
pub const XEN_DOMCTL_SHADOW_OP_GET_ALLOCATION: u32 = 30;
pub const XEN_DOMCTL_SHADOW_OP_SET_ALLOCATION: u32 = 31;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE_TEST: u32 = 1;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE_LOGDIRTY: u32 = 2;
pub const XEN_DOMCTL_SHADOW_ENABLE_REFCOUNT: u32 = 2;
pub const XEN_DOMCTL_SHADOW_ENABLE_LOG_DIRTY: u32 = 4;
pub const XEN_DOMCTL_SHADOW_ENABLE_TRANSLATE: u32 = 8;
pub const XEN_DOMCTL_SHADOW_ENABLE_EXTERNAL: u32 = 16;
pub const XEN_DOMCTL_SHADOW_LOGDIRTY_FINAL: u32 = 1;
pub const _XEN_VCPUAFFINITY_HARD: u32 = 0;
pub const XEN_VCPUAFFINITY_HARD: u32 = 1;
pub const _XEN_VCPUAFFINITY_SOFT: u32 = 1;
pub const XEN_VCPUAFFINITY_SOFT: u32 = 2;
pub const _XEN_VCPUAFFINITY_FORCE: u32 = 2;
pub const XEN_VCPUAFFINITY_FORCE: u32 = 4;
pub const XEN_SCHEDULER_CREDIT: u32 = 5;
pub const XEN_SCHEDULER_CREDIT2: u32 = 6;
pub const XEN_SCHEDULER_ARINC653: u32 = 7;
pub const XEN_SCHEDULER_RTDS: u32 = 8;
pub const XEN_SCHEDULER_NULL: u32 = 9;
pub const _XEN_DOMCTL_SCHEDRT_extra: u32 = 0;
pub const XEN_DOMCTL_SCHEDRT_extra: u32 = 1;
pub const XEN_DOMCTL_SCHEDOP_putinfo: u32 = 0;
pub const XEN_DOMCTL_SCHEDOP_getinfo: u32 = 1;
pub const XEN_DOMCTL_SCHEDOP_putvcpuinfo: u32 = 2;
pub const XEN_DOMCTL_SCHEDOP_getvcpuinfo: u32 = 3;
pub const XEN_DOMCTL_SENDTRIGGER_NMI: u32 = 0;
pub const XEN_DOMCTL_SENDTRIGGER_RESET: u32 = 1;
pub const XEN_DOMCTL_SENDTRIGGER_INIT: u32 = 2;
pub const XEN_DOMCTL_SENDTRIGGER_POWER: u32 = 3;
pub const XEN_DOMCTL_SENDTRIGGER_SLEEP: u32 = 4;
pub const XEN_DOMCTL_DEV_PCI: u32 = 0;
pub const XEN_DOMCTL_DEV_DT: u32 = 1;
pub const XEN_DOMCTL_DEV_RDM_RELAXED: u32 = 1;
pub const XEN_DOMCTL_VMSI_X86_DEST_ID_MASK: u32 = 255;
pub const XEN_DOMCTL_VMSI_X86_RH_MASK: u32 = 256;
pub const XEN_DOMCTL_VMSI_X86_DM_MASK: u32 = 512;
pub const XEN_DOMCTL_VMSI_X86_DELIV_MASK: u32 = 28672;
pub const XEN_DOMCTL_VMSI_X86_TRIG_MASK: u32 = 32768;
pub const XEN_DOMCTL_VMSI_X86_UNMASKED: u32 = 65536;
pub const DPCI_ADD_MAPPING: u32 = 1;
pub const DPCI_REMOVE_MAPPING: u32 = 0;
pub const XEN_DOMCTL_MEM_CACHEATTR_UC: u32 = 0;
pub const XEN_DOMCTL_MEM_CACHEATTR_WC: u32 = 1;
pub const XEN_DOMCTL_MEM_CACHEATTR_WT: u32 = 4;
pub const XEN_DOMCTL_MEM_CACHEATTR_WP: u32 = 5;
pub const XEN_DOMCTL_MEM_CACHEATTR_WB: u32 = 6;
pub const XEN_DOMCTL_MEM_CACHEATTR_UCM: u32 = 7;
pub const XEN_CPUID_INPUT_UNUSED: u32 = 4294967295;
pub const XEN_DOMCTL_DEBUG_OP_SINGLE_STEP_OFF: u32 = 0;
pub const XEN_DOMCTL_DEBUG_OP_SINGLE_STEP_ON: u32 = 1;
pub const XEN_VM_EVENT_ENABLE: u32 = 0;
pub const XEN_VM_EVENT_DISABLE: u32 = 1;
pub const XEN_VM_EVENT_RESUME: u32 = 2;
pub const XEN_VM_EVENT_GET_VERSION: u32 = 3;
pub const XEN_DOMCTL_VM_EVENT_OP_PAGING: u32 = 1;
pub const XEN_DOMCTL_VM_EVENT_OP_MONITOR: u32 = 2;
pub const XEN_DOMCTL_VM_EVENT_OP_SHARING: u32 = 3;
pub const XEN_DOMCTL_MEM_SHARING_CONTROL: u32 = 0;
pub const XEN_DOMCTL_PSR_CMT_OP_DETACH: u32 = 0;
pub const XEN_DOMCTL_PSR_CMT_OP_ATTACH: u32 = 1;
pub const XEN_DOMCTL_PSR_CMT_OP_QUERY_RMID: u32 = 2;
pub const XEN_DOMCTL_MONITOR_OP_ENABLE: u32 = 0;
pub const XEN_DOMCTL_MONITOR_OP_DISABLE: u32 = 1;
pub const XEN_DOMCTL_MONITOR_OP_GET_CAPABILITIES: u32 = 2;
pub const XEN_DOMCTL_MONITOR_OP_EMULATE_EACH_REP: u32 = 3;
pub const XEN_DOMCTL_MONITOR_OP_CONTROL_REGISTERS: u32 = 4;
pub const XEN_DOMCTL_MONITOR_EVENT_WRITE_CTRLREG: u32 = 0;
pub const XEN_DOMCTL_MONITOR_EVENT_MOV_TO_MSR: u32 = 1;
pub const XEN_DOMCTL_MONITOR_EVENT_SINGLESTEP: u32 = 2;
pub const XEN_DOMCTL_MONITOR_EVENT_SOFTWARE_BREAKPOINT: u32 = 3;
pub const XEN_DOMCTL_MONITOR_EVENT_GUEST_REQUEST: u32 = 4;
pub const XEN_DOMCTL_MONITOR_EVENT_DEBUG_EXCEPTION: u32 = 5;
pub const XEN_DOMCTL_MONITOR_EVENT_CPUID: u32 = 6;
pub const XEN_DOMCTL_MONITOR_EVENT_PRIVILEGED_CALL: u32 = 7;
pub const XEN_DOMCTL_MONITOR_EVENT_INTERRUPT: u32 = 8;
pub const XEN_DOMCTL_MONITOR_EVENT_DESC_ACCESS: u32 = 9;
pub const XEN_DOMCTL_MONITOR_EVENT_EMUL_UNIMPLEMENTED: u32 = 10;
pub const XEN_DOMCTL_MONITOR_EVENT_INGUEST_PAGEFAULT: u32 = 11;
pub const XEN_DOMCTL_MONITOR_EVENT_VMEXIT: u32 = 12;
pub const XEN_DOMCTL_PSR_SET_L3_CBM: u32 = 0;
pub const XEN_DOMCTL_PSR_GET_L3_CBM: u32 = 1;
pub const XEN_DOMCTL_PSR_SET_L3_CODE: u32 = 2;
pub const XEN_DOMCTL_PSR_SET_L3_DATA: u32 = 3;
pub const XEN_DOMCTL_PSR_GET_L3_CODE: u32 = 4;
pub const XEN_DOMCTL_PSR_GET_L3_DATA: u32 = 5;
pub const XEN_DOMCTL_PSR_SET_L2_CBM: u32 = 6;
pub const XEN_DOMCTL_PSR_GET_L2_CBM: u32 = 7;
pub const XEN_DOMCTL_PSR_SET_MBA_THRTL: u32 = 8;
pub const XEN_DOMCTL_PSR_GET_MBA_THRTL: u32 = 9;
pub const XEN_DOMCTL_VUART_OP_INIT: u32 = 0;
pub const XEN_DOMCTL_VUART_TYPE_VPL011: u32 = 0;
pub const XEN_DOMCTL_vmtrace_enable: u32 = 1;
pub const XEN_DOMCTL_vmtrace_disable: u32 = 2;
pub const XEN_DOMCTL_vmtrace_reset_and_enable: u32 = 3;
pub const XEN_DOMCTL_vmtrace_output_position: u32 = 4;
pub const XEN_DOMCTL_vmtrace_get_option: u32 = 5;
pub const XEN_DOMCTL_vmtrace_set_option: u32 = 6;
pub const XEN_DOMCTL_createdomain: u32 = 1;
pub const XEN_DOMCTL_destroydomain: u32 = 2;
pub const XEN_DOMCTL_pausedomain: u32 = 3;
pub const XEN_DOMCTL_unpausedomain: u32 = 4;
pub const XEN_DOMCTL_getdomaininfo: u32 = 5;
pub const XEN_DOMCTL_setvcpuaffinity: u32 = 9;
pub const XEN_DOMCTL_shadow_op: u32 = 10;
pub const XEN_DOMCTL_max_mem: u32 = 11;
pub const XEN_DOMCTL_setvcpucontext: u32 = 12;
pub const XEN_DOMCTL_getvcpucontext: u32 = 13;
pub const XEN_DOMCTL_getvcpuinfo: u32 = 14;
pub const XEN_DOMCTL_max_vcpus: u32 = 15;
pub const XEN_DOMCTL_scheduler_op: u32 = 16;
pub const XEN_DOMCTL_setdomainhandle: u32 = 17;
pub const XEN_DOMCTL_setdebugging: u32 = 18;
pub const XEN_DOMCTL_irq_permission: u32 = 19;
pub const XEN_DOMCTL_iomem_permission: u32 = 20;
pub const XEN_DOMCTL_ioport_permission: u32 = 21;
pub const XEN_DOMCTL_hypercall_init: u32 = 22;
pub const XEN_DOMCTL_settimeoffset: u32 = 24;
pub const XEN_DOMCTL_getvcpuaffinity: u32 = 25;
pub const XEN_DOMCTL_real_mode_area: u32 = 26;
pub const XEN_DOMCTL_resumedomain: u32 = 27;
pub const XEN_DOMCTL_sendtrigger: u32 = 28;
pub const XEN_DOMCTL_subscribe: u32 = 29;
pub const XEN_DOMCTL_gethvmcontext: u32 = 33;
pub const XEN_DOMCTL_sethvmcontext: u32 = 34;
pub const XEN_DOMCTL_set_address_size: u32 = 35;
pub const XEN_DOMCTL_get_address_size: u32 = 36;
pub const XEN_DOMCTL_assign_device: u32 = 37;
pub const XEN_DOMCTL_bind_pt_irq: u32 = 38;
pub const XEN_DOMCTL_memory_mapping: u32 = 39;
pub const XEN_DOMCTL_ioport_mapping: u32 = 40;
pub const XEN_DOMCTL_set_ext_vcpucontext: u32 = 42;
pub const XEN_DOMCTL_get_ext_vcpucontext: u32 = 43;
pub const XEN_DOMCTL_set_opt_feature: u32 = 44;
pub const XEN_DOMCTL_test_assign_device: u32 = 45;
pub const XEN_DOMCTL_set_target: u32 = 46;
pub const XEN_DOMCTL_deassign_device: u32 = 47;
pub const XEN_DOMCTL_unbind_pt_irq: u32 = 48;
pub const XEN_DOMCTL_get_device_group: u32 = 50;
pub const XEN_DOMCTL_debug_op: u32 = 54;
pub const XEN_DOMCTL_gethvmcontext_partial: u32 = 55;
pub const XEN_DOMCTL_vm_event_op: u32 = 56;
pub const XEN_DOMCTL_mem_sharing_op: u32 = 57;
pub const XEN_DOMCTL_gettscinfo: u32 = 59;
pub const XEN_DOMCTL_settscinfo: u32 = 60;
pub const XEN_DOMCTL_getpageframeinfo3: u32 = 61;
pub const XEN_DOMCTL_setvcpuextstate: u32 = 62;
pub const XEN_DOMCTL_getvcpuextstate: u32 = 63;
pub const XEN_DOMCTL_set_access_required: u32 = 64;
pub const XEN_DOMCTL_audit_p2m: u32 = 65;
pub const XEN_DOMCTL_set_virq_handler: u32 = 66;
pub const XEN_DOMCTL_set_broken_page_p2m: u32 = 67;
pub const XEN_DOMCTL_setnodeaffinity: u32 = 68;
pub const XEN_DOMCTL_getnodeaffinity: u32 = 69;
pub const XEN_DOMCTL_cacheflush: u32 = 71;
pub const XEN_DOMCTL_get_vcpu_msrs: u32 = 72;
pub const XEN_DOMCTL_set_vcpu_msrs: u32 = 73;
pub const XEN_DOMCTL_setvnumainfo: u32 = 74;
pub const XEN_DOMCTL_psr_cmt_op: u32 = 75;
pub const XEN_DOMCTL_monitor_op: u32 = 77;
pub const XEN_DOMCTL_psr_alloc: u32 = 78;
pub const XEN_DOMCTL_soft_reset: u32 = 79;
pub const XEN_DOMCTL_vuart_op: u32 = 81;
pub const XEN_DOMCTL_get_cpu_policy: u32 = 82;
pub const XEN_DOMCTL_set_cpu_policy: u32 = 83;
pub const XEN_DOMCTL_vmtrace_op: u32 = 84;
pub const XEN_DOMCTL_gdbsx_guestmemio: u32 = 1000;
pub const XEN_DOMCTL_gdbsx_pausevcpu: u32 = 1001;
pub const XEN_DOMCTL_gdbsx_unpausevcpu: u32 = 1002;
pub const XEN_DOMCTL_gdbsx_domstatus: u32 = 1003;
pub const IOREQ_READ: u32 = 1;
pub const IOREQ_WRITE: u32 = 0;
pub const STATE_IOREQ_NONE: u32 = 0;
pub const STATE_IOREQ_READY: u32 = 1;
pub const STATE_IOREQ_INPROCESS: u32 = 2;
pub const STATE_IORESP_READY: u32 = 3;
pub const IOREQ_TYPE_PIO: u32 = 0;
pub const IOREQ_TYPE_COPY: u32 = 1;
pub const IOREQ_TYPE_PCI_CONFIG: u32 = 2;
pub const IOREQ_TYPE_TIMEOFFSET: u32 = 7;
pub const IOREQ_TYPE_INVALIDATE: u32 = 8;
pub const IOREQ_BUFFER_SLOT_NUM: u32 = 511;
pub const ACPI_PM1A_EVT_BLK_ADDRESS_V0: u32 = 8000;
pub const ACPI_PM1A_CNT_BLK_ADDRESS_V0: u32 = 8004;
pub const ACPI_PM_TMR_BLK_ADDRESS_V0: u32 = 8008;
pub const ACPI_GPE0_BLK_ADDRESS_V0: u32 = 8040;
pub const ACPI_GPE0_BLK_LEN_V0: u32 = 8;
pub const ACPI_PM1A_EVT_BLK_ADDRESS_V1: u32 = 45056;
pub const ACPI_PM1A_CNT_BLK_ADDRESS_V1: u32 = 45060;
pub const ACPI_PM_TMR_BLK_ADDRESS_V1: u32 = 45064;
pub const ACPI_GPE0_BLK_ADDRESS_V1: u32 = 45024;
pub const ACPI_GPE0_BLK_LEN_V1: u32 = 4;
pub const ACPI_PM1A_EVT_BLK_ADDRESS: u32 = 8000;
pub const ACPI_PM1A_CNT_BLK_ADDRESS: u32 = 8004;
pub const ACPI_PM_TMR_BLK_ADDRESS: u32 = 8008;
pub const ACPI_GPE0_BLK_ADDRESS: u32 = 8040;
pub const ACPI_GPE0_BLK_LEN: u32 = 8;
pub const _UNISTD_H: u32 = 1;
pub const XENFEAT_writable_page_tables: u32 = 0;
pub const XENFEAT_writable_descriptor_tables: u32 = 1;
pub const XENFEAT_auto_translated_physmap: u32 = 2;
pub const XENFEAT_supervisor_mode_kernel: u32 = 3;
pub const XENFEAT_pae_pgdir_above_4gb: u32 = 4;
pub const XENFEAT_mmu_pt_update_preserve_ad: u32 = 5;
pub const XENFEAT_highmem_assist: u32 = 6;
pub const XENFEAT_gnttab_map_avail_bits: u32 = 7;
pub const XENFEAT_hvm_callback_vector: u32 = 8;
pub const XENFEAT_hvm_safe_pvclock: u32 = 9;
pub const XENFEAT_hvm_pirqs: u32 = 10;
pub const XENFEAT_dom0: u32 = 11;
pub const XENFEAT_memory_op_vnode_supported: u32 = 13;
pub const XENFEAT_ARM_SMCCC_supported: u32 = 14;
pub const XENFEAT_linux_rsdp_unrestricted: u32 = 15;
pub const XENFEAT_not_direct_mapped: u32 = 16;
pub const XENFEAT_direct_mapped: u32 = 17;
pub const XENFEAT_NR_SUBMAPS: u32 = 1;
pub const _POSIX_VERSION: u32 = 199009;
pub const __POSIX2_THIS_VERSION: u32 = 199209;
pub const _POSIX2_VERSION: u32 = 199209;
pub const _POSIX2_C_VERSION: u32 = 199209;
pub const _POSIX2_C_BIND: u32 = 199209;
pub const _POSIX2_C_DEV: u32 = 199209;
pub const _POSIX2_SW_DEV: u32 = 199209;
pub const _POSIX2_LOCALEDEF: u32 = 199209;
pub const _XOPEN_VERSION: u32 = 4;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _BITS_TYPES_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const FOPEN_MAX: u32 = 16;
pub const XEN_SYSCTL_INTERFACE_VERSION: u32 = 21;
pub const XEN_SYSCTL_TBUFOP_get_info: u32 = 0;
pub const XEN_SYSCTL_TBUFOP_set_cpu_mask: u32 = 1;
pub const XEN_SYSCTL_TBUFOP_set_evt_mask: u32 = 2;
pub const XEN_SYSCTL_TBUFOP_set_size: u32 = 3;
pub const XEN_SYSCTL_TBUFOP_enable: u32 = 4;
pub const XEN_SYSCTL_TBUFOP_disable: u32 = 5;
pub const _XEN_SYSCTL_PHYSCAP_hvm: u32 = 0;
pub const XEN_SYSCTL_PHYSCAP_hvm: u32 = 1;
pub const _XEN_SYSCTL_PHYSCAP_pv: u32 = 1;
pub const XEN_SYSCTL_PHYSCAP_pv: u32 = 2;
pub const _XEN_SYSCTL_PHYSCAP_directio: u32 = 2;
pub const XEN_SYSCTL_PHYSCAP_directio: u32 = 4;
pub const _XEN_SYSCTL_PHYSCAP_hap: u32 = 3;
pub const XEN_SYSCTL_PHYSCAP_hap: u32 = 8;
pub const _XEN_SYSCTL_PHYSCAP_shadow: u32 = 4;
pub const XEN_SYSCTL_PHYSCAP_shadow: u32 = 16;
pub const _XEN_SYSCTL_PHYSCAP_iommu_hap_pt_share: u32 = 5;
pub const XEN_SYSCTL_PHYSCAP_iommu_hap_pt_share: u32 = 32;
pub const XEN_SYSCTL_PHYSCAP_vmtrace: u32 = 64;
pub const XEN_SYSCTL_PHYSCAP_vpmu: u32 = 128;
pub const XEN_SYSCTL_PHYSCAP_gnttab_v1: u32 = 256;
pub const XEN_SYSCTL_PHYSCAP_gnttab_v2: u32 = 512;
pub const XEN_SYSCTL_PHYSCAP_MAX: u32 = 512;
pub const XEN_SYSCTL_PHYSCAP_X86_ASSISTED_XAPIC: u32 = 1;
pub const XEN_SYSCTL_PHYSCAP_X86_ASSISTED_X2APIC: u32 = 2;
pub const XEN_SYSCTL_PHYSCAP_X86_MAX: u32 = 2;
pub const XEN_SYSCTL_PERFCOP_reset: u32 = 1;
pub const XEN_SYSCTL_PERFCOP_query: u32 = 2;
pub const PMSTAT_CATEGORY_MASK: u32 = 240;
pub const PMSTAT_PX: u32 = 16;
pub const PMSTAT_CX: u32 = 32;
pub const PMSTAT_get_max_px: u32 = 17;
pub const PMSTAT_get_pxstat: u32 = 18;
pub const PMSTAT_reset_pxstat: u32 = 19;
pub const PMSTAT_get_max_cx: u32 = 33;
pub const PMSTAT_get_cxstat: u32 = 34;
pub const PMSTAT_reset_cxstat: u32 = 35;
pub const XEN_SYSCTL_CPU_HOTPLUG_ONLINE: u32 = 0;
pub const XEN_SYSCTL_CPU_HOTPLUG_OFFLINE: u32 = 1;
pub const XEN_SYSCTL_CPU_HOTPLUG_SMT_ENABLE: u32 = 2;
pub const XEN_SYSCTL_CPU_HOTPLUG_SMT_DISABLE: u32 = 3;
pub const CPUFREQ_NAME_LEN: u32 = 16;
pub const SCALING_MAX_FREQ: u32 = 1;
pub const SCALING_MIN_FREQ: u32 = 2;
pub const SCALING_SETSPEED: u32 = 3;
pub const SAMPLING_RATE: u32 = 4;
pub const UP_THRESHOLD: u32 = 5;
pub const PM_PARA_CATEGORY_MASK: u32 = 240;
pub const CPUFREQ_PARA: u32 = 16;
pub const GET_CPUFREQ_PARA: u32 = 17;
pub const SET_CPUFREQ_GOV: u32 = 18;
pub const SET_CPUFREQ_PARA: u32 = 19;
pub const GET_CPUFREQ_AVGFREQ: u32 = 20;
pub const XEN_SYSCTL_pm_op_set_sched_opt_smt: u32 = 33;
pub const XEN_SYSCTL_pm_op_get_max_cstate: u32 = 34;
pub const XEN_SYSCTL_pm_op_set_max_cstate: u32 = 35;
pub const XEN_SYSCTL_pm_op_set_vcpu_migration_delay: u32 = 36;
pub const XEN_SYSCTL_pm_op_get_vcpu_migration_delay: u32 = 37;
pub const XEN_SYSCTL_pm_op_enable_turbo: u32 = 38;
pub const XEN_SYSCTL_pm_op_disable_turbo: u32 = 39;
pub const XEN_SYSCTL_CX_UNLIMITED: u32 = 4294967295;
pub const sysctl_page_offline: u32 = 1;
pub const sysctl_page_online: u32 = 2;
pub const sysctl_query_page_offline: u32 = 3;
pub const PG_OFFLINE_STATUS_MASK: u32 = 255;
pub const PG_OFFLINE_INVALID: u32 = 1;
pub const PG_OFFLINE_OFFLINED: u32 = 2;
pub const PG_OFFLINE_PENDING: u32 = 4;
pub const PG_OFFLINE_FAILED: u32 = 8;
pub const PG_OFFLINE_AGAIN: u32 = 16;
pub const PG_ONLINE_FAILED: u32 = 8;
pub const PG_ONLINE_ONLINED: u32 = 2;
pub const PG_OFFLINE_STATUS_OFFLINED: u32 = 2;
pub const PG_OFFLINE_STATUS_ONLINE: u32 = 4;
pub const PG_OFFLINE_STATUS_OFFLINE_PENDING: u32 = 8;
pub const PG_OFFLINE_STATUS_BROKEN: u32 = 16;
pub const PG_OFFLINE_MISC_MASK: u32 = 4080;
pub const PG_OFFLINE_XENPAGE: u32 = 256;
pub const PG_OFFLINE_DOM0PAGE: u32 = 512;
pub const PG_OFFLINE_ANONYMOUS: u32 = 1024;
pub const PG_OFFLINE_NOT_CONV_RAM: u32 = 2048;
pub const PG_OFFLINE_OWNED: u32 = 4096;
pub const PG_OFFLINE_BROKEN: u32 = 8192;
pub const PG_ONLINE_BROKEN: u32 = 8192;
pub const PG_OFFLINE_OWNER_SHIFT: u32 = 16;
pub const XEN_SYSCTL_LOCKPROF_reset: u32 = 1;
pub const XEN_SYSCTL_LOCKPROF_query: u32 = 2;
pub const LOCKPROF_TYPE_GLOBAL: u32 = 0;
pub const LOCKPROF_TYPE_PERDOM: u32 = 1;
pub const LOCKPROF_TYPE_N: u32 = 2;
pub const XEN_INVALID_CORE_ID: i32 = -1;
pub const XEN_INVALID_SOCKET_ID: i32 = -1;
pub const XEN_INVALID_NODE_ID: i32 = -1;
pub const XEN_INVALID_MEM_SZ: i32 = -1;
pub const XEN_INVALID_NODE_DIST: i32 = -1;
pub const XEN_SYSCTL_CPUPOOL_OP_CREATE: u32 = 1;
pub const XEN_SYSCTL_CPUPOOL_OP_DESTROY: u32 = 2;
pub const XEN_SYSCTL_CPUPOOL_OP_INFO: u32 = 3;
pub const XEN_SYSCTL_CPUPOOL_OP_ADDCPU: u32 = 4;
pub const XEN_SYSCTL_CPUPOOL_OP_RMCPU: u32 = 5;
pub const XEN_SYSCTL_CPUPOOL_OP_MOVEDOMAIN: u32 = 6;
pub const XEN_SYSCTL_CPUPOOL_OP_FREEINFO: u32 = 7;
pub const XEN_SYSCTL_CPUPOOL_PAR_ANY: u32 = 4294967295;
pub const ARINC653_MAX_DOMAINS_PER_SCHEDULE: u32 = 64;
pub const XEN_SYSCTL_SCHED_RATELIMIT_MAX: u32 = 500000;
pub const XEN_SYSCTL_SCHED_RATELIMIT_MIN: u32 = 100;
pub const XEN_SYSCTL_CSCHED_TSLICE_MAX: u32 = 1000;
pub const XEN_SYSCTL_CSCHED_TSLICE_MIN: u32 = 1;
pub const XEN_SYSCTL_CSCHED_MGR_DLY_MAX_US: u32 = 100000;
pub const XEN_SYSCTL_SCHEDOP_putinfo: u32 = 0;
pub const XEN_SYSCTL_SCHEDOP_getinfo: u32 = 1;
pub const XEN_GCOV_FORMAT_MAGIC: u32 = 1480806230;
pub const XEN_SYSCTL_COVERAGE_get_size: u32 = 0;
pub const XEN_SYSCTL_COVERAGE_read: u32 = 1;
pub const XEN_SYSCTL_COVERAGE_reset: u32 = 2;
pub const XEN_SYSCTL_PSR_CMT_get_total_rmid: u32 = 0;
pub const XEN_SYSCTL_PSR_CMT_get_l3_upscaling_factor: u32 = 1;
pub const XEN_SYSCTL_PSR_CMT_get_l3_cache_size: u32 = 2;
pub const XEN_SYSCTL_PSR_CMT_enabled: u32 = 3;
pub const XEN_SYSCTL_PSR_CMT_get_l3_event_mask: u32 = 4;
pub const XEN_INVALID_DEV: i32 = -2;
pub const XEN_SYSCTL_PSR_get_l3_info: u32 = 0;
pub const XEN_SYSCTL_PSR_get_l2_info: u32 = 1;
pub const XEN_SYSCTL_PSR_get_mba_info: u32 = 2;
pub const XEN_SYSCTL_PSR_CAT_L3_CDP: u32 = 1;
pub const XEN_SYSCTL_PSR_MBA_LINEAR: u32 = 1;
pub const XEN_SYSCTL_CPU_LEVELCAP_faulting: u32 = 1;
pub const XEN_SYSCTL_CPU_LEVELCAP_ecx: u32 = 2;
pub const XEN_SYSCTL_CPU_LEVELCAP_edx: u32 = 4;
pub const XEN_SYSCTL_CPU_LEVELCAP_extd_ecx: u32 = 8;
pub const XEN_SYSCTL_CPU_LEVELCAP_extd_edx: u32 = 16;
pub const XEN_SYSCTL_CPU_LEVELCAP_xsave_eax: u32 = 32;
pub const XEN_SYSCTL_CPU_LEVELCAP_thermal_ecx: u32 = 64;
pub const XEN_SYSCTL_CPU_LEVELCAP_l7s0_eax: u32 = 128;
pub const XEN_SYSCTL_CPU_LEVELCAP_l7s0_ebx: u32 = 256;
pub const XEN_SYSCTL_cpu_featureset_raw: u32 = 0;
pub const XEN_SYSCTL_cpu_featureset_host: u32 = 1;
pub const XEN_SYSCTL_cpu_featureset_pv: u32 = 2;
pub const XEN_SYSCTL_cpu_featureset_hvm: u32 = 3;
pub const LIVEPATCH_PAYLOAD_VERSION: u32 = 2;
pub const XEN_LIVEPATCH_NAME_SIZE: u32 = 128;
pub const XEN_SYSCTL_LIVEPATCH_UPLOAD: u32 = 0;
pub const XEN_SYSCTL_LIVEPATCH_GET: u32 = 1;
pub const LIVEPATCH_STATE_CHECKED: u32 = 1;
pub const LIVEPATCH_STATE_APPLIED: u32 = 2;
pub const XEN_SYSCTL_LIVEPATCH_LIST: u32 = 2;
pub const XEN_SYSCTL_LIVEPATCH_ACTION: u32 = 3;
pub const LIVEPATCH_ACTION_UNLOAD: u32 = 1;
pub const LIVEPATCH_ACTION_REVERT: u32 = 2;
pub const LIVEPATCH_ACTION_APPLY: u32 = 3;
pub const LIVEPATCH_ACTION_REPLACE: u32 = 4;
pub const LIVEPATCH_ACTION_APPLY_NODEPS: u32 = 1;
pub const XEN_SYSCTL_cpu_policy_raw: u32 = 0;
pub const XEN_SYSCTL_cpu_policy_host: u32 = 1;
pub const XEN_SYSCTL_cpu_policy_pv_max: u32 = 2;
pub const XEN_SYSCTL_cpu_policy_hvm_max: u32 = 3;
pub const XEN_SYSCTL_cpu_policy_pv_default: u32 = 4;
pub const XEN_SYSCTL_cpu_policy_hvm_default: u32 = 5;
pub const XEN_SYSCTL_readconsole: u32 = 1;
pub const XEN_SYSCTL_tbuf_op: u32 = 2;
pub const XEN_SYSCTL_physinfo: u32 = 3;
pub const XEN_SYSCTL_sched_id: u32 = 4;
pub const XEN_SYSCTL_perfc_op: u32 = 5;
pub const XEN_SYSCTL_getdomaininfolist: u32 = 6;
pub const XEN_SYSCTL_debug_keys: u32 = 7;
pub const XEN_SYSCTL_getcpuinfo: u32 = 8;
pub const XEN_SYSCTL_availheap: u32 = 9;
pub const XEN_SYSCTL_get_pmstat: u32 = 10;
pub const XEN_SYSCTL_cpu_hotplug: u32 = 11;
pub const XEN_SYSCTL_pm_op: u32 = 12;
pub const XEN_SYSCTL_page_offline_op: u32 = 14;
pub const XEN_SYSCTL_lockprof_op: u32 = 15;
pub const XEN_SYSCTL_cputopoinfo: u32 = 16;
pub const XEN_SYSCTL_numainfo: u32 = 17;
pub const XEN_SYSCTL_cpupool_op: u32 = 18;
pub const XEN_SYSCTL_scheduler_op: u32 = 19;
pub const XEN_SYSCTL_coverage_op: u32 = 20;
pub const XEN_SYSCTL_psr_cmt_op: u32 = 21;
pub const XEN_SYSCTL_pcitopoinfo: u32 = 22;
pub const XEN_SYSCTL_psr_alloc: u32 = 23;
pub const XEN_SYSCTL_get_cpu_levelling_caps: u32 = 25;
pub const XEN_SYSCTL_get_cpu_featureset: u32 = 26;
pub const XEN_SYSCTL_livepatch_op: u32 = 27;
pub const XEN_SYSCTL_get_cpu_policy: u32 = 29;
pub const XENVER_version: u32 = 0;
pub const XENVER_extraversion: u32 = 1;
pub const XENVER_compile_info: u32 = 2;
pub const XENVER_capabilities: u32 = 3;
pub const XENVER_changeset: u32 = 4;
pub const XENVER_platform_parameters: u32 = 5;
pub const XENVER_get_features: u32 = 6;
pub const XENVER_pagesize: u32 = 7;
pub const XENVER_guest_handle: u32 = 8;
pub const XENVER_commandline: u32 = 9;
pub const XENVER_build_id: u32 = 10;
pub const SCHEDOP_yield: u32 = 0;
pub const SCHEDOP_block: u32 = 1;
pub const SCHEDOP_shutdown: u32 = 2;
pub const SCHEDOP_poll: u32 = 3;
pub const SCHEDOP_remote_shutdown: u32 = 4;
pub const SCHEDOP_shutdown_code: u32 = 5;
pub const SCHEDOP_watchdog: u32 = 6;
pub const SCHEDOP_pin_override: u32 = 7;
pub const SHUTDOWN_poweroff: u32 = 0;
pub const SHUTDOWN_reboot: u32 = 1;
pub const SHUTDOWN_suspend: u32 = 2;
pub const SHUTDOWN_crash: u32 = 3;
pub const SHUTDOWN_watchdog: u32 = 4;
pub const SHUTDOWN_soft_reset: u32 = 5;
pub const SHUTDOWN_MAX: u32 = 5;
pub const XEN_DMOP_create_ioreq_server: u32 = 1;
pub const XEN_DMOP_get_ioreq_server_info: u32 = 2;
pub const _XEN_DMOP_no_gfns: u32 = 0;
pub const XEN_DMOP_no_gfns: u32 = 1;
pub const XEN_DMOP_map_io_range_to_ioreq_server: u32 = 3;
pub const XEN_DMOP_unmap_io_range_from_ioreq_server: u32 = 4;
pub const XEN_DMOP_IO_RANGE_PORT: u32 = 0;
pub const XEN_DMOP_IO_RANGE_MEMORY: u32 = 1;
pub const XEN_DMOP_IO_RANGE_PCI: u32 = 2;
pub const XEN_DMOP_set_ioreq_server_state: u32 = 5;
pub const XEN_DMOP_destroy_ioreq_server: u32 = 6;
pub const XEN_DMOP_track_dirty_vram: u32 = 7;
pub const XEN_DMOP_set_pci_intx_level: u32 = 8;
pub const XEN_DMOP_set_isa_irq_level: u32 = 9;
pub const XEN_DMOP_set_pci_link_route: u32 = 10;
pub const XEN_DMOP_modified_memory: u32 = 11;
pub const XEN_DMOP_set_mem_type: u32 = 12;
pub const XEN_DMOP_inject_event: u32 = 13;
pub const XEN_DMOP_EVENT_ext_int: u32 = 0;
pub const XEN_DMOP_EVENT_nmi: u32 = 2;
pub const XEN_DMOP_EVENT_hw_exc: u32 = 3;
pub const XEN_DMOP_EVENT_sw_int: u32 = 4;
pub const XEN_DMOP_EVENT_pri_sw_exc: u32 = 5;
pub const XEN_DMOP_EVENT_sw_exc: u32 = 6;
pub const XEN_DMOP_inject_msi: u32 = 14;
pub const XEN_DMOP_map_mem_type_to_ioreq_server: u32 = 15;
pub const XEN_DMOP_IOREQ_MEM_ACCESS_READ: u32 = 1;
pub const XEN_DMOP_IOREQ_MEM_ACCESS_WRITE: u32 = 2;
pub const XEN_DMOP_remote_shutdown: u32 = 16;
pub const XEN_DMOP_relocate_memory: u32 = 17;
pub const XEN_DMOP_pin_memory_cacheattr: u32 = 18;
pub const XEN_DMOP_MEM_CACHEATTR_UC: u32 = 0;
pub const XEN_DMOP_MEM_CACHEATTR_WC: u32 = 1;
pub const XEN_DMOP_MEM_CACHEATTR_WT: u32 = 4;
pub const XEN_DMOP_MEM_CACHEATTR_WP: u32 = 5;
pub const XEN_DMOP_MEM_CACHEATTR_WB: u32 = 6;
pub const XEN_DMOP_MEM_CACHEATTR_UCM: u32 = 7;
pub const XEN_DMOP_set_irq_level: u32 = 19;
pub const XEN_DMOP_nr_vcpus: u32 = 20;
pub const TRACE_EXTRA_MAX: u32 = 7;
pub const TRACE_EXTRA_SHIFT: u32 = 28;
pub const TRC_CLS_SHIFT: u32 = 16;
pub const TRC_GEN: u32 = 126976;
pub const TRC_SCHED: u32 = 192512;
pub const TRC_DOM0OP: u32 = 323584;
pub const TRC_HVM: u32 = 585728;
pub const TRC_MEM: u32 = 1110016;
pub const TRC_PV: u32 = 2158592;
pub const TRC_SHADOW: u32 = 4255744;
pub const TRC_HW: u32 = 8450048;
pub const TRC_GUEST: u32 = 134279168;
pub const TRC_ALL: u32 = 268431360;
pub const TRC_HD_CYCLE_FLAG: u32 = 2147483648;
pub const TRC_SUBCLS_SHIFT: u32 = 12;
pub const TRC_HVM_ENTRYEXIT: u32 = 528384;
pub const TRC_HVM_HANDLER: u32 = 532480;
pub const TRC_HVM_EMUL: u32 = 540672;
pub const TRC_SCHED_MIN: u32 = 135168;
pub const TRC_SCHED_CLASS: u32 = 139264;
pub const TRC_SCHED_VERBOSE: u32 = 163840;
pub const TRC_SCHED_ID_BITS: u32 = 3;
pub const TRC_SCHED_ID_SHIFT: u32 = 9;
pub const TRC_SCHED_ID_MASK: u32 = 3584;
pub const TRC_SCHED_EVT_MASK: i32 = -3585;
pub const TRC_SCHED_CSCHED: u32 = 0;
pub const TRC_SCHED_CSCHED2: u32 = 1;
pub const TRC_SCHED_ARINC653: u32 = 3;
pub const TRC_SCHED_RTDS: u32 = 4;
pub const TRC_SCHED_SNULL: u32 = 5;
pub const TRC_DOM0_DOMOPS: u32 = 266240;
pub const TRC_HW_PM: u32 = 8392704;
pub const TRC_HW_IRQ: u32 = 8396800;
pub const TRC_LOST_RECORDS: u32 = 126977;
pub const TRC_TRACE_WRAP_BUFFER: u32 = 126978;
pub const TRC_TRACE_CPU_CHANGE: u32 = 126979;
pub const TRC_SCHED_RUNSTATE_CHANGE: u32 = 135169;
pub const TRC_SCHED_CONTINUE_RUNNING: u32 = 135170;
pub const TRC_SCHED_DOM_ADD: u32 = 163841;
pub const TRC_SCHED_DOM_REM: u32 = 163842;
pub const TRC_SCHED_SLEEP: u32 = 163843;
pub const TRC_SCHED_WAKE: u32 = 163844;
pub const TRC_SCHED_YIELD: u32 = 163845;
pub const TRC_SCHED_BLOCK: u32 = 163846;
pub const TRC_SCHED_SHUTDOWN: u32 = 163847;
pub const TRC_SCHED_CTL: u32 = 163848;
pub const TRC_SCHED_ADJDOM: u32 = 163849;
pub const TRC_SCHED_SWITCH: u32 = 163850;
pub const TRC_SCHED_S_TIMER_FN: u32 = 163851;
pub const TRC_SCHED_T_TIMER_FN: u32 = 163852;
pub const TRC_SCHED_DOM_TIMER_FN: u32 = 163853;
pub const TRC_SCHED_SWITCH_INFPREV: u32 = 163854;
pub const TRC_SCHED_SWITCH_INFNEXT: u32 = 163855;
pub const TRC_SCHED_SHUTDOWN_CODE: u32 = 163856;
pub const TRC_SCHED_SWITCH_INFCONT: u32 = 163857;
pub const TRC_DOM0_DOM_ADD: u32 = 266241;
pub const TRC_DOM0_DOM_REM: u32 = 266242;
pub const TRC_MEM_PAGE_GRANT_MAP: u32 = 1110017;
pub const TRC_MEM_PAGE_GRANT_UNMAP: u32 = 1110018;
pub const TRC_MEM_PAGE_GRANT_TRANSFER: u32 = 1110019;
pub const TRC_MEM_SET_P2M_ENTRY: u32 = 1110020;
pub const TRC_MEM_DECREASE_RESERVATION: u32 = 1110021;
pub const TRC_MEM_POD_POPULATE: u32 = 1110032;
pub const TRC_MEM_POD_ZERO_RECLAIM: u32 = 1110033;
pub const TRC_MEM_POD_SUPERPAGE_SPLINTER: u32 = 1110034;
pub const TRC_PV_ENTRY: u32 = 2101248;
pub const TRC_PV_SUBCALL: u32 = 2105344;
pub const TRC_PV_HYPERCALL: u32 = 2101249;
pub const TRC_PV_TRAP: u32 = 2101251;
pub const TRC_PV_PAGE_FAULT: u32 = 2101252;
pub const TRC_PV_FORCED_INVALID_OP: u32 = 2101253;
pub const TRC_PV_EMULATE_PRIVOP: u32 = 2101254;
pub const TRC_PV_EMULATE_4GB: u32 = 2101255;
pub const TRC_PV_MATH_STATE_RESTORE: u32 = 2101256;
pub const TRC_PV_PAGING_FIXUP: u32 = 2101257;
pub const TRC_PV_GDT_LDT_MAPPING_FAULT: u32 = 2101258;
pub const TRC_PV_PTWR_EMULATION: u32 = 2101259;
pub const TRC_PV_PTWR_EMULATION_PAE: u32 = 2101260;
pub const TRC_PV_HYPERCALL_V2: u32 = 2101261;
pub const TRC_PV_HYPERCALL_SUBCALL: u32 = 2105358;
pub const TRC_PV_HYPERCALL_V2_ARG_MASK: u32 = 4293918720;
pub const TRC_SHADOW_NOT_SHADOW: u32 = 4255745;
pub const TRC_SHADOW_FAST_PROPAGATE: u32 = 4255746;
pub const TRC_SHADOW_FAST_MMIO: u32 = 4255747;
pub const TRC_SHADOW_FALSE_FAST_PATH: u32 = 4255748;
pub const TRC_SHADOW_MMIO: u32 = 4255749;
pub const TRC_SHADOW_FIXUP: u32 = 4255750;
pub const TRC_SHADOW_DOMF_DYING: u32 = 4255751;
pub const TRC_SHADOW_EMULATE: u32 = 4255752;
pub const TRC_SHADOW_EMULATE_UNSHADOW_USER: u32 = 4255753;
pub const TRC_SHADOW_EMULATE_UNSHADOW_EVTINJ: u32 = 4255754;
pub const TRC_SHADOW_EMULATE_UNSHADOW_UNHANDLED: u32 = 4255755;
pub const TRC_SHADOW_WRMAP_BF: u32 = 4255756;
pub const TRC_SHADOW_PREALLOC_UNPIN: u32 = 4255757;
pub const TRC_SHADOW_RESYNC_FULL: u32 = 4255758;
pub const TRC_SHADOW_RESYNC_ONLY: u32 = 4255759;
pub const TRC_HVM_NESTEDFLAG: u32 = 1024;
pub const TRC_HVM_VMENTRY: u32 = 528385;
pub const TRC_HVM_VMEXIT: u32 = 528386;
pub const TRC_HVM_PF_XEN: u32 = 532481;
pub const TRC_HVM_PF_INJECT: u32 = 532482;
pub const TRC_HVM_INJ_EXC: u32 = 532483;
pub const TRC_HVM_INJ_VIRQ: u32 = 532484;
pub const TRC_HVM_REINJ_VIRQ: u32 = 532485;
pub const TRC_HVM_IO_READ: u32 = 532486;
pub const TRC_HVM_IO_WRITE: u32 = 532487;
pub const TRC_HVM_CR_READ: u32 = 532488;
pub const TRC_HVM_CR_WRITE: u32 = 532489;
pub const TRC_HVM_DR_READ: u32 = 532490;
pub const TRC_HVM_DR_WRITE: u32 = 532491;
pub const TRC_HVM_MSR_READ: u32 = 532492;
pub const TRC_HVM_MSR_WRITE: u32 = 532493;
pub const TRC_HVM_CPUID: u32 = 532494;
pub const TRC_HVM_INTR: u32 = 532495;
pub const TRC_HVM_NMI: u32 = 532496;
pub const TRC_HVM_SMI: u32 = 532497;
pub const TRC_HVM_VMMCALL: u32 = 532498;
pub const TRC_HVM_HLT: u32 = 532499;
pub const TRC_HVM_INVLPG: u32 = 532500;
pub const TRC_HVM_MCE: u32 = 532501;
pub const TRC_HVM_IOPORT_READ: u32 = 532502;
pub const TRC_HVM_IOMEM_READ: u32 = 532503;
pub const TRC_HVM_CLTS: u32 = 532504;
pub const TRC_HVM_LMSW: u32 = 532505;
pub const TRC_HVM_RDTSC: u32 = 532506;
pub const TRC_HVM_INTR_WINDOW: u32 = 532512;
pub const TRC_HVM_NPF: u32 = 532513;
pub const TRC_HVM_REALMODE_EMULATE: u32 = 532514;
pub const TRC_HVM_TRAP: u32 = 532515;
pub const TRC_HVM_TRAP_DEBUG: u32 = 532516;
pub const TRC_HVM_VLAPIC: u32 = 532517;
pub const TRC_HVM_IOPORT_WRITE: u32 = 533014;
pub const TRC_HVM_IOMEM_WRITE: u32 = 533015;
pub const TRC_HVM_EMUL_HPET_START_TIMER: u32 = 540673;
pub const TRC_HVM_EMUL_PIT_START_TIMER: u32 = 540674;
pub const TRC_HVM_EMUL_RTC_START_TIMER: u32 = 540675;
pub const TRC_HVM_EMUL_LAPIC_START_TIMER: u32 = 540676;
pub const TRC_HVM_EMUL_HPET_STOP_TIMER: u32 = 540677;
pub const TRC_HVM_EMUL_PIT_STOP_TIMER: u32 = 540678;
pub const TRC_HVM_EMUL_RTC_STOP_TIMER: u32 = 540679;
pub const TRC_HVM_EMUL_LAPIC_STOP_TIMER: u32 = 540680;
pub const TRC_HVM_EMUL_PIT_TIMER_CB: u32 = 540681;
pub const TRC_HVM_EMUL_LAPIC_TIMER_CB: u32 = 540682;
pub const TRC_HVM_EMUL_PIC_INT_OUTPUT: u32 = 540683;
pub const TRC_HVM_EMUL_PIC_KICK: u32 = 540684;
pub const TRC_HVM_EMUL_PIC_INTACK: u32 = 540685;
pub const TRC_HVM_EMUL_PIC_POSEDGE: u32 = 540686;
pub const TRC_HVM_EMUL_PIC_NEGEDGE: u32 = 540687;
pub const TRC_HVM_EMUL_PIC_PEND_IRQ_CALL: u32 = 540688;
pub const TRC_HVM_EMUL_LAPIC_PIC_INTR: u32 = 540689;
pub const TRC_PM_FREQ_CHANGE: u32 = 8392705;
pub const TRC_PM_IDLE_ENTRY: u32 = 8392706;
pub const TRC_PM_IDLE_EXIT: u32 = 8392707;
pub const TRC_HW_IRQ_MOVE_CLEANUP_DELAY: u32 = 8396801;
pub const TRC_HW_IRQ_MOVE_CLEANUP: u32 = 8396802;
pub const TRC_HW_IRQ_BIND_VECTOR: u32 = 8396803;
pub const TRC_HW_IRQ_CLEAR_VECTOR: u32 = 8396804;
pub const TRC_HW_IRQ_MOVE_FINISH: u32 = 8396805;
pub const TRC_HW_IRQ_ASSIGN_VECTOR: u32 = 8396806;
pub const TRC_HW_IRQ_UNMAPPED_VECTOR: u32 = 8396807;
pub const TRC_HW_IRQ_HANDLED: u32 = 8396808;
pub const TRC_64_FLAG: u32 = 256;
pub const HVMOP_set_param: u32 = 0;
pub const HVMOP_get_param: u32 = 1;
pub const HVMOP_flush_tlbs: u32 = 5;
pub const HVMOP_pagetable_dying: u32 = 9;
pub const HVMOP_get_time: u32 = 10;
pub const HVMOP_xentrace: u32 = 11;
pub const HVMOP_set_mem_access: u32 = 12;
pub const HVMOP_get_mem_access: u32 = 13;
pub const HVMOP_get_mem_type: u32 = 15;
pub const HVM_IOREQSRV_BUFIOREQ_OFF: u32 = 0;
pub const HVM_IOREQSRV_BUFIOREQ_LEGACY: u32 = 1;
pub const HVM_IOREQSRV_BUFIOREQ_ATOMIC: u32 = 2;
pub const HVMOP_set_evtchn_upcall_vector: u32 = 23;
pub const HVMOP_guest_request_vm_event: u32 = 24;
pub const HVMOP_altp2m: u32 = 25;
pub const HVMOP_ALTP2M_INTERFACE_VERSION: u32 = 1;
pub const HVMOP_altp2m_get_domain_state: u32 = 1;
pub const HVMOP_altp2m_set_domain_state: u32 = 2;
pub const HVMOP_altp2m_vcpu_enable_notify: u32 = 3;
pub const HVMOP_altp2m_create_p2m: u32 = 4;
pub const HVMOP_altp2m_destroy_p2m: u32 = 5;
pub const HVMOP_altp2m_switch_p2m: u32 = 6;
pub const HVMOP_altp2m_set_mem_access: u32 = 7;
pub const HVMOP_altp2m_change_gfn: u32 = 8;
pub const HVMOP_altp2m_set_mem_access_multi: u32 = 9;
pub const HVMOP_altp2m_set_suppress_ve: u32 = 10;
pub const HVMOP_altp2m_get_suppress_ve: u32 = 11;
pub const HVMOP_altp2m_get_mem_access: u32 = 12;
pub const HVMOP_altp2m_vcpu_disable_notify: u32 = 13;
pub const HVMOP_altp2m_get_p2m_idx: u32 = 14;
pub const HVMOP_altp2m_set_suppress_ve_multi: u32 = 15;
pub const HVMOP_altp2m_set_visibility: u32 = 16;
pub const HVM_PARAM_PAE_ENABLED: u32 = 4;
pub const HVM_PARAM_DM_DOMAIN: u32 = 13;
pub const HVM_PARAM_MEMORY_EVENT_CR0: u32 = 20;
pub const HVM_PARAM_MEMORY_EVENT_CR3: u32 = 21;
pub const HVM_PARAM_MEMORY_EVENT_CR4: u32 = 22;
pub const HVM_PARAM_MEMORY_EVENT_INT3: u32 = 23;
pub const HVM_PARAM_NESTEDHVM: u32 = 24;
pub const HVM_PARAM_MEMORY_EVENT_SINGLE_STEP: u32 = 25;
pub const HVM_PARAM_BUFIOREQ_EVTCHN: u32 = 26;
pub const HVM_PARAM_MEMORY_EVENT_MSR: u32 = 30;
pub const HVM_PARAM_CALLBACK_IRQ: u32 = 0;
pub const HVM_PARAM_CALLBACK_TYPE_GSI: u32 = 0;
pub const HVM_PARAM_CALLBACK_TYPE_PCI_INTX: u32 = 1;
pub const HVM_PARAM_CALLBACK_TYPE_VECTOR: u32 = 2;
pub const HVM_PARAM_STORE_PFN: u32 = 1;
pub const HVM_PARAM_STORE_EVTCHN: u32 = 2;
pub const HVM_PARAM_IOREQ_PFN: u32 = 5;
pub const HVM_PARAM_BUFIOREQ_PFN: u32 = 6;
pub const HVM_PARAM_VIRIDIAN: u32 = 9;
pub const _HVMPV_base_freq: u32 = 0;
pub const HVMPV_base_freq: u32 = 1;
pub const _HVMPV_no_freq: u32 = 1;
pub const HVMPV_no_freq: u32 = 2;
pub const _HVMPV_time_ref_count: u32 = 2;
pub const HVMPV_time_ref_count: u32 = 4;
pub const _HVMPV_reference_tsc: u32 = 3;
pub const HVMPV_reference_tsc: u32 = 8;
pub const _HVMPV_hcall_remote_tlb_flush: u32 = 4;
pub const HVMPV_hcall_remote_tlb_flush: u32 = 16;
pub const _HVMPV_apic_assist: u32 = 5;
pub const HVMPV_apic_assist: u32 = 32;
pub const _HVMPV_crash_ctl: u32 = 6;
pub const HVMPV_crash_ctl: u32 = 64;
pub const _HVMPV_synic: u32 = 7;
pub const HVMPV_synic: u32 = 128;
pub const _HVMPV_stimer: u32 = 8;
pub const HVMPV_stimer: u32 = 256;
pub const _HVMPV_hcall_ipi: u32 = 9;
pub const HVMPV_hcall_ipi: u32 = 512;
pub const _HVMPV_ex_processor_masks: u32 = 10;
pub const HVMPV_ex_processor_masks: u32 = 1024;
pub const _HVMPV_no_vp_limit: u32 = 11;
pub const HVMPV_no_vp_limit: u32 = 2048;
pub const _HVMPV_cpu_hotplug: u32 = 12;
pub const HVMPV_cpu_hotplug: u32 = 4096;
pub const HVMPV_feature_mask: u32 = 8191;
pub const HVM_PARAM_TIMER_MODE: u32 = 10;
pub const HVMPTM_delay_for_missed_ticks: u32 = 0;
pub const HVMPTM_no_delay_for_missed_ticks: u32 = 1;
pub const HVMPTM_no_missed_ticks_pending: u32 = 2;
pub const HVMPTM_one_missed_tick_pending: u32 = 3;
pub const HVM_PARAM_HPET_ENABLED: u32 = 11;
pub const HVM_PARAM_IDENT_PT: u32 = 12;
pub const HVM_PARAM_ACPI_S_STATE: u32 = 14;
pub const HVM_PARAM_VM86_TSS: u32 = 15;
pub const HVM_PARAM_VPT_ALIGN: u32 = 16;
pub const HVM_PARAM_CONSOLE_PFN: u32 = 17;
pub const HVM_PARAM_CONSOLE_EVTCHN: u32 = 18;
pub const HVM_PARAM_ACPI_IOPORTS_LOCATION: u32 = 19;
pub const HVM_PARAM_PAGING_RING_PFN: u32 = 27;
pub const HVM_PARAM_MONITOR_RING_PFN: u32 = 28;
pub const HVM_PARAM_SHARING_RING_PFN: u32 = 29;
pub const HVM_PARAM_TRIPLE_FAULT_REASON: u32 = 31;
pub const HVM_PARAM_IOREQ_SERVER_PFN: u32 = 32;
pub const HVM_PARAM_NR_IOREQ_SERVER_PAGES: u32 = 33;
pub const HVM_PARAM_VM_GENERATION_ID_ADDR: u32 = 34;
pub const HVM_PARAM_ALTP2M: u32 = 35;
pub const XEN_ALTP2M_disabled: u32 = 0;
pub const XEN_ALTP2M_mixed: u32 = 1;
pub const XEN_ALTP2M_external: u32 = 2;
pub const XEN_ALTP2M_limited: u32 = 3;
pub const HVM_PARAM_X87_FIP_WIDTH: u32 = 36;
pub const HVM_PARAM_VM86_TSS_SIZED: u32 = 37;
pub const HVM_PARAM_MCA_CAP: u32 = 38;
pub const HVM_NR_PARAMS: u32 = 39;
pub const XEN_FLASK_INTERFACE_VERSION: u32 = 1;
pub const FLASK_LOAD: u32 = 1;
pub const FLASK_GETENFORCE: u32 = 2;
pub const FLASK_SETENFORCE: u32 = 3;
pub const FLASK_CONTEXT_TO_SID: u32 = 4;
pub const FLASK_SID_TO_CONTEXT: u32 = 5;
pub const FLASK_ACCESS: u32 = 6;
pub const FLASK_CREATE: u32 = 7;
pub const FLASK_RELABEL: u32 = 8;
pub const FLASK_USER: u32 = 9;
pub const FLASK_POLICYVERS: u32 = 10;
pub const FLASK_GETBOOL: u32 = 11;
pub const FLASK_SETBOOL: u32 = 12;
pub const FLASK_COMMITBOOLS: u32 = 13;
pub const FLASK_MLS: u32 = 14;
pub const FLASK_DISABLE: u32 = 15;
pub const FLASK_GETAVC_THRESHOLD: u32 = 16;
pub const FLASK_SETAVC_THRESHOLD: u32 = 17;
pub const FLASK_AVC_HASHSTATS: u32 = 18;
pub const FLASK_AVC_CACHESTATS: u32 = 19;
pub const FLASK_MEMBER: u32 = 20;
pub const FLASK_ADD_OCONTEXT: u32 = 21;
pub const FLASK_DEL_OCONTEXT: u32 = 22;
pub const FLASK_GET_PEER_SID: u32 = 23;
pub const FLASK_RELABEL_DOMAIN: u32 = 24;
pub const FLASK_DEVICETREE_LABEL: u32 = 25;
pub const KEXEC_XEN_NO_PAGES: u32 = 17;
pub const KEXEC_TYPE_DEFAULT: u32 = 0;
pub const KEXEC_TYPE_CRASH: u32 = 1;
pub const KEXEC_CMD_kexec: u32 = 0;
pub const KEXEC_CMD_kexec_load_v1: u32 = 1;
pub const KEXEC_CMD_kexec_unload_v1: u32 = 2;
pub const KEXEC_RANGE_MA_CRASH: u32 = 0;
pub const KEXEC_RANGE_MA_XEN: u32 = 1;
pub const KEXEC_RANGE_MA_CPU: u32 = 2;
pub const KEXEC_RANGE_MA_XENHEAP: u32 = 3;
pub const KEXEC_RANGE_MA_BOOT_PARAM: u32 = 4;
pub const KEXEC_RANGE_MA_EFI_MEMMAP: u32 = 5;
pub const KEXEC_RANGE_MA_VMCOREINFO: u32 = 6;
pub const KEXEC_CMD_kexec_get_range: u32 = 3;
pub const KEXEC_CMD_kexec_load: u32 = 4;
pub const KEXEC_CMD_kexec_unload: u32 = 5;
pub const KEXEC_CMD_kexec_status: u32 = 6;
pub const XENPF_INTERFACE_VERSION: u32 = 50331649;
pub const XENPF_settime32: u32 = 17;
pub const XENPF_settime64: u32 = 62;
pub const XENPF_settime: u32 = 62;
pub const XENPF_add_memtype: u32 = 31;
pub const XENPF_del_memtype: u32 = 32;
pub const XENPF_read_memtype: u32 = 33;
pub const XENPF_microcode_update: u32 = 35;
pub const XENPF_platform_quirk: u32 = 39;
pub const QUIRK_NOIRQBALANCING: u32 = 1;
pub const QUIRK_IOAPIC_BAD_REGSEL: u32 = 2;
pub const QUIRK_IOAPIC_GOOD_REGSEL: u32 = 3;
pub const XENPF_efi_runtime_call: u32 = 49;
pub const XEN_EFI_get_time: u32 = 1;
pub const XEN_EFI_set_time: u32 = 2;
pub const XEN_EFI_get_wakeup_time: u32 = 3;
pub const XEN_EFI_set_wakeup_time: u32 = 4;
pub const XEN_EFI_get_next_high_monotonic_count: u32 = 5;
pub const XEN_EFI_get_variable: u32 = 6;
pub const XEN_EFI_set_variable: u32 = 7;
pub const XEN_EFI_get_next_variable_name: u32 = 8;
pub const XEN_EFI_query_variable_info: u32 = 9;
pub const XEN_EFI_query_capsule_capabilities: u32 = 10;
pub const XEN_EFI_update_capsule: u32 = 11;
pub const XEN_EFI_GET_TIME_SET_CLEARS_NS: u32 = 1;
pub const XEN_EFI_GET_WAKEUP_TIME_ENABLED: u32 = 1;
pub const XEN_EFI_GET_WAKEUP_TIME_PENDING: u32 = 2;
pub const XEN_EFI_SET_WAKEUP_TIME_ENABLE: u32 = 1;
pub const XEN_EFI_SET_WAKEUP_TIME_ENABLE_ONLY: u32 = 2;
pub const XEN_EFI_VARIABLE_NON_VOLATILE: u32 = 1;
pub const XEN_EFI_VARIABLE_BOOTSERVICE_ACCESS: u32 = 2;
pub const XEN_EFI_VARIABLE_RUNTIME_ACCESS: u32 = 4;
pub const XEN_EFI_VARINFO_BOOT_SNAPSHOT: u32 = 1;
pub const XENPF_firmware_info: u32 = 50;
pub const XEN_FW_DISK_INFO: u32 = 1;
pub const XEN_FW_DISK_MBR_SIGNATURE: u32 = 2;
pub const XEN_FW_VBEDDC_INFO: u32 = 3;
pub const XEN_FW_EFI_INFO: u32 = 4;
pub const XEN_FW_EFI_VERSION: u32 = 0;
pub const XEN_FW_EFI_CONFIG_TABLE: u32 = 1;
pub const XEN_FW_EFI_VENDOR: u32 = 2;
pub const XEN_FW_EFI_MEM_INFO: u32 = 3;
pub const XEN_FW_EFI_RT_VERSION: u32 = 4;
pub const XEN_FW_EFI_PCI_ROM: u32 = 5;
pub const XEN_FW_EFI_APPLE_PROPERTIES: u32 = 6;
pub const XEN_FW_KBD_SHIFT_FLAGS: u32 = 5;
pub const XENPF_enter_acpi_sleep: u32 = 51;
pub const XENPF_ACPI_SLEEP_EXTENDED: u32 = 1;
pub const XENPF_change_freq: u32 = 52;
pub const XENPF_getidletime: u32 = 53;
pub const XENPF_set_processor_pminfo: u32 = 54;
pub const XEN_PROCESSOR_PM_CX: u32 = 1;
pub const XEN_PROCESSOR_PM_PX: u32 = 2;
pub const XEN_PROCESSOR_PM_TX: u32 = 4;
pub const XEN_PM_CX: u32 = 0;
pub const XEN_PM_PX: u32 = 1;
pub const XEN_PM_TX: u32 = 2;
pub const XEN_PM_PDC: u32 = 3;
pub const XEN_PX_PCT: u32 = 1;
pub const XEN_PX_PSS: u32 = 2;
pub const XEN_PX_PPC: u32 = 4;
pub const XEN_PX_PSD: u32 = 8;
pub const XEN_CPUPERF_SHARED_TYPE_HW: u32 = 1;
pub const XEN_CPUPERF_SHARED_TYPE_ALL: u32 = 2;
pub const XEN_CPUPERF_SHARED_TYPE_ANY: u32 = 3;
pub const XENPF_get_cpuinfo: u32 = 55;
pub const XEN_PCPU_FLAGS_ONLINE: u32 = 1;
pub const XEN_PCPU_FLAGS_INVALID: u32 = 2;
pub const XENPF_get_cpu_version: u32 = 48;
pub const XENPF_cpu_online: u32 = 56;
pub const XENPF_cpu_offline: u32 = 57;
pub const XENPF_cpu_hotadd: u32 = 58;
pub const XENPF_mem_hotadd: u32 = 59;
pub const XENPF_core_parking: u32 = 60;
pub const XEN_CORE_PARKING_SET: u32 = 1;
pub const XEN_CORE_PARKING_GET: u32 = 2;
pub const XENPF_resource_op: u32 = 61;
pub const XEN_RESOURCE_OP_MSR_READ: u32 = 0;
pub const XEN_RESOURCE_OP_MSR_WRITE: u32 = 1;
pub const XENPF_get_symbol: u32 = 63;
pub const XTL_STDIOSTREAM_SHOW_PID: u32 = 1;
pub const XTL_STDIOSTREAM_SHOW_DATE: u32 = 2;
pub const XTL_STDIOSTREAM_HIDE_PROGRESS: u32 = 4;
pub const XTL_STDIOSTREAM_PROGRESS_USE_CR: u32 = 8;
pub const XTL_STDIOSTREAM_PROGRESS_NO_CR: u32 = 16;
pub const __FOREIGN_X86_32_H_TMP__: u32 = 1;
pub const __i386___X86_32: u32 = 1;
pub const FLAT_RING1_CS_X86_32: u32 = 57369;
pub const FLAT_RING1_DS_X86_32: u32 = 57377;
pub const FLAT_RING1_SS_X86_32: u32 = 57377;
pub const FLAT_KERNEL_CS_X86_32: u32 = 57369;
pub const FLAT_KERNEL_DS_X86_32: u32 = 57377;
pub const FLAT_KERNEL_SS_X86_32: u32 = 57377;
pub const XEN_HAVE_PV_GUEST_ENTRY_X86_32: u32 = 1;
pub const XEN_LEGACY_MAX_VCPUS_X86_32: u32 = 32;
pub const _VGCF_i387_valid_X86_32: u32 = 0;
pub const VGCF_i387_valid_X86_32: u32 = 1;
pub const _VGCF_in_kernel_X86_32: u32 = 2;
pub const VGCF_in_kernel_X86_32: u32 = 4;
pub const _VGCF_failsafe_disables_events_X86_32: u32 = 3;
pub const VGCF_failsafe_disables_events_X86_32: u32 = 8;
pub const _VGCF_syscall_disables_events_X86_32: u32 = 4;
pub const VGCF_syscall_disables_events_X86_32: u32 = 16;
pub const _VGCF_online_X86_32: u32 = 5;
pub const VGCF_online_X86_32: u32 = 32;
pub const MAX_GUEST_CMDLINE_X86_32: u32 = 1024;
pub const x86_32_has_no_vcpu_cr_regs: u32 = 1;
pub const x86_32_has_no_vcpu_ar_regs: u32 = 1;
pub const x86_32_has_no_vcpu_guest_core_regs: u32 = 1;
pub const __FOREIGN_X86_64_H_TMP__: u32 = 1;
pub const __x86_64___X86_64: u32 = 1;
pub const FLAT_RING3_CS64_X86_64: u32 = 57395;
pub const FLAT_RING3_DS64_X86_64: u32 = 0;
pub const FLAT_RING3_SS64_X86_64: u32 = 57387;
pub const FLAT_KERNEL_DS64_X86_64: u32 = 0;
pub const FLAT_KERNEL_DS_X86_64: u32 = 0;
pub const FLAT_KERNEL_CS64_X86_64: u32 = 57395;
pub const FLAT_KERNEL_CS_X86_64: u32 = 57395;
pub const FLAT_KERNEL_SS64_X86_64: u32 = 57387;
pub const FLAT_KERNEL_SS_X86_64: u32 = 57387;
pub const XEN_HAVE_PV_GUEST_ENTRY_X86_64: u32 = 1;
pub const XEN_LEGACY_MAX_VCPUS_X86_64: u32 = 32;
pub const _VGCF_i387_valid_X86_64: u32 = 0;
pub const VGCF_i387_valid_X86_64: u32 = 1;
pub const _VGCF_in_kernel_X86_64: u32 = 2;
pub const VGCF_in_kernel_X86_64: u32 = 4;
pub const _VGCF_failsafe_disables_events_X86_64: u32 = 3;
pub const VGCF_failsafe_disables_events_X86_64: u32 = 8;
pub const _VGCF_syscall_disables_events_X86_64: u32 = 4;
pub const VGCF_syscall_disables_events_X86_64: u32 = 16;
pub const _VGCF_online_X86_64: u32 = 5;
pub const VGCF_online_X86_64: u32 = 32;
pub const MAX_GUEST_CMDLINE_X86_64: u32 = 1024;
pub const x86_64_has_no_vcpu_cr_regs: u32 = 1;
pub const x86_64_has_no_vcpu_ar_regs: u32 = 1;
pub const x86_64_has_no_vcpu_guest_core_regs: u32 = 1;
pub const __HYPERVISOR_mca: u32 = 48;
pub const XEN_MCA_INTERFACE_VERSION: u32 = 32292867;
pub const XEN_MC_NONURGENT: u32 = 1;
pub const XEN_MC_URGENT: u32 = 2;
pub const XEN_MC_ACK: u32 = 4;
pub const XEN_MC_OK: u32 = 0;
pub const XEN_MC_FETCHFAILED: u32 = 1;
pub const XEN_MC_NODATA: u32 = 2;
pub const XEN_MC_NOMATCH: u32 = 4;
pub const XEN_MC_CANNOTHANDLE: u32 = 8;
pub const XEN_MC_NOTDELIVERED: u32 = 16;
pub const XEN_MC_VCPUID_INVALID: u32 = 65535;
pub const VIRQ_MCA: u32 = 16;
pub const MC_TYPE_GLOBAL: u32 = 0;
pub const MC_TYPE_BANK: u32 = 1;
pub const MC_TYPE_EXTENDED: u32 = 2;
pub const MC_TYPE_RECOVERY: u32 = 3;
pub const MC_FLAG_CORRECTABLE: u32 = 1;
pub const MC_FLAG_UNCORRECTABLE: u32 = 2;
pub const MC_FLAG_RECOVERABLE: u32 = 4;
pub const MC_FLAG_POLLED: u32 = 8;
pub const MC_FLAG_RESET: u32 = 16;
pub const MC_FLAG_CMCI: u32 = 32;
pub const MC_FLAG_MCE: u32 = 64;
pub const REC_ACTION_RECOVERED: u32 = 1;
pub const REC_ACTION_NONE: u32 = 2;
pub const REC_ACTION_NEED_RESET: u32 = 4;
pub const MC_ACTION_PAGE_OFFLINE: u32 = 1;
pub const MC_ACTION_CPU_OFFLINE: u32 = 2;
pub const MC_ACTION_CACHE_SHRINK: u32 = 4;
pub const MAX_UNION_SIZE: u32 = 16;
pub const MCINFO_HYPERCALLSIZE: u32 = 1024;
pub const MCINFO_MAXSIZE: u32 = 768;
pub const MCINFO_FLAGS_UNCOMPLETE: u32 = 1;
pub const __MC_MSR_ARRAYSIZE: u32 = 8;
pub const MC_NCAPS: u32 = 7;
pub const MC_CAPS_STD_EDX: u32 = 0;
pub const MC_CAPS_AMD_EDX: u32 = 1;
pub const MC_CAPS_TM: u32 = 2;
pub const MC_CAPS_LINUX: u32 = 3;
pub const MC_CAPS_STD_ECX: u32 = 4;
pub const MC_CAPS_VIA: u32 = 5;
pub const MC_CAPS_AMD_ECX: u32 = 6;
pub const XEN_MC_fetch: u32 = 1;
pub const XEN_MC_notifydomain: u32 = 2;
pub const XEN_MC_physcpuinfo: u32 = 3;
pub const XEN_MC_msrinject: u32 = 4;
pub const MC_MSRINJ_MAXMSRS: u32 = 8;
pub const MC_MSRINJ_F_INTERPOSE: u32 = 1;
pub const MC_MSRINJ_F_GPADDR: u32 = 2;
pub const XEN_MC_mceinject: u32 = 5;
pub const XEN_MC_inject_v2: u32 = 6;
pub const XEN_MC_INJECT_TYPE_MASK: u32 = 7;
pub const XEN_MC_INJECT_TYPE_MCE: u32 = 0;
pub const XEN_MC_INJECT_TYPE_CMCI: u32 = 1;
pub const XEN_MC_INJECT_TYPE_LMCE: u32 = 2;
pub const XEN_MC_INJECT_CPU_BROADCAST: u32 = 8;
pub const XC_PAGE_SHIFT: u32 = 12;
pub const XC_PAGE_SIZE: u32 = 4096;
pub const XC_PAGE_MASK: i32 = -4096;
pub const INVALID_MFN: i32 = -1;
pub const XENCTRL_HAS_XC_INTERFACE: u32 = 1;
pub const XC_CORE_MAGIC: u32 = 4027575277;
pub const XC_CORE_MAGIC_HVM: u32 = 4027575278;
pub const XC_CPUPOOL_POOLID_ANY: u32 = 4294967295;
pub const E820_RAM: u32 = 1;
pub const E820_RESERVED: u32 = 2;
pub const E820_ACPI: u32 = 3;
pub const E820_NVS: u32 = 4;
pub const E820_UNUSABLE: u32 = 5;
pub const E820MAX: u32 = 128;
pub const XC_MAX_ERROR_MSG_LEN: u32 = 1024;
pub const GNTDEV_DMA_FLAG_WC: u32 = 1;
pub const GNTDEV_DMA_FLAG_COHERENT: u32 = 2;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const XS_WRITE_NONE: &[u8; 5usize] = b"NONE\0";
pub const XS_WRITE_CREATE: &[u8; 7usize] = b"CREATE\0";
pub const XS_WRITE_CREATE_EXCL: &[u8; 12usize] = b"CREATE|EXCL\0";
pub const XENSTORE_RING_SIZE: u32 = 1024;
pub const XENSTORE_PAYLOAD_MAX: u32 = 4096;
pub const XENSTORE_ABS_PATH_MAX: u32 = 3072;
pub const XENSTORE_REL_PATH_MAX: u32 = 2048;
pub const XENSTORE_SERVER_FEATURE_RECONNECTION: u32 = 1;
pub const XENSTORE_SERVER_FEATURE_ERROR: u32 = 2;
pub const XENSTORE_CONNECTED: u32 = 0;
pub const XENSTORE_RECONNECT: u32 = 1;
pub const XENSTORE_ERROR_NONE: u32 = 0;
pub const XENSTORE_ERROR_COMM: u32 = 1;
pub const XENSTORE_ERROR_RINGIDX: u32 = 2;
pub const XENSTORE_ERROR_PROTO: u32 = 3;
pub const XS_PERM_NONE: u32 = 0;
pub const XS_PERM_READ: u32 = 1;
pub const XS_PERM_WRITE: u32 = 2;
pub const XS_PERM_ENOENT_OK: u32 = 4;
pub const XS_PERM_OWNER: u32 = 8;
pub const XS_PERM_IGNORE: u32 = 16;
pub const XBT_NULL: u32 = 0;
pub const XS_OPEN_READONLY: u32 = 1;
pub const XS_OPEN_SOCKETONLY: u32 = 2;
pub const XS_UNWATCH_FILTER: u32 = 4;
pub type __s8 = xen_bindings_x86_64_types::c_schar;
pub type __u8 = xen_bindings_x86_64_types::c_uchar;
pub type __s16 = xen_bindings_x86_64_types::c_short;
pub type __u16 = xen_bindings_x86_64_types::c_ushort;
pub type __s32 = xen_bindings_x86_64_types::c_int;
pub type __u32 = xen_bindings_x86_64_types::c_uint;
pub type __s64 = xen_bindings_x86_64_types::c_long;
pub type __u64 = xen_bindings_x86_64_types::c_ulong;
pub type s8 = xen_bindings_x86_64_types::c_schar;
pub type u8_ = xen_bindings_x86_64_types::c_uchar;
pub type s16 = xen_bindings_x86_64_types::c_short;
pub type u16_ = xen_bindings_x86_64_types::c_ushort;
pub type s32 = xen_bindings_x86_64_types::c_int;
pub type u32_ = xen_bindings_x86_64_types::c_uint;
pub type s64 = xen_bindings_x86_64_types::c_long;
pub type u64_ = xen_bindings_x86_64_types::c_ulong;
pub type paddr_t = xen_bindings_x86_64_types::c_ulong;
pub type size_t = xen_bindings_x86_64_types::c_ulong;
pub type ssize_t = xen_bindings_x86_64_types::c_long;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type bool_t = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iret_context {
    pub rax: u64,
    pub r11: u64,
    pub rcx: u64,
    pub flags: u64,
    pub rip: u64,
    pub cs: u64,
    pub rflags: u64,
    pub rsp: u64,
    pub ss: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpu_user_regs {
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_1,
    pub __bindgen_anon_2: cpu_user_regs__bindgen_ty_2,
    pub __bindgen_anon_3: cpu_user_regs__bindgen_ty_3,
    pub __bindgen_anon_4: cpu_user_regs__bindgen_ty_4,
    pub __bindgen_anon_5: cpu_user_regs__bindgen_ty_5,
    pub __bindgen_anon_6: cpu_user_regs__bindgen_ty_6,
    pub __bindgen_anon_7: cpu_user_regs__bindgen_ty_7,
    pub __bindgen_anon_8: cpu_user_regs__bindgen_ty_8,
    pub __bindgen_anon_9: cpu_user_regs__bindgen_ty_9,
    pub __bindgen_anon_10: cpu_user_regs__bindgen_ty_10,
    pub __bindgen_anon_11: cpu_user_regs__bindgen_ty_11,
    pub __bindgen_anon_12: cpu_user_regs__bindgen_ty_12,
    pub __bindgen_anon_13: cpu_user_regs__bindgen_ty_13,
    pub __bindgen_anon_14: cpu_user_regs__bindgen_ty_14,
    pub __bindgen_anon_15: cpu_user_regs__bindgen_ty_15,
    pub error_code: u32,
    pub entry_vector: u32,
    pub __bindgen_anon_16: cpu_user_regs__bindgen_ty_16,
    pub cs: u16,
    pub _pad0: [u16; 1usize],
    pub saved_upcall_mask: u8,
    pub _pad1: [u8; 3usize],
    pub __bindgen_anon_17: cpu_user_regs__bindgen_ty_17,
    pub __bindgen_anon_18: cpu_user_regs__bindgen_ty_18,
    pub ss: u16,
    pub _pad2: [u16; 3usize],
    pub es: u16,
    pub _pad3: [u16; 3usize],
    pub ds: u16,
    pub _pad4: [u16; 3usize],
    pub fs: u16,
    pub _pad5: [u16; 3usize],
    pub gs: u16,
    pub _pad6: [u16; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_1 {
    pub r15: u64,
    pub r15d: u32,
    pub r15w: u16,
    pub r15b: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_2 {
    pub r14: u64,
    pub r14d: u32,
    pub r14w: u16,
    pub r14b: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_3 {
    pub r13: u64,
    pub r13d: u32,
    pub r13w: u16,
    pub r13b: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_4 {
    pub r12: u64,
    pub r12d: u32,
    pub r12w: u16,
    pub r12b: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_5 {
    pub rbp: u64,
    pub ebp: u32,
    pub bp: u16,
    pub bpl: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_6 {
    pub rbx: u64,
    pub ebx: u32,
    pub bx: u16,
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_6__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_user_regs__bindgen_ty_6__bindgen_ty_1 {
    pub bl: u8,
    pub bh: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_7 {
    pub r11: u64,
    pub r11d: u32,
    pub r11w: u16,
    pub r11b: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_8 {
    pub r10: u64,
    pub r10d: u32,
    pub r10w: u16,
    pub r10b: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_9 {
    pub r9: u64,
    pub r9d: u32,
    pub r9w: u16,
    pub r9b: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_10 {
    pub r8: u64,
    pub r8d: u32,
    pub r8w: u16,
    pub r8b: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_11 {
    pub rax: u64,
    pub eax: u32,
    pub ax: u16,
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_11__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_user_regs__bindgen_ty_11__bindgen_ty_1 {
    pub al: u8,
    pub ah: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_12 {
    pub rcx: u64,
    pub ecx: u32,
    pub cx: u16,
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_12__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_user_regs__bindgen_ty_12__bindgen_ty_1 {
    pub cl: u8,
    pub ch: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_13 {
    pub rdx: u64,
    pub edx: u32,
    pub dx: u16,
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_13__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_user_regs__bindgen_ty_13__bindgen_ty_1 {
    pub dl: u8,
    pub dh: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_14 {
    pub rsi: u64,
    pub esi: u32,
    pub si: u16,
    pub sil: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_15 {
    pub rdi: u64,
    pub edi: u32,
    pub di: u16,
    pub dil: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_16 {
    pub rip: u64,
    pub eip: u32,
    pub ip: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_17 {
    pub rflags: u64,
    pub eflags: u32,
    pub flags: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_18 {
    pub rsp: u64,
    pub esp: u32,
    pub sp: u16,
    pub spl: u8,
}
pub type cpu_user_regs_t = cpu_user_regs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_cpu_user_regs_t {
    pub p: *mut cpu_user_regs_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_cpu_user_regs_t {
    pub p: *const cpu_user_regs_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_vcpu_info {
    pub cr2: xen_bindings_x86_64_types::c_ulong,
    pub pad: xen_bindings_x86_64_types::c_ulong,
}
pub type arch_vcpu_info_t = arch_vcpu_info;
pub type xen_callback_t = xen_bindings_x86_64_types::c_ulong;
pub type xen_pfn_t = xen_bindings_x86_64_types::c_ulong;
pub type xen_ulong_t = xen_bindings_x86_64_types::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trap_info {
    pub vector: u8,
    pub flags: u8,
    pub cs: u16,
    pub address: xen_bindings_x86_64_types::c_ulong,
}
pub type trap_info_t = trap_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_trap_info_t {
    pub p: *mut trap_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_trap_info_t {
    pub p: *const trap_info_t,
}
pub type tsc_timestamp_t = u64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vcpu_guest_context {
    pub fpu_ctxt: vcpu_guest_context__bindgen_ty_1,
    pub flags: xen_bindings_x86_64_types::c_ulong,
    pub user_regs: cpu_user_regs,
    pub trap_ctxt: [trap_info; 256usize],
    pub ldt_base: xen_bindings_x86_64_types::c_ulong,
    pub ldt_ents: xen_bindings_x86_64_types::c_ulong,
    pub gdt_frames: [xen_bindings_x86_64_types::c_ulong; 16usize],
    pub gdt_ents: xen_bindings_x86_64_types::c_ulong,
    pub kernel_ss: xen_bindings_x86_64_types::c_ulong,
    pub kernel_sp: xen_bindings_x86_64_types::c_ulong,
    pub ctrlreg: [xen_bindings_x86_64_types::c_ulong; 8usize],
    pub debugreg: [xen_bindings_x86_64_types::c_ulong; 8usize],
    pub event_callback_eip: xen_bindings_x86_64_types::c_ulong,
    pub failsafe_callback_eip: xen_bindings_x86_64_types::c_ulong,
    pub syscall_callback_eip: xen_bindings_x86_64_types::c_ulong,
    pub vm_assist: xen_bindings_x86_64_types::c_ulong,
    pub fs_base: u64,
    pub gs_base_kernel: u64,
    pub gs_base_user: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_guest_context__bindgen_ty_1 {
    pub x: [xen_bindings_x86_64_types::c_char; 512usize],
}
pub type vcpu_guest_context_t = vcpu_guest_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_vcpu_guest_context_t {
    pub p: *mut vcpu_guest_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_vcpu_guest_context_t {
    pub p: *const vcpu_guest_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_shared_info {
    pub max_pfn: xen_bindings_x86_64_types::c_ulong,
    pub pfn_to_mfn_frame_list_list: xen_pfn_t,
    pub nmi_reason: xen_bindings_x86_64_types::c_ulong,
    pub p2m_cr3: xen_bindings_x86_64_types::c_ulong,
    pub p2m_vaddr: xen_bindings_x86_64_types::c_ulong,
    pub p2m_generation: xen_bindings_x86_64_types::c_ulong,
}
pub type arch_shared_info_t = arch_shared_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_arch_domainconfig {
    pub emulation_flags: u32,
    pub misc_flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_cpuid_leaf {
    pub leaf: u32,
    pub subleaf: u32,
    pub a: u32,
    pub b: u32,
    pub c: u32,
    pub d: u32,
}
pub type xen_cpuid_leaf_t = xen_cpuid_leaf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_cpuid_leaf_t {
    pub p: *mut xen_cpuid_leaf_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_cpuid_leaf_t {
    pub p: *const xen_cpuid_leaf_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_msr_entry {
    pub idx: u32,
    pub flags: u32,
    pub val: u64,
}
pub type xen_msr_entry_t = xen_msr_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_msr_entry_t {
    pub p: *mut xen_msr_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_msr_entry_t {
    pub p: *const xen_msr_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_char {
    pub p: *mut xen_bindings_x86_64_types::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_char {
    pub p: *const xen_bindings_x86_64_types::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uchar {
    pub p: *mut xen_bindings_x86_64_types::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uchar {
    pub p: *const xen_bindings_x86_64_types::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_int {
    pub p: *mut xen_bindings_x86_64_types::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_int {
    pub p: *const xen_bindings_x86_64_types::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint {
    pub p: *mut xen_bindings_x86_64_types::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint {
    pub p: *const xen_bindings_x86_64_types::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_void {
    pub p: *mut xen_bindings_x86_64_types::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_void {
    pub p: *const xen_bindings_x86_64_types::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint64_t {
    pub p: *mut u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint64_t {
    pub p: *const u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_pfn_t {
    pub p: *mut xen_pfn_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_pfn_t {
    pub p: *const xen_pfn_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_ulong_t {
    pub p: *mut xen_ulong_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_ulong_t {
    pub p: *const xen_ulong_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmuext_op {
    pub cmd: xen_bindings_x86_64_types::c_uint,
    pub arg1: mmuext_op__bindgen_ty_1,
    pub arg2: mmuext_op__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmuext_op__bindgen_ty_1 {
    pub mfn: xen_pfn_t,
    pub linear_addr: xen_bindings_x86_64_types::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmuext_op__bindgen_ty_2 {
    pub nr_ents: xen_bindings_x86_64_types::c_uint,
    pub vcpumask: __guest_handle_const_void,
    pub src_mfn: xen_pfn_t,
}
pub type mmuext_op_t = mmuext_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_mmuext_op_t {
    pub p: *mut mmuext_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_mmuext_op_t {
    pub p: *const mmuext_op_t,
}
pub type domid_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_update {
    pub ptr: u64,
    pub val: u64,
}
pub type mmu_update_t = mmu_update;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_mmu_update_t {
    pub p: *mut mmu_update_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_mmu_update_t {
    pub p: *const mmu_update_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multicall_entry {
    pub op: xen_ulong_t,
    pub result: xen_ulong_t,
    pub args: [xen_ulong_t; 6usize],
}
pub type multicall_entry_t = multicall_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_multicall_entry_t {
    pub p: *mut multicall_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_multicall_entry_t {
    pub p: *const multicall_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_time_info {
    pub version: u32,
    pub pad0: u32,
    pub tsc_timestamp: u64,
    pub system_time: u64,
    pub tsc_to_system_mul: u32,
    pub tsc_shift: i8,
    pub flags: u8,
    pub pad1: [u8; 2usize],
}
pub type vcpu_time_info_t = vcpu_time_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_info {
    pub evtchn_upcall_pending: u8,
    pub evtchn_upcall_mask: u8,
    pub evtchn_pending_sel: xen_ulong_t,
    pub arch: arch_vcpu_info,
    pub time: vcpu_time_info_t,
}
pub type vcpu_info_t = vcpu_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_info {
    pub vcpu_info: [vcpu_info; 32usize],
    pub evtchn_pending: [xen_ulong_t; 64usize],
    pub evtchn_mask: [xen_ulong_t; 64usize],
    pub wc_version: u32,
    pub wc_sec: u32,
    pub wc_nsec: u32,
    pub wc_sec_hi: u32,
    pub arch: arch_shared_info,
}
pub type shared_info_t = shared_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct start_info {
    pub magic: [xen_bindings_x86_64_types::c_char; 32usize],
    pub nr_pages: xen_bindings_x86_64_types::c_ulong,
    pub shared_info: xen_bindings_x86_64_types::c_ulong,
    pub flags: u32,
    pub store_mfn: xen_pfn_t,
    pub store_evtchn: u32,
    pub console: start_info__bindgen_ty_1,
    pub pt_base: xen_bindings_x86_64_types::c_ulong,
    pub nr_pt_frames: xen_bindings_x86_64_types::c_ulong,
    pub mfn_list: xen_bindings_x86_64_types::c_ulong,
    pub mod_start: xen_bindings_x86_64_types::c_ulong,
    pub mod_len: xen_bindings_x86_64_types::c_ulong,
    pub cmd_line: [i8; 1024usize],
    pub first_p2m_pfn: xen_bindings_x86_64_types::c_ulong,
    pub nr_p2m_frames: xen_bindings_x86_64_types::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union start_info__bindgen_ty_1 {
    pub domU: start_info__bindgen_ty_1__bindgen_ty_1,
    pub dom0: start_info__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct start_info__bindgen_ty_1__bindgen_ty_1 {
    pub mfn: xen_pfn_t,
    pub evtchn: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct start_info__bindgen_ty_1__bindgen_ty_2 {
    pub info_off: u32,
    pub info_size: u32,
}
pub type start_info_t = start_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_multiboot_mod_list {
    pub mod_start: u32,
    pub mod_end: u32,
    pub cmdline: u32,
    pub pad: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dom0_vga_console_info {
    pub video_type: u8,
    pub u: dom0_vga_console_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dom0_vga_console_info__bindgen_ty_1 {
    pub text_mode_3: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
    pub vesa_lfb: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1 {
    pub font_height: u16,
    pub cursor_x: u16,
    pub cursor_y: u16,
    pub rows: u16,
    pub columns: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2 {
    pub width: u16,
    pub height: u16,
    pub bytes_per_line: u16,
    pub bits_per_pixel: u16,
    pub lfb_base: u32,
    pub lfb_size: u32,
    pub red_pos: u8,
    pub red_size: u8,
    pub green_pos: u8,
    pub green_size: u8,
    pub blue_pos: u8,
    pub blue_size: u8,
    pub rsvd_pos: u8,
    pub rsvd_size: u8,
    pub gbl_caps: u32,
    pub mode_attrs: u16,
    pub pad: u16,
    pub ext_lfb_base: u32,
}
pub type dom0_vga_console_info_t = dom0_vga_console_info;
pub type xen_domain_handle_t = [u8; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint8 {
    pub p: *mut u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint8 {
    pub p: *const u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint16 {
    pub p: *mut u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint16 {
    pub p: *const u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint32 {
    pub p: *mut u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint32 {
    pub p: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint64 {
    pub p: *mut u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint64 {
    pub p: *const u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_uuid_t {
    pub a: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenctl_bitmap {
    pub bitmap: __guest_handle_uint8,
    pub nr_bits: u32,
}
pub type xenctl_bitmap_t = xenctl_bitmap;
pub type evtchn_port_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_evtchn_port_t {
    pub p: *mut evtchn_port_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_evtchn_port_t {
    pub p: *const evtchn_port_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_alloc_unbound {
    pub dom: domid_t,
    pub remote_dom: domid_t,
    pub port: evtchn_port_t,
}
pub type evtchn_alloc_unbound_t = evtchn_alloc_unbound;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_interdomain {
    pub remote_dom: domid_t,
    pub remote_port: evtchn_port_t,
    pub local_port: evtchn_port_t,
}
pub type evtchn_bind_interdomain_t = evtchn_bind_interdomain;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_virq {
    pub virq: u32,
    pub vcpu: u32,
    pub port: evtchn_port_t,
}
pub type evtchn_bind_virq_t = evtchn_bind_virq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_pirq {
    pub pirq: u32,
    pub flags: u32,
    pub port: evtchn_port_t,
}
pub type evtchn_bind_pirq_t = evtchn_bind_pirq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_ipi {
    pub vcpu: u32,
    pub port: evtchn_port_t,
}
pub type evtchn_bind_ipi_t = evtchn_bind_ipi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_close {
    pub port: evtchn_port_t,
}
pub type evtchn_close_t = evtchn_close;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_send {
    pub port: evtchn_port_t,
}
pub type evtchn_send_t = evtchn_send;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evtchn_status {
    pub dom: domid_t,
    pub port: evtchn_port_t,
    pub status: u32,
    pub vcpu: u32,
    pub u: evtchn_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evtchn_status__bindgen_ty_1 {
    pub unbound: evtchn_status__bindgen_ty_1__bindgen_ty_1,
    pub interdomain: evtchn_status__bindgen_ty_1__bindgen_ty_2,
    pub pirq: u32,
    pub virq: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_status__bindgen_ty_1__bindgen_ty_1 {
    pub dom: domid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_status__bindgen_ty_1__bindgen_ty_2 {
    pub dom: domid_t,
    pub port: evtchn_port_t,
}
pub type evtchn_status_t = evtchn_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_vcpu {
    pub port: evtchn_port_t,
    pub vcpu: u32,
}
pub type evtchn_bind_vcpu_t = evtchn_bind_vcpu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_unmask {
    pub port: evtchn_port_t,
}
pub type evtchn_unmask_t = evtchn_unmask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_reset {
    pub dom: domid_t,
}
pub type evtchn_reset_t = evtchn_reset;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_init_control {
    pub control_gfn: u64,
    pub offset: u32,
    pub vcpu: u32,
    pub link_bits: u8,
    pub _pad: [u8; 7usize],
}
pub type evtchn_init_control_t = evtchn_init_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_expand_array {
    pub array_gfn: u64,
}
pub type evtchn_expand_array_t = evtchn_expand_array;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_set_priority {
    pub port: evtchn_port_t,
    pub priority: u32,
}
pub type evtchn_set_priority_t = evtchn_set_priority;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evtchn_op {
    pub cmd: u32,
    pub u: evtchn_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evtchn_op__bindgen_ty_1 {
    pub alloc_unbound: evtchn_alloc_unbound_t,
    pub bind_interdomain: evtchn_bind_interdomain_t,
    pub bind_virq: evtchn_bind_virq_t,
    pub bind_pirq: evtchn_bind_pirq_t,
    pub bind_ipi: evtchn_bind_ipi_t,
    pub close: evtchn_close_t,
    pub send: evtchn_send_t,
    pub status: evtchn_status_t,
    pub bind_vcpu: evtchn_bind_vcpu_t,
    pub unmask: evtchn_unmask_t,
}
pub type evtchn_op_t = evtchn_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_evtchn_op_t {
    pub p: *mut evtchn_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_evtchn_op_t {
    pub p: *const evtchn_op_t,
}
pub type event_word_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_fifo_control_block {
    pub ready: u32,
    pub _rsvd: u32,
    pub head: [u32; 16usize],
}
pub type evtchn_fifo_control_block_t = evtchn_fifo_control_block;
pub type grant_ref_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v1 {
    pub flags: u16,
    pub domid: domid_t,
    pub frame: u32,
}
pub type grant_entry_v1_t = grant_entry_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_header {
    pub flags: u16,
    pub domid: domid_t,
}
pub type grant_entry_header_t = grant_entry_header;
#[repr(C)]
#[derive(Copy, Clone)]
pub union grant_entry_v2 {
    pub hdr: grant_entry_header_t,
    pub full_page: grant_entry_v2__bindgen_ty_1,
    pub sub_page: grant_entry_v2__bindgen_ty_2,
    pub transitive: grant_entry_v2__bindgen_ty_3,
    pub __spacer: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_1 {
    pub hdr: grant_entry_header_t,
    pub pad0: u32,
    pub frame: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_2 {
    pub hdr: grant_entry_header_t,
    pub page_off: u16,
    pub length: u16,
    pub frame: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_3 {
    pub hdr: grant_entry_header_t,
    pub trans_domid: domid_t,
    pub pad0: u16,
    pub gref: grant_ref_t,
}
pub type grant_entry_v2_t = grant_entry_v2;
pub type grant_status_t = u16;
pub type grant_handle_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_map_grant_ref {
    pub host_addr: u64,
    pub flags: u32,
    pub ref_: grant_ref_t,
    pub dom: domid_t,
    pub status: i16,
    pub handle: grant_handle_t,
    pub dev_bus_addr: u64,
}
pub type gnttab_map_grant_ref_t = gnttab_map_grant_ref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_map_grant_ref_t {
    pub p: *mut gnttab_map_grant_ref_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_map_grant_ref_t {
    pub p: *const gnttab_map_grant_ref_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_unmap_grant_ref {
    pub host_addr: u64,
    pub dev_bus_addr: u64,
    pub handle: grant_handle_t,
    pub status: i16,
}
pub type gnttab_unmap_grant_ref_t = gnttab_unmap_grant_ref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_unmap_grant_ref_t {
    pub p: *mut gnttab_unmap_grant_ref_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_unmap_grant_ref_t {
    pub p: *const gnttab_unmap_grant_ref_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_setup_table {
    pub dom: domid_t,
    pub nr_frames: u32,
    pub status: i16,
    pub frame_list: __guest_handle_xen_pfn_t,
}
pub type gnttab_setup_table_t = gnttab_setup_table;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_setup_table_t {
    pub p: *mut gnttab_setup_table_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_setup_table_t {
    pub p: *const gnttab_setup_table_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_dump_table {
    pub dom: domid_t,
    pub status: i16,
}
pub type gnttab_dump_table_t = gnttab_dump_table;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_dump_table_t {
    pub p: *mut gnttab_dump_table_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_dump_table_t {
    pub p: *const gnttab_dump_table_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_transfer {
    pub mfn: xen_pfn_t,
    pub domid: domid_t,
    pub ref_: grant_ref_t,
    pub status: i16,
}
pub type gnttab_transfer_t = gnttab_transfer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_transfer_t {
    pub p: *mut gnttab_transfer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_transfer_t {
    pub p: *const gnttab_transfer_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_copy {
    pub source: gnttab_copy_gnttab_copy_ptr,
    pub dest: gnttab_copy_gnttab_copy_ptr,
    pub len: u16,
    pub flags: u16,
    pub status: i16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_copy_gnttab_copy_ptr {
    pub u: gnttab_copy_gnttab_copy_ptr__bindgen_ty_1,
    pub domid: domid_t,
    pub offset: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gnttab_copy_gnttab_copy_ptr__bindgen_ty_1 {
    pub ref_: grant_ref_t,
    pub gmfn: xen_pfn_t,
}
pub type gnttab_copy_t = gnttab_copy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_copy_t {
    pub p: *mut gnttab_copy_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_copy_t {
    pub p: *const gnttab_copy_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_query_size {
    pub dom: domid_t,
    pub nr_frames: u32,
    pub max_nr_frames: u32,
    pub status: i16,
}
pub type gnttab_query_size_t = gnttab_query_size;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_query_size_t {
    pub p: *mut gnttab_query_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_query_size_t {
    pub p: *const gnttab_query_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_unmap_and_replace {
    pub host_addr: u64,
    pub new_addr: u64,
    pub handle: grant_handle_t,
    pub status: i16,
}
pub type gnttab_unmap_and_replace_t = gnttab_unmap_and_replace;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_unmap_and_replace_t {
    pub p: *mut gnttab_unmap_and_replace_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_unmap_and_replace_t {
    pub p: *const gnttab_unmap_and_replace_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_set_version {
    pub version: u32,
}
pub type gnttab_set_version_t = gnttab_set_version;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_set_version_t {
    pub p: *mut gnttab_set_version_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_set_version_t {
    pub p: *const gnttab_set_version_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_get_status_frames {
    pub nr_frames: u32,
    pub dom: domid_t,
    pub status: i16,
    pub frame_list: __guest_handle_uint64_t,
}
pub type gnttab_get_status_frames_t = gnttab_get_status_frames;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_get_status_frames_t {
    pub p: *mut gnttab_get_status_frames_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_get_status_frames_t {
    pub p: *const gnttab_get_status_frames_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_get_version {
    pub dom: domid_t,
    pub pad: u16,
    pub version: u32,
}
pub type gnttab_get_version_t = gnttab_get_version;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_get_version_t {
    pub p: *mut gnttab_get_version_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_get_version_t {
    pub p: *const gnttab_get_version_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_swap_grant_ref {
    pub ref_a: grant_ref_t,
    pub ref_b: grant_ref_t,
    pub status: i16,
}
pub type gnttab_swap_grant_ref_t = gnttab_swap_grant_ref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_swap_grant_ref_t {
    pub p: *mut gnttab_swap_grant_ref_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_swap_grant_ref_t {
    pub p: *const gnttab_swap_grant_ref_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_cache_flush {
    pub a: gnttab_cache_flush__bindgen_ty_1,
    pub offset: u16,
    pub length: u16,
    pub op: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gnttab_cache_flush__bindgen_ty_1 {
    pub dev_bus_addr: u64,
    pub ref_: grant_ref_t,
}
pub type gnttab_cache_flush_t = gnttab_cache_flush;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_cache_flush_t {
    pub p: *mut gnttab_cache_flush_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_cache_flush_t {
    pub p: *const gnttab_cache_flush_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_save_descriptor {
    pub typecode: u16,
    pub instance: u16,
    pub length: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_save_end {}
#[repr(C)]
#[derive(Debug)]
pub struct __HVM_SAVE_TYPE_END {
    pub t: hvm_save_end,
    pub c: __IncompleteArrayField<xen_bindings_x86_64_types::c_char>,
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_save_header {
    pub magic: u32,
    pub version: u32,
    pub changeset: u64,
    pub cpuid: u32,
    pub gtsc_khz: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_HEADER {
    pub t: hvm_save_header,
    pub c: [xen_bindings_x86_64_types::c_char; 1usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_cpu {
    pub fpu_regs: [u8; 512usize],
    pub rax: u64,
    pub rbx: u64,
    pub rcx: u64,
    pub rdx: u64,
    pub rbp: u64,
    pub rsi: u64,
    pub rdi: u64,
    pub rsp: u64,
    pub r8: u64,
    pub r9: u64,
    pub r10: u64,
    pub r11: u64,
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rip: u64,
    pub rflags: u64,
    pub cr0: u64,
    pub cr2: u64,
    pub cr3: u64,
    pub cr4: u64,
    pub dr0: u64,
    pub dr1: u64,
    pub dr2: u64,
    pub dr3: u64,
    pub dr6: u64,
    pub dr7: u64,
    pub cs_sel: u32,
    pub ds_sel: u32,
    pub es_sel: u32,
    pub fs_sel: u32,
    pub gs_sel: u32,
    pub ss_sel: u32,
    pub tr_sel: u32,
    pub ldtr_sel: u32,
    pub cs_limit: u32,
    pub ds_limit: u32,
    pub es_limit: u32,
    pub fs_limit: u32,
    pub gs_limit: u32,
    pub ss_limit: u32,
    pub tr_limit: u32,
    pub ldtr_limit: u32,
    pub idtr_limit: u32,
    pub gdtr_limit: u32,
    pub cs_base: u64,
    pub ds_base: u64,
    pub es_base: u64,
    pub fs_base: u64,
    pub gs_base: u64,
    pub ss_base: u64,
    pub tr_base: u64,
    pub ldtr_base: u64,
    pub idtr_base: u64,
    pub gdtr_base: u64,
    pub cs_arbytes: u32,
    pub ds_arbytes: u32,
    pub es_arbytes: u32,
    pub fs_arbytes: u32,
    pub gs_arbytes: u32,
    pub ss_arbytes: u32,
    pub tr_arbytes: u32,
    pub ldtr_arbytes: u32,
    pub sysenter_cs: u64,
    pub sysenter_esp: u64,
    pub sysenter_eip: u64,
    pub shadow_gs: u64,
    pub msr_flags: u64,
    pub msr_lstar: u64,
    pub msr_star: u64,
    pub msr_cstar: u64,
    pub msr_syscall_mask: u64,
    pub msr_efer: u64,
    pub msr_tsc_aux: u64,
    pub tsc: u64,
    pub __bindgen_anon_1: hvm_hw_cpu__bindgen_ty_1,
    pub error_code: u32,
    pub flags: u32,
    pub pad0: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hvm_hw_cpu__bindgen_ty_1 {
    pub pending_event: u32,
    pub __bindgen_anon_1: hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn pending_vector(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_pending_vector(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_type(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pending_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_error_valid(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pending_error_valid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 19u8) as u32) }
    }
    #[inline]
    pub fn set_pending_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_valid(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pending_valid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pending_vector: u8,
        pending_type: u8,
        pending_error_valid: u8,
        pending_reserved: u32,
        pending_valid: u8,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let pending_vector: u8 = unsafe { ::core::mem::transmute(pending_vector) };
            pending_vector as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let pending_type: u8 = unsafe { ::core::mem::transmute(pending_type) };
            pending_type as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let pending_error_valid: u8 = unsafe { ::core::mem::transmute(pending_error_valid) };
            pending_error_valid as u64
        });
        __bindgen_bitfield_unit.set(12usize, 19u8, {
            let pending_reserved: u32 = unsafe { ::core::mem::transmute(pending_reserved) };
            pending_reserved as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let pending_valid: u8 = unsafe { ::core::mem::transmute(pending_valid) };
            pending_valid as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_cpu_compat {
    pub fpu_regs: [u8; 512usize],
    pub rax: u64,
    pub rbx: u64,
    pub rcx: u64,
    pub rdx: u64,
    pub rbp: u64,
    pub rsi: u64,
    pub rdi: u64,
    pub rsp: u64,
    pub r8: u64,
    pub r9: u64,
    pub r10: u64,
    pub r11: u64,
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rip: u64,
    pub rflags: u64,
    pub cr0: u64,
    pub cr2: u64,
    pub cr3: u64,
    pub cr4: u64,
    pub dr0: u64,
    pub dr1: u64,
    pub dr2: u64,
    pub dr3: u64,
    pub dr6: u64,
    pub dr7: u64,
    pub cs_sel: u32,
    pub ds_sel: u32,
    pub es_sel: u32,
    pub fs_sel: u32,
    pub gs_sel: u32,
    pub ss_sel: u32,
    pub tr_sel: u32,
    pub ldtr_sel: u32,
    pub cs_limit: u32,
    pub ds_limit: u32,
    pub es_limit: u32,
    pub fs_limit: u32,
    pub gs_limit: u32,
    pub ss_limit: u32,
    pub tr_limit: u32,
    pub ldtr_limit: u32,
    pub idtr_limit: u32,
    pub gdtr_limit: u32,
    pub cs_base: u64,
    pub ds_base: u64,
    pub es_base: u64,
    pub fs_base: u64,
    pub gs_base: u64,
    pub ss_base: u64,
    pub tr_base: u64,
    pub ldtr_base: u64,
    pub idtr_base: u64,
    pub gdtr_base: u64,
    pub cs_arbytes: u32,
    pub ds_arbytes: u32,
    pub es_arbytes: u32,
    pub fs_arbytes: u32,
    pub gs_arbytes: u32,
    pub ss_arbytes: u32,
    pub tr_arbytes: u32,
    pub ldtr_arbytes: u32,
    pub sysenter_cs: u64,
    pub sysenter_esp: u64,
    pub sysenter_eip: u64,
    pub shadow_gs: u64,
    pub msr_flags: u64,
    pub msr_lstar: u64,
    pub msr_star: u64,
    pub msr_cstar: u64,
    pub msr_syscall_mask: u64,
    pub msr_efer: u64,
    pub tsc: u64,
    pub __bindgen_anon_1: hvm_hw_cpu_compat__bindgen_ty_1,
    pub error_code: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hvm_hw_cpu_compat__bindgen_ty_1 {
    pub pending_event: u32,
    pub __bindgen_anon_1: hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn pending_vector(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_pending_vector(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_type(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pending_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_error_valid(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pending_error_valid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 19u8) as u32) }
    }
    #[inline]
    pub fn set_pending_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_valid(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pending_valid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pending_vector: u8,
        pending_type: u8,
        pending_error_valid: u8,
        pending_reserved: u32,
        pending_valid: u8,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let pending_vector: u8 = unsafe { ::core::mem::transmute(pending_vector) };
            pending_vector as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let pending_type: u8 = unsafe { ::core::mem::transmute(pending_type) };
            pending_type as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let pending_error_valid: u8 = unsafe { ::core::mem::transmute(pending_error_valid) };
            pending_error_valid as u64
        });
        __bindgen_bitfield_unit.set(12usize, 19u8, {
            let pending_reserved: u32 = unsafe { ::core::mem::transmute(pending_reserved) };
            pending_reserved as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let pending_valid: u8 = unsafe { ::core::mem::transmute(pending_valid) };
            pending_valid as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __HVM_SAVE_TYPE_CPU {
    pub t: hvm_hw_cpu,
    pub c: [xen_bindings_x86_64_types::c_char; 2usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_vpic {
    pub irr: u8,
    pub imr: u8,
    pub isr: u8,
    pub irq_base: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub elcr: u8,
    pub int_output: u8,
}
impl hvm_hw_vpic {
    #[inline]
    pub fn init_state(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_init_state(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn priority_add(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_priority_add(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn readsel_isr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_readsel_isr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn poll(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_poll(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auto_eoi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_auto_eoi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rotate_on_auto_eoi(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rotate_on_auto_eoi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn special_fully_nested_mode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_special_fully_nested_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn special_mask_mode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_special_mask_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_master(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_master(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        init_state: u8,
        priority_add: u8,
        readsel_isr: u8,
        poll: u8,
        auto_eoi: u8,
        rotate_on_auto_eoi: u8,
        special_fully_nested_mode: u8,
        special_mask_mode: u8,
        is_master: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let init_state: u8 = unsafe { ::core::mem::transmute(init_state) };
            init_state as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let priority_add: u8 = unsafe { ::core::mem::transmute(priority_add) };
            priority_add as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let readsel_isr: u8 = unsafe { ::core::mem::transmute(readsel_isr) };
            readsel_isr as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let poll: u8 = unsafe { ::core::mem::transmute(poll) };
            poll as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let auto_eoi: u8 = unsafe { ::core::mem::transmute(auto_eoi) };
            auto_eoi as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let rotate_on_auto_eoi: u8 = unsafe { ::core::mem::transmute(rotate_on_auto_eoi) };
            rotate_on_auto_eoi as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let special_fully_nested_mode: u8 =
                unsafe { ::core::mem::transmute(special_fully_nested_mode) };
            special_fully_nested_mode as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let special_mask_mode: u8 = unsafe { ::core::mem::transmute(special_mask_mode) };
            special_mask_mode as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let is_master: u8 = unsafe { ::core::mem::transmute(is_master) };
            is_master as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PIC {
    pub t: hvm_hw_vpic,
    pub c: [xen_bindings_x86_64_types::c_char; 3usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vioapic_redir_entry {
    pub bits: u64,
    pub fields: vioapic_redir_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vioapic_redir_entry__bindgen_ty_1 {
    pub vector: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub reserved: [u8; 4usize],
    pub dest_id: u8,
}
impl vioapic_redir_entry__bindgen_ty_1 {
    #[inline]
    pub fn delivery_mode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_delivery_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn dest_mode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dest_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn delivery_status(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_delivery_status(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn polarity(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_polarity(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn remote_irr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_remote_irr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trig_mode(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_trig_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mask(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserve(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_reserve(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        delivery_mode: u8,
        dest_mode: u8,
        delivery_status: u8,
        polarity: u8,
        remote_irr: u8,
        trig_mode: u8,
        mask: u8,
        reserve: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let delivery_mode: u8 = unsafe { ::core::mem::transmute(delivery_mode) };
            delivery_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dest_mode: u8 = unsafe { ::core::mem::transmute(dest_mode) };
            dest_mode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let delivery_status: u8 = unsafe { ::core::mem::transmute(delivery_status) };
            delivery_status as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let polarity: u8 = unsafe { ::core::mem::transmute(polarity) };
            polarity as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let remote_irr: u8 = unsafe { ::core::mem::transmute(remote_irr) };
            remote_irr as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let trig_mode: u8 = unsafe { ::core::mem::transmute(trig_mode) };
            trig_mode as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let mask: u8 = unsafe { ::core::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(9usize, 7u8, {
            let reserve: u8 = unsafe { ::core::mem::transmute(reserve) };
            reserve as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_vioapic {
    pub base_address: u64,
    pub ioregsel: u32,
    pub id: u32,
    pub redirtbl: [vioapic_redir_entry; 48usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __HVM_SAVE_TYPE_IOAPIC {
    pub t: hvm_hw_vioapic,
    pub c: [xen_bindings_x86_64_types::c_char; 4usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_lapic {
    pub apic_base_msr: u64,
    pub disabled: u32,
    pub timer_divisor: u32,
    pub tdt_msr: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_LAPIC {
    pub t: hvm_hw_lapic,
    pub c: [xen_bindings_x86_64_types::c_char; 5usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_lapic_regs {
    pub data: [u8; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_LAPIC_REGS {
    pub t: hvm_hw_lapic_regs,
    pub c: [xen_bindings_x86_64_types::c_char; 6usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_pci_irqs {
    pub __bindgen_anon_1: hvm_hw_pci_irqs__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hvm_hw_pci_irqs__bindgen_ty_1 {
    pub i: [xen_bindings_x86_64_types::c_ulong; 2usize],
    pub pad: [u64; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PCI_IRQ {
    pub t: hvm_hw_pci_irqs,
    pub c: [xen_bindings_x86_64_types::c_char; 7usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_isa_irqs {
    pub __bindgen_anon_1: hvm_hw_isa_irqs__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hvm_hw_isa_irqs__bindgen_ty_1 {
    pub i: [xen_bindings_x86_64_types::c_ulong; 1usize],
    pub pad: [u64; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __HVM_SAVE_TYPE_ISA_IRQ {
    pub t: hvm_hw_isa_irqs,
    pub c: [xen_bindings_x86_64_types::c_char; 8usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_pci_link {
    pub route: [u8; 4usize],
    pub pad0: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PCI_LINK {
    pub t: hvm_hw_pci_link,
    pub c: [xen_bindings_x86_64_types::c_char; 9usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_pit {
    pub channels: [hvm_hw_pit_hvm_hw_pit_channel; 3usize],
    pub speaker_data_on: u32,
    pub pad0: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_pit_hvm_hw_pit_channel {
    pub count: u32,
    pub latched_count: u16,
    pub count_latched: u8,
    pub status_latched: u8,
    pub status: u8,
    pub read_state: u8,
    pub write_state: u8,
    pub write_latch: u8,
    pub rw_mode: u8,
    pub mode: u8,
    pub bcd: u8,
    pub gate: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PIT {
    pub t: hvm_hw_pit,
    pub c: [xen_bindings_x86_64_types::c_char; 10usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_rtc {
    pub cmos_data: [u8; 14usize],
    pub cmos_index: u8,
    pub pad0: u8,
    pub rtc_offset: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_RTC {
    pub t: hvm_hw_rtc,
    pub c: [xen_bindings_x86_64_types::c_char; 11usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_hpet {
    pub capability: u64,
    pub res0: u64,
    pub config: u64,
    pub res1: u64,
    pub isr: u64,
    pub res2: [u64; 25usize],
    pub mc64: u64,
    pub res3: u64,
    pub timers: [hvm_hw_hpet__bindgen_ty_1; 3usize],
    pub res5: [u64; 84usize],
    pub period: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_hpet__bindgen_ty_1 {
    pub config: u64,
    pub cmp: u64,
    pub fsb: u64,
    pub res4: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_HPET {
    pub t: hvm_hw_hpet,
    pub c: [xen_bindings_x86_64_types::c_char; 12usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_pmtimer {
    pub tmr_val: u32,
    pub pm1a_sts: u16,
    pub pm1a_en: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PMTIMER {
    pub t: hvm_hw_pmtimer,
    pub c: [xen_bindings_x86_64_types::c_char; 13usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_mtrr {
    pub msr_pat_cr: u64,
    pub msr_mtrr_var: [u64; 16usize],
    pub msr_mtrr_fixed: [u64; 11usize],
    pub msr_mtrr_cap: u64,
    pub msr_mtrr_def_type: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_MTRR {
    pub t: hvm_hw_mtrr,
    pub c: [xen_bindings_x86_64_types::c_char; 14usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_cpu_xsave {
    pub xfeature_mask: u64,
    pub xcr0: u64,
    pub xcr0_accum: u64,
    pub save_area: hvm_hw_cpu_xsave__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_cpu_xsave__bindgen_ty_1 {
    pub fpu_sse: hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1,
    pub xsave_hdr: hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1 {
    pub x: [xen_bindings_x86_64_types::c_char; 512usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr {
    pub xstate_bv: u64,
    pub xcomp_bv: u64,
    pub reserved: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_viridian_domain_context {
    pub hypercall_gpa: u64,
    pub guest_os_id: u64,
    pub time_ref_count: u64,
    pub reference_tsc: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_VIRIDIAN_DOMAIN {
    pub t: hvm_viridian_domain_context,
    pub c: [xen_bindings_x86_64_types::c_char; 15usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_viridian_vcpu_context {
    pub vp_assist_msr: u64,
    pub apic_assist_pending: u8,
    pub _pad: [u8; 7usize],
    pub simp_msr: u64,
    pub sint_msr: [u64; 16usize],
    pub stimer_config_msr: [u64; 4usize],
    pub stimer_count_msr: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_VIRIDIAN_VCPU {
    pub t: hvm_viridian_vcpu_context,
    pub c: [xen_bindings_x86_64_types::c_char; 17usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_vmce_vcpu {
    pub caps: u64,
    pub mci_ctl2_bank0: u64,
    pub mci_ctl2_bank1: u64,
    pub mcg_ext_ctl: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_VMCE_VCPU {
    pub t: hvm_vmce_vcpu,
    pub c: [xen_bindings_x86_64_types::c_char; 18usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_tsc_adjust {
    pub tsc_adjust: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_TSC_ADJUST {
    pub t: hvm_tsc_adjust,
    pub c: [xen_bindings_x86_64_types::c_char; 19usize],
    pub cpt: [xen_bindings_x86_64_types::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct hvm_msr {
    pub count: u32,
    pub msr: __IncompleteArrayField<hvm_msr_hvm_one_msr>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_msr_hvm_one_msr {
    pub index: u32,
    pub _rsvd: u32,
    pub val: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_eoi {
    pub irq: u32,
}
pub type physdev_eoi_t = physdev_eoi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_eoi_t {
    pub p: *mut physdev_eoi_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_eoi_t {
    pub p: *const physdev_eoi_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pirq_eoi_gmfn {
    pub gmfn: xen_pfn_t,
}
pub type physdev_pirq_eoi_gmfn_t = physdev_pirq_eoi_gmfn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_pirq_eoi_gmfn_t {
    pub p: *mut physdev_pirq_eoi_gmfn_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_pirq_eoi_gmfn_t {
    pub p: *const physdev_pirq_eoi_gmfn_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_irq_status_query {
    pub irq: u32,
    pub flags: u32,
}
pub type physdev_irq_status_query_t = physdev_irq_status_query;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_irq_status_query_t {
    pub p: *mut physdev_irq_status_query_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_irq_status_query_t {
    pub p: *const physdev_irq_status_query_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_set_iopl {
    pub iopl: u32,
}
pub type physdev_set_iopl_t = physdev_set_iopl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_set_iopl_t {
    pub p: *mut physdev_set_iopl_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_set_iopl_t {
    pub p: *const physdev_set_iopl_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_set_iobitmap {
    pub bitmap: __guest_handle_uint8,
    pub nr_ports: u32,
}
pub type physdev_set_iobitmap_t = physdev_set_iobitmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_set_iobitmap_t {
    pub p: *mut physdev_set_iobitmap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_set_iobitmap_t {
    pub p: *const physdev_set_iobitmap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_apic {
    pub apic_physbase: xen_bindings_x86_64_types::c_ulong,
    pub reg: u32,
    pub value: u32,
}
pub type physdev_apic_t = physdev_apic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_apic_t {
    pub p: *mut physdev_apic_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_apic_t {
    pub p: *const physdev_apic_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_irq {
    pub irq: u32,
    pub vector: u32,
}
pub type physdev_irq_t = physdev_irq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_irq_t {
    pub p: *mut physdev_irq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_irq_t {
    pub p: *const physdev_irq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_map_pirq {
    pub domid: domid_t,
    pub type_: xen_bindings_x86_64_types::c_int,
    pub index: xen_bindings_x86_64_types::c_int,
    pub pirq: xen_bindings_x86_64_types::c_int,
    pub bus: xen_bindings_x86_64_types::c_int,
    pub devfn: xen_bindings_x86_64_types::c_int,
    pub entry_nr: xen_bindings_x86_64_types::c_int,
    pub table_base: u64,
}
pub type physdev_map_pirq_t = physdev_map_pirq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_map_pirq_t {
    pub p: *mut physdev_map_pirq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_map_pirq_t {
    pub p: *const physdev_map_pirq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_unmap_pirq {
    pub domid: domid_t,
    pub pirq: xen_bindings_x86_64_types::c_int,
}
pub type physdev_unmap_pirq_t = physdev_unmap_pirq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_unmap_pirq_t {
    pub p: *mut physdev_unmap_pirq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_unmap_pirq_t {
    pub p: *const physdev_unmap_pirq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_manage_pci {
    pub bus: u8,
    pub devfn: u8,
}
pub type physdev_manage_pci_t = physdev_manage_pci;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_manage_pci_t {
    pub p: *mut physdev_manage_pci_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_manage_pci_t {
    pub p: *const physdev_manage_pci_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_restore_msi {
    pub bus: u8,
    pub devfn: u8,
}
pub type physdev_restore_msi_t = physdev_restore_msi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_restore_msi_t {
    pub p: *mut physdev_restore_msi_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_restore_msi_t {
    pub p: *const physdev_restore_msi_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_manage_pci_ext {
    pub bus: u8,
    pub devfn: u8,
    pub is_extfn: u32,
    pub is_virtfn: u32,
    pub physfn: physdev_manage_pci_ext__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_manage_pci_ext__bindgen_ty_1 {
    pub bus: u8,
    pub devfn: u8,
}
pub type physdev_manage_pci_ext_t = physdev_manage_pci_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_manage_pci_ext_t {
    pub p: *mut physdev_manage_pci_ext_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_manage_pci_ext_t {
    pub p: *const physdev_manage_pci_ext_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_op {
    pub cmd: u32,
    pub u: physdev_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union physdev_op__bindgen_ty_1 {
    pub irq_status_query: physdev_irq_status_query_t,
    pub set_iopl: physdev_set_iopl_t,
    pub set_iobitmap: physdev_set_iobitmap_t,
    pub apic_op: physdev_apic_t,
    pub irq_op: physdev_irq_t,
}
pub type physdev_op_t = physdev_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_op_t {
    pub p: *mut physdev_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_op_t {
    pub p: *const physdev_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_setup_gsi {
    pub gsi: xen_bindings_x86_64_types::c_int,
    pub triggering: u8,
    pub polarity: u8,
}
pub type physdev_setup_gsi_t = physdev_setup_gsi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_setup_gsi_t {
    pub p: *mut physdev_setup_gsi_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_setup_gsi_t {
    pub p: *const physdev_setup_gsi_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_get_free_pirq {
    pub type_: xen_bindings_x86_64_types::c_int,
    pub pirq: u32,
}
pub type physdev_get_free_pirq_t = physdev_get_free_pirq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_get_free_pirq_t {
    pub p: *mut physdev_get_free_pirq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_get_free_pirq_t {
    pub p: *const physdev_get_free_pirq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pci_mmcfg_reserved {
    pub address: u64,
    pub segment: u16,
    pub start_bus: u8,
    pub end_bus: u8,
    pub flags: u32,
}
pub type physdev_pci_mmcfg_reserved_t = physdev_pci_mmcfg_reserved;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_pci_mmcfg_reserved_t {
    pub p: *mut physdev_pci_mmcfg_reserved_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_pci_mmcfg_reserved_t {
    pub p: *const physdev_pci_mmcfg_reserved_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct physdev_pci_device_add {
    pub seg: u16,
    pub bus: u8,
    pub devfn: u8,
    pub flags: u32,
    pub physfn: physdev_pci_device_add__bindgen_ty_1,
    pub optarr: __IncompleteArrayField<u32>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pci_device_add__bindgen_ty_1 {
    pub bus: u8,
    pub devfn: u8,
}
pub type physdev_pci_device_add_t = physdev_pci_device_add;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_pci_device_add_t {
    pub p: *mut physdev_pci_device_add_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_pci_device_add_t {
    pub p: *const physdev_pci_device_add_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pci_device {
    pub seg: u16,
    pub bus: u8,
    pub devfn: u8,
}
pub type physdev_pci_device_t = physdev_pci_device;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_pci_device_t {
    pub p: *mut physdev_pci_device_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_pci_device_t {
    pub p: *const physdev_pci_device_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_dbgp_op {
    pub op: u8,
    pub bus: u8,
    pub u: physdev_dbgp_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union physdev_dbgp_op__bindgen_ty_1 {
    pub pci: physdev_pci_device_t,
}
pub type physdev_dbgp_op_t = physdev_dbgp_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_dbgp_op_t {
    pub p: *mut physdev_dbgp_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_dbgp_op_t {
    pub p: *const physdev_dbgp_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_memory_reservation {
    pub extent_start: __guest_handle_xen_pfn_t,
    pub nr_extents: xen_ulong_t,
    pub extent_order: xen_bindings_x86_64_types::c_uint,
    pub mem_flags: xen_bindings_x86_64_types::c_uint,
    pub domid: domid_t,
}
pub type xen_memory_reservation_t = xen_memory_reservation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_memory_reservation_t {
    pub p: *mut xen_memory_reservation_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_memory_reservation_t {
    pub p: *const xen_memory_reservation_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_memory_exchange {
    pub in_: xen_memory_reservation,
    pub out: xen_memory_reservation,
    pub nr_exchanged: xen_ulong_t,
}
pub type xen_memory_exchange_t = xen_memory_exchange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_memory_exchange_t {
    pub p: *mut xen_memory_exchange_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_memory_exchange_t {
    pub p: *const xen_memory_exchange_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_memory_domain {
    pub domid: domid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_machphys_mfn_list {
    pub max_extents: xen_bindings_x86_64_types::c_uint,
    pub extent_start: __guest_handle_xen_pfn_t,
    pub nr_extents: xen_bindings_x86_64_types::c_uint,
}
pub type xen_machphys_mfn_list_t = xen_machphys_mfn_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_machphys_mfn_list_t {
    pub p: *mut xen_machphys_mfn_list_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_machphys_mfn_list_t {
    pub p: *const xen_machphys_mfn_list_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_machphys_mapping {
    pub v_start: xen_ulong_t,
    pub v_end: xen_ulong_t,
    pub max_mfn: xen_ulong_t,
}
pub type xen_machphys_mapping_t = xen_machphys_mapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_machphys_mapping_t {
    pub p: *mut xen_machphys_mapping_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_machphys_mapping_t {
    pub p: *const xen_machphys_mapping_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_add_to_physmap {
    pub domid: domid_t,
    pub size: u16,
    pub space: xen_bindings_x86_64_types::c_uint,
    pub idx: xen_ulong_t,
    pub gpfn: xen_pfn_t,
}
pub type xen_add_to_physmap_t = xen_add_to_physmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_add_to_physmap_t {
    pub p: *mut xen_add_to_physmap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_add_to_physmap_t {
    pub p: *const xen_add_to_physmap_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_add_to_physmap_batch {
    pub domid: domid_t,
    pub space: u16,
    pub size: u16,
    pub u: xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra,
    pub idxs: __guest_handle_xen_ulong_t,
    pub gpfns: __guest_handle_xen_pfn_t,
    pub errs: __guest_handle_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra {
    pub foreign_domid: domid_t,
    pub res0: u16,
}
pub type xen_add_to_physmap_batch_t = xen_add_to_physmap_batch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_add_to_physmap_batch_t {
    pub p: *mut xen_add_to_physmap_batch_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_add_to_physmap_batch_t {
    pub p: *const xen_add_to_physmap_batch_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_remove_from_physmap {
    pub domid: domid_t,
    pub gpfn: xen_pfn_t,
}
pub type xen_remove_from_physmap_t = xen_remove_from_physmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_remove_from_physmap_t {
    pub p: *mut xen_remove_from_physmap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_remove_from_physmap_t {
    pub p: *const xen_remove_from_physmap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_memory_map {
    pub nr_entries: xen_bindings_x86_64_types::c_uint,
    pub buffer: __guest_handle_void,
}
pub type xen_memory_map_t = xen_memory_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_memory_map_t {
    pub p: *mut xen_memory_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_memory_map_t {
    pub p: *const xen_memory_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_foreign_memory_map {
    pub domid: domid_t,
    pub map: xen_memory_map,
}
pub type xen_foreign_memory_map_t = xen_foreign_memory_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_foreign_memory_map_t {
    pub p: *mut xen_foreign_memory_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_foreign_memory_map_t {
    pub p: *const xen_foreign_memory_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_pod_target {
    pub target_pages: u64,
    pub tot_pages: u64,
    pub pod_cache_pages: u64,
    pub pod_entries: u64,
    pub domid: domid_t,
}
pub type xen_pod_target_t = xen_pod_target;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_paging_op {
    pub op: u8,
    pub domain: domid_t,
    pub buffer: __guest_handle_const_uint8,
    pub gfn: u64,
}
pub type xen_mem_paging_op_t = xen_mem_paging_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mem_paging_op_t {
    pub p: *mut xen_mem_paging_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mem_paging_op_t {
    pub p: *const xen_mem_paging_op_t,
}
pub const xenmem_access_t_XENMEM_access_n: xenmem_access_t = 0;
pub const xenmem_access_t_XENMEM_access_r: xenmem_access_t = 1;
pub const xenmem_access_t_XENMEM_access_w: xenmem_access_t = 2;
pub const xenmem_access_t_XENMEM_access_rw: xenmem_access_t = 3;
pub const xenmem_access_t_XENMEM_access_x: xenmem_access_t = 4;
pub const xenmem_access_t_XENMEM_access_rx: xenmem_access_t = 5;
pub const xenmem_access_t_XENMEM_access_wx: xenmem_access_t = 6;
pub const xenmem_access_t_XENMEM_access_rwx: xenmem_access_t = 7;
pub const xenmem_access_t_XENMEM_access_rx2rw: xenmem_access_t = 8;
pub const xenmem_access_t_XENMEM_access_n2rwx: xenmem_access_t = 9;
pub const xenmem_access_t_XENMEM_access_default: xenmem_access_t = 10;
pub type xenmem_access_t = xen_bindings_x86_64_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_access_op {
    pub op: u8,
    pub access: u8,
    pub domid: domid_t,
    pub nr: u32,
    pub pfn: u64,
    pub pfn_list: __guest_handle_const_uint64,
    pub access_list: __guest_handle_const_uint8,
}
pub type xen_mem_access_op_t = xen_mem_access_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mem_access_op_t {
    pub p: *mut xen_mem_access_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mem_access_op_t {
    pub p: *const xen_mem_access_op_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op {
    pub op: u8,
    pub domain: domid_t,
    pub u: xen_mem_sharing_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1 {
    pub nominate: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
    pub share: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
    pub range: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
    pub debug: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug,
    pub fork: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate {
    pub u: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
    pub handle: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1 {
    pub gfn: u64,
    pub grant_ref: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share {
    pub source_gfn: u64,
    pub source_handle: u64,
    pub client_gfn: u64,
    pub client_handle: u64,
    pub client_domain: domid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range {
    pub first_gfn: u64,
    pub last_gfn: u64,
    pub opaque: u64,
    pub client_domain: domid_t,
    pub _pad: [u16; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug {
    pub u: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1 {
    pub gfn: u64,
    pub mfn: u64,
    pub gref: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork {
    pub parent_domain: domid_t,
    pub flags: u16,
    pub pad: u32,
}
pub type xen_mem_sharing_op_t = xen_mem_sharing_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mem_sharing_op_t {
    pub p: *mut xen_mem_sharing_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mem_sharing_op_t {
    pub p: *const xen_mem_sharing_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_reserved_device_memory {
    pub start_pfn: xen_pfn_t,
    pub nr_pages: xen_ulong_t,
}
pub type xen_reserved_device_memory_t = xen_reserved_device_memory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_reserved_device_memory_t {
    pub p: *mut xen_reserved_device_memory_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_reserved_device_memory_t {
    pub p: *const xen_reserved_device_memory_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_reserved_device_memory_map {
    pub flags: u32,
    pub nr_entries: xen_bindings_x86_64_types::c_uint,
    pub buffer: __guest_handle_xen_reserved_device_memory_t,
    pub dev: xen_reserved_device_memory_map__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_reserved_device_memory_map__bindgen_ty_1 {
    pub pci: physdev_pci_device_t,
}
pub type xen_reserved_device_memory_map_t = xen_reserved_device_memory_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_reserved_device_memory_map_t {
    pub p: *mut xen_reserved_device_memory_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_reserved_device_memory_map_t {
    pub p: *const xen_reserved_device_memory_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_acquire_resource {
    pub domid: domid_t,
    pub type_: u16,
    pub id: u32,
    pub nr_frames: u32,
    pub pad: u32,
    pub frame: u64,
    pub frame_list: __guest_handle_xen_pfn_t,
}
pub type xen_mem_acquire_resource_t = xen_mem_acquire_resource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mem_acquire_resource_t {
    pub p: *mut xen_mem_acquire_resource_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mem_acquire_resource_t {
    pub p: *const xen_mem_acquire_resource_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_vmemrange {
    pub start: u64,
    pub end: u64,
    pub flags: xen_bindings_x86_64_types::c_uint,
    pub nid: xen_bindings_x86_64_types::c_uint,
}
pub type xen_vmemrange_t = xen_vmemrange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_vmemrange_t {
    pub p: *mut xen_vmemrange_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_vmemrange_t {
    pub p: *const xen_vmemrange_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_vnuma_topology_info {
    pub domid: domid_t,
    pub pad: u16,
    pub nr_vnodes: xen_bindings_x86_64_types::c_uint,
    pub nr_vcpus: xen_bindings_x86_64_types::c_uint,
    pub nr_vmemranges: xen_bindings_x86_64_types::c_uint,
    pub vdistance: xen_vnuma_topology_info__bindgen_ty_1,
    pub vcpu_to_vnode: xen_vnuma_topology_info__bindgen_ty_2,
    pub vmemrange: xen_vnuma_topology_info__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_1 {
    pub h: __guest_handle_uint,
    pub pad: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_2 {
    pub h: __guest_handle_uint,
    pub pad: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_3 {
    pub h: __guest_handle_xen_vmemrange_t,
    pub pad: u64,
}
pub type xen_vnuma_topology_info_t = xen_vnuma_topology_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_vnuma_topology_info_t {
    pub p: *mut xen_vnuma_topology_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_vnuma_topology_info_t {
    pub p: *const xen_vnuma_topology_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_createdomain {
    pub ssidref: u32,
    pub handle: xen_domain_handle_t,
    pub flags: u32,
    pub iommu_opts: u32,
    pub max_vcpus: u32,
    pub max_evtchn_port: u32,
    pub max_grant_frames: i32,
    pub max_maptrack_frames: i32,
    pub grant_opts: u32,
    pub vmtrace_size: u32,
    pub cpupool_id: u32,
    pub arch: xen_arch_domainconfig,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_getdomaininfo {
    pub domain: domid_t,
    pub pad1: u16,
    pub flags: u32,
    pub tot_pages: u64,
    pub max_pages: u64,
    pub outstanding_pages: u64,
    pub shr_pages: u64,
    pub paged_pages: u64,
    pub shared_info_frame: u64,
    pub cpu_time: u64,
    pub nr_online_vcpus: u32,
    pub max_vcpu_id: u32,
    pub ssidref: u32,
    pub handle: xen_domain_handle_t,
    pub cpupool: u32,
    pub gpaddr_bits: u8,
    pub pad2: [u8; 7usize],
    pub arch_config: xen_arch_domainconfig,
}
pub type xen_domctl_getdomaininfo_t = xen_domctl_getdomaininfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_getdomaininfo_t {
    pub p: *mut xen_domctl_getdomaininfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_getdomaininfo_t {
    pub p: *const xen_domctl_getdomaininfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_getpageframeinfo3 {
    pub num: u64,
    pub array: __guest_handle_xen_pfn_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_shadow_op_stats {
    pub fault_count: u32,
    pub dirty_count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_shadow_op {
    pub op: u32,
    pub mode: u32,
    pub mb: u32,
    pub dirty_bitmap: __guest_handle_uint8,
    pub pages: u64,
    pub stats: xen_domctl_shadow_op_stats,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_max_mem {
    pub max_memkb: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vcpucontext {
    pub vcpu: u32,
    pub ctxt: __guest_handle_vcpu_guest_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_getvcpuinfo {
    pub vcpu: u32,
    pub online: u8,
    pub blocked: u8,
    pub running: u8,
    pub cpu_time: u64,
    pub cpu: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_nodeaffinity {
    pub nodemap: xenctl_bitmap,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vcpuaffinity {
    pub vcpu: u32,
    pub flags: u32,
    pub cpumap_hard: xenctl_bitmap,
    pub cpumap_soft: xenctl_bitmap,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_max_vcpus {
    pub max: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sched_credit {
    pub weight: u16,
    pub cap: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sched_credit2 {
    pub weight: u16,
    pub cap: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sched_rtds {
    pub period: u32,
    pub budget: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_schedparam_vcpu {
    pub u: xen_domctl_schedparam_vcpu__bindgen_ty_1,
    pub vcpuid: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_schedparam_vcpu__bindgen_ty_1 {
    pub credit: xen_domctl_sched_credit,
    pub credit2: xen_domctl_sched_credit2,
    pub rtds: xen_domctl_sched_rtds,
}
pub type xen_domctl_schedparam_vcpu_t = xen_domctl_schedparam_vcpu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_schedparam_vcpu_t {
    pub p: *mut xen_domctl_schedparam_vcpu_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_schedparam_vcpu_t {
    pub p: *const xen_domctl_schedparam_vcpu_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_scheduler_op {
    pub sched_id: u32,
    pub cmd: u32,
    pub u: xen_domctl_scheduler_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_scheduler_op__bindgen_ty_1 {
    pub credit: xen_domctl_sched_credit,
    pub credit2: xen_domctl_sched_credit2,
    pub rtds: xen_domctl_sched_rtds,
    pub v: xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1 {
    pub vcpus: __guest_handle_xen_domctl_schedparam_vcpu_t,
    pub nr_vcpus: u32,
    pub padding: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_setdomainhandle {
    pub handle: xen_domain_handle_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_setdebugging {
    pub enable: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_irq_permission {
    pub pirq: u32,
    pub allow_access: u8,
    pub pad: [u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_iomem_permission {
    pub first_mfn: u64,
    pub nr_mfns: u64,
    pub allow_access: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_ioport_permission {
    pub first_port: u32,
    pub nr_ports: u32,
    pub allow_access: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_hypercall_init {
    pub gmfn: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_settimeoffset {
    pub time_offset_seconds: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_hvmcontext {
    pub size: u32,
    pub buffer: __guest_handle_uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_address_size {
    pub size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sendtrigger {
    pub trigger: u32,
    pub vcpu: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_assign_device {
    pub dev: u32,
    pub flags: u32,
    pub u: xen_domctl_assign_device__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_assign_device__bindgen_ty_1 {
    pub pci: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1,
    pub dt: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1 {
    pub machine_sbdf: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2 {
    pub size: u32,
    pub path: __guest_handle_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_get_device_group {
    pub machine_sbdf: u32,
    pub max_sdevs: u32,
    pub num_sdevs: u32,
    pub sdev_array: __guest_handle_uint32,
}
pub const pt_irq_type_PT_IRQ_TYPE_PCI: pt_irq_type = 0;
pub const pt_irq_type_PT_IRQ_TYPE_ISA: pt_irq_type = 1;
pub const pt_irq_type_PT_IRQ_TYPE_MSI: pt_irq_type = 2;
pub const pt_irq_type_PT_IRQ_TYPE_MSI_TRANSLATE: pt_irq_type = 3;
pub const pt_irq_type_PT_IRQ_TYPE_SPI: pt_irq_type = 4;
pub type pt_irq_type = xen_bindings_x86_64_types::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_bind_pt_irq {
    pub machine_irq: u32,
    pub irq_type: u32,
    pub u: xen_domctl_bind_pt_irq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_bind_pt_irq__bindgen_ty_1 {
    pub isa: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1,
    pub pci: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2,
    pub msi: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3,
    pub spi: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1 {
    pub isa_irq: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2 {
    pub bus: u8,
    pub device: u8,
    pub intx: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3 {
    pub gvec: u8,
    pub gflags: u32,
    pub gtable: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4 {
    pub spi: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_memory_mapping {
    pub first_gfn: u64,
    pub first_mfn: u64,
    pub nr_mfns: u64,
    pub add_mapping: u32,
    pub padding: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_ioport_mapping {
    pub first_gport: u32,
    pub first_mport: u32,
    pub nr_ports: u32,
    pub add_mapping: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_ext_vcpucontext {
    pub vcpu: u32,
    pub size: u32,
    pub syscall32_callback_eip: u64,
    pub sysenter_callback_eip: u64,
    pub syscall32_callback_cs: u16,
    pub sysenter_callback_cs: u16,
    pub syscall32_disables_events: u8,
    pub sysenter_disables_events: u8,
    pub __bindgen_anon_1: xen_domctl_ext_vcpucontext__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_ext_vcpucontext__bindgen_ty_1 {
    pub mcg_cap: u64,
    pub vmce: hvm_vmce_vcpu,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_target {
    pub target: domid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_cpu_policy {
    pub nr_leaves: u32,
    pub nr_msrs: u32,
    pub cpuid_policy: __guest_handle_xen_cpuid_leaf_t,
    pub msr_policy: __guest_handle_xen_msr_entry_t,
    pub err_leaf: u32,
    pub err_subleaf: u32,
    pub err_msr: u32,
}
pub type xen_domctl_cpu_policy_t = xen_domctl_cpu_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_cpu_policy_t {
    pub p: *mut xen_domctl_cpu_policy_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_cpu_policy_t {
    pub p: *const xen_domctl_cpu_policy_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_subscribe {
    pub port: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_debug_op {
    pub op: u32,
    pub vcpu: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_hvmcontext_partial {
    pub type_: u32,
    pub instance: u32,
    pub bufsz: u64,
    pub buffer: __guest_handle_uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_tsc_info {
    pub tsc_mode: u32,
    pub gtsc_khz: u32,
    pub incarnation: u32,
    pub pad: u32,
    pub elapsed_nsec: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_gdbsx_memio {
    pub pgd3val: u64,
    pub gva: u64,
    pub uva: u64,
    pub len: u32,
    pub gwr: u8,
    pub remain: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_gdbsx_pauseunp_vcpu {
    pub vcpu: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_gdbsx_domstatus {
    pub paused: u8,
    pub vcpu_id: u32,
    pub vcpu_ev: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vm_event_op {
    pub op: u32,
    pub mode: u32,
    pub u: xen_domctl_vm_event_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_vm_event_op__bindgen_ty_1 {
    pub enable: xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1 {
    pub port: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_mem_sharing_op {
    pub op: u8,
    pub u: xen_domctl_mem_sharing_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_mem_sharing_op__bindgen_ty_1 {
    pub enable: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_audit_p2m {
    pub orphans: u64,
    pub m2p_bad: u64,
    pub p2m_bad: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_virq_handler {
    pub virq: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vcpuextstate {
    pub vcpu: u32,
    pub xfeature_mask: u64,
    pub size: u64,
    pub buffer: __guest_handle_uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_access_required {
    pub access_required: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_broken_page_p2m {
    pub pfn: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_cacheflush {
    pub start_pfn: xen_pfn_t,
    pub nr_pfns: xen_pfn_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vcpu_msr {
    pub index: u32,
    pub reserved: u32,
    pub value: u64,
}
pub type xen_domctl_vcpu_msr_t = xen_domctl_vcpu_msr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_vcpu_msr_t {
    pub p: *mut xen_domctl_vcpu_msr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_vcpu_msr_t {
    pub p: *const xen_domctl_vcpu_msr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vcpu_msrs {
    pub vcpu: u32,
    pub msr_count: u32,
    pub msrs: __guest_handle_xen_domctl_vcpu_msr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vnuma {
    pub nr_vnodes: u32,
    pub nr_vmemranges: u32,
    pub nr_vcpus: u32,
    pub pad: u32,
    pub vdistance: __guest_handle_uint,
    pub vcpu_to_vnode: __guest_handle_uint,
    pub vnode_to_pnode: __guest_handle_uint,
    pub vmemrange: __guest_handle_xen_vmemrange_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_psr_cmt_op {
    pub cmd: u32,
    pub data: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_monitor_op {
    pub op: u32,
    pub event: u32,
    pub u: xen_domctl_monitor_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_monitor_op__bindgen_ty_1 {
    pub mov_to_cr: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
    pub mov_to_msr: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2,
    pub guest_request: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3,
    pub debug_exception: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4,
    pub vmexit: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1 {
    pub index: u8,
    pub sync: u8,
    pub onchangeonly: u8,
    pub pad1: u8,
    pub pad2: u32,
    pub bitmask: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2 {
    pub msr: u32,
    pub onchangeonly: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3 {
    pub sync: u8,
    pub allow_userspace: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4 {
    pub sync: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5 {
    pub sync: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_psr_alloc {
    pub cmd: u32,
    pub target: u32,
    pub data: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vuart_op {
    pub cmd: u32,
    pub type_: u32,
    pub gfn: u64,
    pub console_domid: domid_t,
    pub pad: [u8; 2usize],
    pub evtchn: evtchn_port_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vmtrace_op {
    pub cmd: u32,
    pub vcpu: u32,
    pub key: u64,
    pub value: u64,
}
pub type xen_domctl_vmtrace_op_t = xen_domctl_vmtrace_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_vmtrace_op_t {
    pub p: *mut xen_domctl_vmtrace_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_vmtrace_op_t {
    pub p: *const xen_domctl_vmtrace_op_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl {
    pub cmd: u32,
    pub interface_version: u32,
    pub domain: domid_t,
    pub _pad: [u16; 3usize],
    pub u: xen_domctl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl__bindgen_ty_1 {
    pub createdomain: xen_domctl_createdomain,
    pub getdomaininfo: xen_domctl_getdomaininfo,
    pub getpageframeinfo3: xen_domctl_getpageframeinfo3,
    pub nodeaffinity: xen_domctl_nodeaffinity,
    pub vcpuaffinity: xen_domctl_vcpuaffinity,
    pub shadow_op: xen_domctl_shadow_op,
    pub max_mem: xen_domctl_max_mem,
    pub vcpucontext: xen_domctl_vcpucontext,
    pub getvcpuinfo: xen_domctl_getvcpuinfo,
    pub max_vcpus: xen_domctl_max_vcpus,
    pub scheduler_op: xen_domctl_scheduler_op,
    pub setdomainhandle: xen_domctl_setdomainhandle,
    pub setdebugging: xen_domctl_setdebugging,
    pub irq_permission: xen_domctl_irq_permission,
    pub iomem_permission: xen_domctl_iomem_permission,
    pub ioport_permission: xen_domctl_ioport_permission,
    pub hypercall_init: xen_domctl_hypercall_init,
    pub settimeoffset: xen_domctl_settimeoffset,
    pub tsc_info: xen_domctl_tsc_info,
    pub hvmcontext: xen_domctl_hvmcontext,
    pub hvmcontext_partial: xen_domctl_hvmcontext_partial,
    pub address_size: xen_domctl_address_size,
    pub sendtrigger: xen_domctl_sendtrigger,
    pub get_device_group: xen_domctl_get_device_group,
    pub assign_device: xen_domctl_assign_device,
    pub bind_pt_irq: xen_domctl_bind_pt_irq,
    pub memory_mapping: xen_domctl_memory_mapping,
    pub ioport_mapping: xen_domctl_ioport_mapping,
    pub ext_vcpucontext: xen_domctl_ext_vcpucontext,
    pub set_target: xen_domctl_set_target,
    pub subscribe: xen_domctl_subscribe,
    pub debug_op: xen_domctl_debug_op,
    pub vm_event_op: xen_domctl_vm_event_op,
    pub mem_sharing_op: xen_domctl_mem_sharing_op,
    pub cpu_policy: xen_domctl_cpu_policy,
    pub vcpuextstate: xen_domctl_vcpuextstate,
    pub vcpu_msrs: xen_domctl_vcpu_msrs,
    pub access_required: xen_domctl_set_access_required,
    pub audit_p2m: xen_domctl_audit_p2m,
    pub set_virq_handler: xen_domctl_set_virq_handler,
    pub gdbsx_guest_memio: xen_domctl_gdbsx_memio,
    pub set_broken_page_p2m: xen_domctl_set_broken_page_p2m,
    pub cacheflush: xen_domctl_cacheflush,
    pub gdbsx_pauseunp_vcpu: xen_domctl_gdbsx_pauseunp_vcpu,
    pub gdbsx_domstatus: xen_domctl_gdbsx_domstatus,
    pub vnuma: xen_domctl_vnuma,
    pub psr_cmt_op: xen_domctl_psr_cmt_op,
    pub monitor_op: xen_domctl_monitor_op,
    pub psr_alloc: xen_domctl_psr_alloc,
    pub vuart_op: xen_domctl_vuart_op,
    pub vmtrace_op: xen_domctl_vmtrace_op,
    pub pad: [u8; 128usize],
}
pub type xen_domctl_t = xen_domctl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_t {
    pub p: *mut xen_domctl_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_t {
    pub p: *const xen_domctl_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ioreq {
    pub addr: u64,
    pub data: u64,
    pub count: u32,
    pub size: u32,
    pub vp_eport: u32,
    pub _pad0: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub type_: u8,
}
impl ioreq {
    #[inline]
    pub fn state(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_state(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn data_is_ptr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_data_is_ptr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dir(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dir(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn df(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_df(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _pad1(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set__pad1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        state: u8,
        data_is_ptr: u8,
        dir: u8,
        df: u8,
        _pad1: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let state: u8 = unsafe { ::core::mem::transmute(state) };
            state as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let data_is_ptr: u8 = unsafe { ::core::mem::transmute(data_is_ptr) };
            data_is_ptr as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dir: u8 = unsafe { ::core::mem::transmute(dir) };
            dir as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let df: u8 = unsafe { ::core::mem::transmute(df) };
            df as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let _pad1: u8 = unsafe { ::core::mem::transmute(_pad1) };
            _pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ioreq_t = ioreq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_iopage {
    pub vcpu_ioreq: [ioreq; 1usize],
}
pub type shared_iopage_t = shared_iopage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buf_ioreq {
    pub type_: u8,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub data: u32,
}
impl buf_ioreq {
    #[inline]
    pub fn pad(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pad(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dir(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dir(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn size(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_size(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn addr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad: u8,
        dir: u8,
        size: u8,
        addr: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pad: u8 = unsafe { ::core::mem::transmute(pad) };
            pad as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dir: u8 = unsafe { ::core::mem::transmute(dir) };
            dir as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let size: u8 = unsafe { ::core::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit.set(4usize, 20u8, {
            let addr: u32 = unsafe { ::core::mem::transmute(addr) };
            addr as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type buf_ioreq_t = buf_ioreq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffered_iopage {
    pub read_pointer: u32,
    pub write_pointer: u32,
    pub buf_ioreq: [buf_ioreq_t; 511usize],
}
pub type buffered_iopage_t = buffered_iopage;
pub const xenbus_state_XenbusStateUnknown: xenbus_state = 0;
pub const xenbus_state_XenbusStateInitialising: xenbus_state = 1;
pub const xenbus_state_XenbusStateInitWait: xenbus_state = 2;
pub const xenbus_state_XenbusStateInitialised: xenbus_state = 3;
pub const xenbus_state_XenbusStateConnected: xenbus_state = 4;
pub const xenbus_state_XenbusStateClosing: xenbus_state = 5;
pub const xenbus_state_XenbusStateClosed: xenbus_state = 6;
pub const xenbus_state_XenbusStateReconfiguring: xenbus_state = 7;
pub const xenbus_state_XenbusStateReconfigured: xenbus_state = 8;
pub type xenbus_state = xen_bindings_x86_64_types::c_uint;
pub use self::xenbus_state as XenbusState;
pub type __u_char = xen_bindings_x86_64_types::c_uchar;
pub type __u_short = xen_bindings_x86_64_types::c_ushort;
pub type __u_int = xen_bindings_x86_64_types::c_uint;
pub type __u_long = xen_bindings_x86_64_types::c_ulong;
pub type __int8_t = xen_bindings_x86_64_types::c_schar;
pub type __uint8_t = xen_bindings_x86_64_types::c_uchar;
pub type __int16_t = xen_bindings_x86_64_types::c_short;
pub type __uint16_t = xen_bindings_x86_64_types::c_ushort;
pub type __int32_t = xen_bindings_x86_64_types::c_int;
pub type __uint32_t = xen_bindings_x86_64_types::c_uint;
pub type __int64_t = xen_bindings_x86_64_types::c_long;
pub type __uint64_t = xen_bindings_x86_64_types::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = xen_bindings_x86_64_types::c_long;
pub type __u_quad_t = xen_bindings_x86_64_types::c_ulong;
pub type __intmax_t = xen_bindings_x86_64_types::c_long;
pub type __uintmax_t = xen_bindings_x86_64_types::c_ulong;
pub type __dev_t = xen_bindings_x86_64_types::c_ulong;
pub type __uid_t = xen_bindings_x86_64_types::c_uint;
pub type __gid_t = xen_bindings_x86_64_types::c_uint;
pub type __ino_t = xen_bindings_x86_64_types::c_ulong;
pub type __ino64_t = xen_bindings_x86_64_types::c_ulong;
pub type __mode_t = xen_bindings_x86_64_types::c_uint;
pub type __nlink_t = xen_bindings_x86_64_types::c_ulong;
pub type __off_t = xen_bindings_x86_64_types::c_long;
pub type __off64_t = xen_bindings_x86_64_types::c_long;
pub type __pid_t = xen_bindings_x86_64_types::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [xen_bindings_x86_64_types::c_int; 2usize],
}
pub type __clock_t = xen_bindings_x86_64_types::c_long;
pub type __rlim_t = xen_bindings_x86_64_types::c_ulong;
pub type __rlim64_t = xen_bindings_x86_64_types::c_ulong;
pub type __id_t = xen_bindings_x86_64_types::c_uint;
pub type __time_t = xen_bindings_x86_64_types::c_long;
pub type __useconds_t = xen_bindings_x86_64_types::c_uint;
pub type __suseconds_t = xen_bindings_x86_64_types::c_long;
pub type __daddr_t = xen_bindings_x86_64_types::c_int;
pub type __key_t = xen_bindings_x86_64_types::c_int;
pub type __clockid_t = xen_bindings_x86_64_types::c_int;
pub type __timer_t = *mut xen_bindings_x86_64_types::c_void;
pub type __blksize_t = xen_bindings_x86_64_types::c_long;
pub type __blkcnt_t = xen_bindings_x86_64_types::c_long;
pub type __blkcnt64_t = xen_bindings_x86_64_types::c_long;
pub type __fsblkcnt_t = xen_bindings_x86_64_types::c_ulong;
pub type __fsblkcnt64_t = xen_bindings_x86_64_types::c_ulong;
pub type __fsfilcnt_t = xen_bindings_x86_64_types::c_ulong;
pub type __fsfilcnt64_t = xen_bindings_x86_64_types::c_ulong;
pub type __fsword_t = xen_bindings_x86_64_types::c_long;
pub type __ssize_t = xen_bindings_x86_64_types::c_long;
pub type __syscall_slong_t = xen_bindings_x86_64_types::c_long;
pub type __syscall_ulong_t = xen_bindings_x86_64_types::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut xen_bindings_x86_64_types::c_char;
pub type __intptr_t = xen_bindings_x86_64_types::c_long;
pub type __socklen_t = xen_bindings_x86_64_types::c_uint;
pub type __sig_atomic_t = xen_bindings_x86_64_types::c_int;
extern "C" {
    pub static mut __environ: *mut *mut xen_bindings_x86_64_types::c_char;
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = xen_bindings_x86_64_types::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub type _bindgen_ty_2 = xen_bindings_x86_64_types::c_uint;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = xen_bindings_x86_64_types::c_uint;
pub type wchar_t = xen_bindings_x86_64_types::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: xen_bindings_x86_64_types::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = xen_bindings_x86_64_types::c_schar;
pub type int_fast16_t = xen_bindings_x86_64_types::c_long;
pub type int_fast32_t = xen_bindings_x86_64_types::c_long;
pub type int_fast64_t = xen_bindings_x86_64_types::c_long;
pub type uint_fast8_t = xen_bindings_x86_64_types::c_uchar;
pub type uint_fast16_t = xen_bindings_x86_64_types::c_ulong;
pub type uint_fast32_t = xen_bindings_x86_64_types::c_ulong;
pub type uint_fast64_t = xen_bindings_x86_64_types::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: xen_bindings_x86_64_types::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: xen_bindings_x86_64_types::c_uint,
    pub __wchb: [xen_bindings_x86_64_types::c_char; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = xen_bindings_x86_64_types::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: xen_bindings_x86_64_types::c_int,
    pub _IO_read_ptr: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_read_end: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_read_base: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_write_base: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_write_ptr: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_write_end: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_buf_base: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_buf_end: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_save_base: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_backup_base: *mut xen_bindings_x86_64_types::c_char,
    pub _IO_save_end: *mut xen_bindings_x86_64_types::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: xen_bindings_x86_64_types::c_int,
    pub _flags2: xen_bindings_x86_64_types::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: xen_bindings_x86_64_types::c_ushort,
    pub _vtable_offset: xen_bindings_x86_64_types::c_schar,
    pub _shortbuf: [xen_bindings_x86_64_types::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut xen_bindings_x86_64_types::c_void,
    pub __pad5: size_t,
    pub _mode: xen_bindings_x86_64_types::c_int,
    pub _unused2: [xen_bindings_x86_64_types::c_char; 20usize],
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_readconsole {
    pub clear: u8,
    pub incremental: u8,
    pub pad0: u8,
    pub pad1: u8,
    pub index: u32,
    pub buffer: __guest_handle_char,
    pub count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_tbuf_op {
    pub cmd: u32,
    pub cpu_mask: xenctl_bitmap,
    pub evt_mask: u32,
    pub buffer_mfn: u64,
    pub size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_physinfo {
    pub threads_per_core: u32,
    pub cores_per_socket: u32,
    pub nr_cpus: u32,
    pub max_cpu_id: u32,
    pub nr_nodes: u32,
    pub max_node_id: u32,
    pub cpu_khz: u32,
    pub capabilities: u32,
    pub arch_capabilities: u32,
    pub pad: u32,
    pub total_pages: u64,
    pub free_pages: u64,
    pub scrub_pages: u64,
    pub outstanding_pages: u64,
    pub max_mfn: u64,
    pub hw_cap: [u32; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_sched_id {
    pub sched_id: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_perfc_desc {
    pub name: [xen_bindings_x86_64_types::c_char; 80usize],
    pub nr_vals: u32,
}
pub type xen_sysctl_perfc_desc_t = xen_sysctl_perfc_desc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_perfc_desc_t {
    pub p: *mut xen_sysctl_perfc_desc_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_perfc_desc_t {
    pub p: *const xen_sysctl_perfc_desc_t,
}
pub type xen_sysctl_perfc_val_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_perfc_val_t {
    pub p: *mut xen_sysctl_perfc_val_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_perfc_val_t {
    pub p: *const xen_sysctl_perfc_val_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_perfc_op {
    pub cmd: u32,
    pub nr_counters: u32,
    pub nr_vals: u32,
    pub desc: __guest_handle_xen_sysctl_perfc_desc_t,
    pub val: __guest_handle_xen_sysctl_perfc_val_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_getdomaininfolist {
    pub first_domain: domid_t,
    pub max_domains: u32,
    pub buffer: __guest_handle_xen_domctl_getdomaininfo_t,
    pub num_domains: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_debug_keys {
    pub keys: __guest_handle_const_char,
    pub nr_keys: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpuinfo {
    pub idletime: u64,
}
pub type xen_sysctl_cpuinfo_t = xen_sysctl_cpuinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_cpuinfo_t {
    pub p: *mut xen_sysctl_cpuinfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_cpuinfo_t {
    pub p: *const xen_sysctl_cpuinfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_getcpuinfo {
    pub max_cpus: u32,
    pub info: __guest_handle_xen_sysctl_cpuinfo_t,
    pub nr_cpus: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_availheap {
    pub min_bitwidth: u32,
    pub max_bitwidth: u32,
    pub node: i32,
    pub avail_bytes: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_px_val {
    pub freq: u64,
    pub residency: u64,
    pub count: u64,
}
pub type pm_px_val_t = pm_px_val;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_pm_px_val_t {
    pub p: *mut pm_px_val_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_pm_px_val_t {
    pub p: *const pm_px_val_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_px_stat {
    pub total: u8,
    pub usable: u8,
    pub last: u8,
    pub cur: u8,
    pub trans_pt: __guest_handle_uint64,
    pub pt: __guest_handle_pm_px_val_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_cx_stat {
    pub nr: u32,
    pub last: u32,
    pub idle_time: u64,
    pub triggers: __guest_handle_uint64,
    pub residencies: __guest_handle_uint64,
    pub nr_pc: u32,
    pub nr_cc: u32,
    pub pc: __guest_handle_uint64,
    pub cc: __guest_handle_uint64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_get_pmstat {
    pub type_: u32,
    pub cpuid: u32,
    pub u: xen_sysctl_get_pmstat__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_get_pmstat__bindgen_ty_1 {
    pub getpx: pm_px_stat,
    pub getcx: pm_cx_stat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_hotplug {
    pub cpu: u32,
    pub op: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_userspace {
    pub scaling_setspeed: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_ondemand {
    pub sampling_rate_max: u32,
    pub sampling_rate_min: u32,
    pub sampling_rate: u32,
    pub up_threshold: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_get_cpufreq_para {
    pub cpu_num: u32,
    pub freq_num: u32,
    pub gov_num: u32,
    pub affected_cpus: __guest_handle_uint32,
    pub scaling_available_frequencies: __guest_handle_uint32,
    pub scaling_available_governors: __guest_handle_char,
    pub scaling_driver: [xen_bindings_x86_64_types::c_char; 16usize],
    pub cpuinfo_cur_freq: u32,
    pub cpuinfo_max_freq: u32,
    pub cpuinfo_min_freq: u32,
    pub scaling_cur_freq: u32,
    pub scaling_governor: [xen_bindings_x86_64_types::c_char; 16usize],
    pub scaling_max_freq: u32,
    pub scaling_min_freq: u32,
    pub u: xen_get_cpufreq_para__bindgen_ty_1,
    pub turbo_enabled: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_get_cpufreq_para__bindgen_ty_1 {
    pub userspace: xen_userspace,
    pub ondemand: xen_ondemand,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_set_cpufreq_gov {
    pub scaling_governor: [xen_bindings_x86_64_types::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_set_cpufreq_para {
    pub ctrl_type: u32,
    pub ctrl_value: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_pm_op {
    pub cmd: u32,
    pub cpuid: u32,
    pub u: xen_sysctl_pm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_pm_op__bindgen_ty_1 {
    pub get_para: xen_get_cpufreq_para,
    pub set_gov: xen_set_cpufreq_gov,
    pub set_para: xen_set_cpufreq_para,
    pub get_avgfreq: u64,
    pub set_sched_opt_smt: u32,
    pub get_max_cstate: u32,
    pub set_max_cstate: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_page_offline_op {
    pub cmd: u32,
    pub start: u32,
    pub end: u32,
    pub status: __guest_handle_uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_lockprof_data {
    pub name: [xen_bindings_x86_64_types::c_char; 40usize],
    pub type_: i32,
    pub idx: i32,
    pub lock_cnt: u64,
    pub block_cnt: u64,
    pub lock_time: u64,
    pub block_time: u64,
}
pub type xen_sysctl_lockprof_data_t = xen_sysctl_lockprof_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_lockprof_data_t {
    pub p: *mut xen_sysctl_lockprof_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_lockprof_data_t {
    pub p: *const xen_sysctl_lockprof_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_lockprof_op {
    pub cmd: u32,
    pub max_elem: u32,
    pub nr_elem: u32,
    pub time: u64,
    pub data: __guest_handle_xen_sysctl_lockprof_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cputopo {
    pub core: u32,
    pub socket: u32,
    pub node: u32,
}
pub type xen_sysctl_cputopo_t = xen_sysctl_cputopo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_cputopo_t {
    pub p: *mut xen_sysctl_cputopo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_cputopo_t {
    pub p: *const xen_sysctl_cputopo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cputopoinfo {
    pub num_cpus: u32,
    pub cputopo: __guest_handle_xen_sysctl_cputopo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_meminfo {
    pub memsize: u64,
    pub memfree: u64,
}
pub type xen_sysctl_meminfo_t = xen_sysctl_meminfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_meminfo_t {
    pub p: *mut xen_sysctl_meminfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_meminfo_t {
    pub p: *const xen_sysctl_meminfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_numainfo {
    pub num_nodes: u32,
    pub meminfo: __guest_handle_xen_sysctl_meminfo_t,
    pub distance: __guest_handle_uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpupool_op {
    pub op: u32,
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub domid: u32,
    pub cpu: u32,
    pub n_dom: u32,
    pub cpumap: xenctl_bitmap,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_arinc653_schedule {
    pub major_frame: u64,
    pub num_sched_entries: u8,
    pub sched_entries: [xen_sysctl_arinc653_schedule__bindgen_ty_1; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_arinc653_schedule__bindgen_ty_1 {
    pub dom_handle: xen_domain_handle_t,
    pub vcpu_id: u32,
    pub runtime: u64,
}
pub type xen_sysctl_arinc653_schedule_t = xen_sysctl_arinc653_schedule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_arinc653_schedule_t {
    pub p: *mut xen_sysctl_arinc653_schedule_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_arinc653_schedule_t {
    pub p: *const xen_sysctl_arinc653_schedule_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_credit_schedule {
    pub tslice_ms: u32,
    pub ratelimit_us: u32,
    pub vcpu_migr_delay_us: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_credit2_schedule {
    pub ratelimit_us: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_scheduler_op {
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub cmd: u32,
    pub u: xen_sysctl_scheduler_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_scheduler_op__bindgen_ty_1 {
    pub sched_arinc653: xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653,
    pub sched_credit: xen_sysctl_credit_schedule,
    pub sched_credit2: xen_sysctl_credit2_schedule,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653 {
    pub schedule: __guest_handle_xen_sysctl_arinc653_schedule_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_coverage_op {
    pub cmd: u32,
    pub size: u32,
    pub buffer: __guest_handle_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_psr_cmt_op {
    pub cmd: u32,
    pub flags: u32,
    pub u: xen_sysctl_psr_cmt_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_psr_cmt_op__bindgen_ty_1 {
    pub data: u64,
    pub l3_cache: xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1 {
    pub cpu: u32,
    pub rsvd: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_pcitopoinfo {
    pub num_devs: u32,
    pub devs: __guest_handle_physdev_pci_device_t,
    pub nodes: __guest_handle_uint32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_psr_alloc {
    pub cmd: u32,
    pub target: u32,
    pub u: xen_sysctl_psr_alloc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_psr_alloc__bindgen_ty_1 {
    pub cat_info: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1,
    pub mba_info: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1 {
    pub cbm_len: u32,
    pub cos_max: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2 {
    pub thrtl_max: u32,
    pub cos_max: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_levelling_caps {
    pub caps: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_featureset {
    pub index: u32,
    pub nr_features: u32,
    pub features: __guest_handle_uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_livepatch_name {
    pub name: __guest_handle_char,
    pub size: u16,
    pub pad: [u16; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_livepatch_upload {
    pub name: xen_livepatch_name,
    pub size: u64,
    pub payload: __guest_handle_uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_livepatch_status {
    pub state: u32,
    pub rc: i32,
}
pub type xen_livepatch_status_t = xen_livepatch_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_livepatch_status_t {
    pub p: *mut xen_livepatch_status_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_livepatch_status_t {
    pub p: *const xen_livepatch_status_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_livepatch_get {
    pub name: xen_livepatch_name,
    pub status: xen_livepatch_status,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_livepatch_list {
    pub version: u32,
    pub idx: u32,
    pub nr: u32,
    pub pad: u32,
    pub name_total_size: u32,
    pub metadata_total_size: u32,
    pub status: __guest_handle_xen_livepatch_status_t,
    pub name: __guest_handle_char,
    pub len: __guest_handle_uint32,
    pub metadata: __guest_handle_char,
    pub metadata_len: __guest_handle_uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_livepatch_action {
    pub name: xen_livepatch_name,
    pub cmd: u32,
    pub timeout: u32,
    pub flags: u32,
    pub pad: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_op {
    pub cmd: u32,
    pub pad: u32,
    pub u: xen_sysctl_livepatch_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_livepatch_op__bindgen_ty_1 {
    pub upload: xen_sysctl_livepatch_upload,
    pub list: xen_sysctl_livepatch_list,
    pub get: xen_sysctl_livepatch_get,
    pub action: xen_sysctl_livepatch_action,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_policy {
    pub index: u32,
    pub nr_leaves: u32,
    pub nr_msrs: u32,
    pub _rsvd: u32,
    pub cpuid_policy: __guest_handle_xen_cpuid_leaf_t,
    pub msr_policy: __guest_handle_xen_msr_entry_t,
}
pub type xen_sysctl_cpu_policy_t = xen_sysctl_cpu_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_cpu_policy_t {
    pub p: *mut xen_sysctl_cpu_policy_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_cpu_policy_t {
    pub p: *const xen_sysctl_cpu_policy_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_sysctl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl__bindgen_ty_1 {
    pub readconsole: xen_sysctl_readconsole,
    pub tbuf_op: xen_sysctl_tbuf_op,
    pub physinfo: xen_sysctl_physinfo,
    pub cputopoinfo: xen_sysctl_cputopoinfo,
    pub pcitopoinfo: xen_sysctl_pcitopoinfo,
    pub numainfo: xen_sysctl_numainfo,
    pub sched_id: xen_sysctl_sched_id,
    pub perfc_op: xen_sysctl_perfc_op,
    pub getdomaininfolist: xen_sysctl_getdomaininfolist,
    pub debug_keys: xen_sysctl_debug_keys,
    pub getcpuinfo: xen_sysctl_getcpuinfo,
    pub availheap: xen_sysctl_availheap,
    pub get_pmstat: xen_sysctl_get_pmstat,
    pub cpu_hotplug: xen_sysctl_cpu_hotplug,
    pub pm_op: xen_sysctl_pm_op,
    pub page_offline: xen_sysctl_page_offline_op,
    pub lockprof_op: xen_sysctl_lockprof_op,
    pub cpupool_op: xen_sysctl_cpupool_op,
    pub scheduler_op: xen_sysctl_scheduler_op,
    pub coverage_op: xen_sysctl_coverage_op,
    pub psr_cmt_op: xen_sysctl_psr_cmt_op,
    pub psr_alloc: xen_sysctl_psr_alloc,
    pub cpu_levelling_caps: xen_sysctl_cpu_levelling_caps,
    pub cpu_featureset: xen_sysctl_cpu_featureset,
    pub livepatch: xen_sysctl_livepatch_op,
    pub cpu_policy: xen_sysctl_cpu_policy,
    pub pad: [u8; 128usize],
}
pub type xen_sysctl_t = xen_sysctl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_t {
    pub p: *mut xen_sysctl_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_t {
    pub p: *const xen_sysctl_t,
}
pub type xen_extraversion_t = [xen_bindings_x86_64_types::c_char; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_compile_info {
    pub compiler: [xen_bindings_x86_64_types::c_char; 64usize],
    pub compile_by: [xen_bindings_x86_64_types::c_char; 16usize],
    pub compile_domain: [xen_bindings_x86_64_types::c_char; 32usize],
    pub compile_date: [xen_bindings_x86_64_types::c_char; 32usize],
}
pub type xen_compile_info_t = xen_compile_info;
pub type xen_capabilities_info_t = [xen_bindings_x86_64_types::c_char; 1024usize];
pub type xen_changeset_info_t = [xen_bindings_x86_64_types::c_char; 64usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_platform_parameters {
    pub virt_start: xen_ulong_t,
}
pub type xen_platform_parameters_t = xen_platform_parameters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_feature_info {
    pub submap_idx: xen_bindings_x86_64_types::c_uint,
    pub submap: u32,
}
pub type xen_feature_info_t = xen_feature_info;
pub type xen_commandline_t = [xen_bindings_x86_64_types::c_char; 1024usize];
#[repr(C)]
#[derive(Debug)]
pub struct xen_build_id {
    pub len: u32,
    pub buf: __IncompleteArrayField<xen_bindings_x86_64_types::c_uchar>,
}
pub type xen_build_id_t = xen_build_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_shutdown {
    pub reason: xen_bindings_x86_64_types::c_uint,
}
pub type sched_shutdown_t = sched_shutdown;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_shutdown_t {
    pub p: *mut sched_shutdown_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_shutdown_t {
    pub p: *const sched_shutdown_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_poll {
    pub ports: __guest_handle_evtchn_port_t,
    pub nr_ports: xen_bindings_x86_64_types::c_uint,
    pub timeout: u64,
}
pub type sched_poll_t = sched_poll;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_poll_t {
    pub p: *mut sched_poll_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_poll_t {
    pub p: *const sched_poll_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_remote_shutdown {
    pub domain_id: domid_t,
    pub reason: xen_bindings_x86_64_types::c_uint,
}
pub type sched_remote_shutdown_t = sched_remote_shutdown;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_remote_shutdown_t {
    pub p: *mut sched_remote_shutdown_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_remote_shutdown_t {
    pub p: *const sched_remote_shutdown_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_watchdog {
    pub id: u32,
    pub timeout: u32,
}
pub type sched_watchdog_t = sched_watchdog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_watchdog_t {
    pub p: *mut sched_watchdog_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_watchdog_t {
    pub p: *const sched_watchdog_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_pin_override {
    pub pcpu: i32,
}
pub type sched_pin_override_t = sched_pin_override;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_pin_override_t {
    pub p: *mut sched_pin_override_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_pin_override_t {
    pub p: *const sched_pin_override_t,
}
pub type ioservid_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_create_ioreq_server {
    pub handle_bufioreq: u8,
    pub pad: [u8; 3usize],
    pub id: ioservid_t,
}
pub type xen_dm_op_create_ioreq_server_t = xen_dm_op_create_ioreq_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_get_ioreq_server_info {
    pub id: ioservid_t,
    pub flags: u16,
    pub bufioreq_port: evtchn_port_t,
    pub ioreq_gfn: u64,
    pub bufioreq_gfn: u64,
}
pub type xen_dm_op_get_ioreq_server_info_t = xen_dm_op_get_ioreq_server_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_ioreq_server_range {
    pub id: ioservid_t,
    pub pad: u16,
    pub type_: u32,
    pub start: u64,
    pub end: u64,
}
pub type xen_dm_op_ioreq_server_range_t = xen_dm_op_ioreq_server_range;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_ioreq_server_state {
    pub id: ioservid_t,
    pub enabled: u8,
    pub pad: u8,
}
pub type xen_dm_op_set_ioreq_server_state_t = xen_dm_op_set_ioreq_server_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_destroy_ioreq_server {
    pub id: ioservid_t,
    pub pad: u16,
}
pub type xen_dm_op_destroy_ioreq_server_t = xen_dm_op_destroy_ioreq_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_track_dirty_vram {
    pub nr: u32,
    pub pad: u32,
    pub first_pfn: u64,
}
pub type xen_dm_op_track_dirty_vram_t = xen_dm_op_track_dirty_vram;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_pci_intx_level {
    pub domain: u16,
    pub bus: u8,
    pub device: u8,
    pub intx: u8,
    pub level: u8,
}
pub type xen_dm_op_set_pci_intx_level_t = xen_dm_op_set_pci_intx_level;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_isa_irq_level {
    pub isa_irq: u8,
    pub level: u8,
}
pub type xen_dm_op_set_isa_irq_level_t = xen_dm_op_set_isa_irq_level;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_pci_link_route {
    pub link: u8,
    pub isa_irq: u8,
}
pub type xen_dm_op_set_pci_link_route_t = xen_dm_op_set_pci_link_route;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_modified_memory {
    pub nr_extents: u32,
    pub opaque: u32,
}
pub type xen_dm_op_modified_memory_t = xen_dm_op_modified_memory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_modified_memory_extent {
    pub nr: u32,
    pub pad: u32,
    pub first_pfn: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_mem_type {
    pub nr: u32,
    pub mem_type: u16,
    pub pad: u16,
    pub first_pfn: u64,
}
pub type xen_dm_op_set_mem_type_t = xen_dm_op_set_mem_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_inject_event {
    pub vcpuid: u32,
    pub vector: u8,
    pub type_: u8,
    pub insn_len: u8,
    pub pad0: u8,
    pub error_code: u32,
    pub pad1: u32,
    pub cr2: u64,
}
pub type xen_dm_op_inject_event_t = xen_dm_op_inject_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_inject_msi {
    pub data: u32,
    pub pad: u32,
    pub addr: u64,
}
pub type xen_dm_op_inject_msi_t = xen_dm_op_inject_msi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_map_mem_type_to_ioreq_server {
    pub id: ioservid_t,
    pub type_: u16,
    pub flags: u32,
    pub opaque: u64,
}
pub type xen_dm_op_map_mem_type_to_ioreq_server_t = xen_dm_op_map_mem_type_to_ioreq_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_remote_shutdown {
    pub reason: u32,
}
pub type xen_dm_op_remote_shutdown_t = xen_dm_op_remote_shutdown;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_relocate_memory {
    pub size: u32,
    pub pad: u32,
    pub src_gfn: u64,
    pub dst_gfn: u64,
}
pub type xen_dm_op_relocate_memory_t = xen_dm_op_relocate_memory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_pin_memory_cacheattr {
    pub start: u64,
    pub end: u64,
    pub type_: u32,
    pub pad: u32,
}
pub type xen_dm_op_pin_memory_cacheattr_t = xen_dm_op_pin_memory_cacheattr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_irq_level {
    pub irq: u32,
    pub level: u8,
    pub pad: [u8; 3usize],
}
pub type xen_dm_op_set_irq_level_t = xen_dm_op_set_irq_level;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_nr_vcpus {
    pub vcpus: u32,
}
pub type xen_dm_op_nr_vcpus_t = xen_dm_op_nr_vcpus;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_dm_op {
    pub op: u32,
    pub pad: u32,
    pub u: xen_dm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_dm_op__bindgen_ty_1 {
    pub create_ioreq_server: xen_dm_op_create_ioreq_server_t,
    pub get_ioreq_server_info: xen_dm_op_get_ioreq_server_info_t,
    pub map_io_range_to_ioreq_server: xen_dm_op_ioreq_server_range_t,
    pub unmap_io_range_from_ioreq_server: xen_dm_op_ioreq_server_range_t,
    pub set_ioreq_server_state: xen_dm_op_set_ioreq_server_state_t,
    pub destroy_ioreq_server: xen_dm_op_destroy_ioreq_server_t,
    pub track_dirty_vram: xen_dm_op_track_dirty_vram_t,
    pub set_pci_intx_level: xen_dm_op_set_pci_intx_level_t,
    pub set_isa_irq_level: xen_dm_op_set_isa_irq_level_t,
    pub set_irq_level: xen_dm_op_set_irq_level_t,
    pub set_pci_link_route: xen_dm_op_set_pci_link_route_t,
    pub modified_memory: xen_dm_op_modified_memory_t,
    pub set_mem_type: xen_dm_op_set_mem_type_t,
    pub inject_event: xen_dm_op_inject_event_t,
    pub inject_msi: xen_dm_op_inject_msi_t,
    pub map_mem_type_to_ioreq_server: xen_dm_op_map_mem_type_to_ioreq_server_t,
    pub remote_shutdown: xen_dm_op_remote_shutdown_t,
    pub relocate_memory: xen_dm_op_relocate_memory_t,
    pub pin_memory_cacheattr: xen_dm_op_pin_memory_cacheattr_t,
    pub nr_vcpus: xen_dm_op_nr_vcpus_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_buf {
    pub h: __guest_handle_void,
    pub size: xen_ulong_t,
}
pub type xen_dm_op_buf_t = xen_dm_op_buf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_dm_op_buf_t {
    pub p: *mut xen_dm_op_buf_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_dm_op_buf_t {
    pub p: *const xen_dm_op_buf_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_rec {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub u: t_rec__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union t_rec__bindgen_ty_1 {
    pub cycles: t_rec__bindgen_ty_1__bindgen_ty_1,
    pub nocycles: t_rec__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_rec__bindgen_ty_1__bindgen_ty_1 {
    pub cycles_lo: u32,
    pub cycles_hi: u32,
    pub extra_u32: [u32; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_rec__bindgen_ty_1__bindgen_ty_2 {
    pub extra_u32: [u32; 7usize],
}
impl t_rec {
    #[inline]
    pub fn event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn extra_u32(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_extra_u32(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn cycles_included(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cycles_included(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        event: u32,
        extra_u32: u32,
        cycles_included: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let event: u32 = unsafe { ::core::mem::transmute(event) };
            event as u64
        });
        __bindgen_bitfield_unit.set(28usize, 3u8, {
            let extra_u32: u32 = unsafe { ::core::mem::transmute(extra_u32) };
            extra_u32 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let cycles_included: u32 = unsafe { ::core::mem::transmute(cycles_included) };
            cycles_included as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_buf {
    pub cons: u32,
    pub prod: u32,
}
#[repr(C)]
#[derive(Debug)]
pub struct t_info {
    pub tbuf_size: u16,
    pub mfn_offset: __IncompleteArrayField<u16>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_param {
    pub domid: domid_t,
    pub pad: u16,
    pub index: u32,
    pub value: u64,
}
pub type xen_hvm_param_t = xen_hvm_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_param_t {
    pub p: *mut xen_hvm_param_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_param_t {
    pub p: *const xen_hvm_param_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_suppress_ve {
    pub view: u16,
    pub suppress_ve: u8,
    pub pad1: u8,
    pub pad2: u32,
    pub gfn: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_suppress_ve_multi {
    pub view: u16,
    pub suppress_ve: u8,
    pub pad1: u8,
    pub first_error: i32,
    pub first_gfn: u64,
    pub last_gfn: u64,
    pub first_error_gfn: u64,
}
pub const hvmmem_type_t_HVMMEM_ram_rw: hvmmem_type_t = 0;
pub const hvmmem_type_t_HVMMEM_ram_ro: hvmmem_type_t = 1;
pub const hvmmem_type_t_HVMMEM_mmio_dm: hvmmem_type_t = 2;
pub const hvmmem_type_t_HVMMEM_unused: hvmmem_type_t = 3;
pub const hvmmem_type_t_HVMMEM_ioreq_server: hvmmem_type_t = 4;
pub type hvmmem_type_t = xen_bindings_x86_64_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_pagetable_dying {
    pub domid: domid_t,
    pub pad: [u16; 3usize],
    pub gpa: u64,
}
pub type xen_hvm_pagetable_dying_t = xen_hvm_pagetable_dying;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_pagetable_dying_t {
    pub p: *mut xen_hvm_pagetable_dying_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_pagetable_dying_t {
    pub p: *const xen_hvm_pagetable_dying_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_get_time {
    pub now: u64,
}
pub type xen_hvm_get_time_t = xen_hvm_get_time;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_get_time_t {
    pub p: *mut xen_hvm_get_time_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_get_time_t {
    pub p: *const xen_hvm_get_time_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_xentrace {
    pub event: u16,
    pub extra_bytes: u16,
    pub extra: [u8; 28usize],
}
pub type xen_hvm_xentrace_t = xen_hvm_xentrace;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_xentrace_t {
    pub p: *mut xen_hvm_xentrace_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_xentrace_t {
    pub p: *const xen_hvm_xentrace_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_get_mem_type {
    pub domid: domid_t,
    pub mem_type: u16,
    pub pad: [u16; 2usize],
    pub pfn: u64,
}
pub type xen_hvm_get_mem_type_t = xen_hvm_get_mem_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_get_mem_type_t {
    pub p: *mut xen_hvm_get_mem_type_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_get_mem_type_t {
    pub p: *const xen_hvm_get_mem_type_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_evtchn_upcall_vector {
    pub vcpu: u32,
    pub vector: u8,
}
pub type xen_hvm_evtchn_upcall_vector_t = xen_hvm_evtchn_upcall_vector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_evtchn_upcall_vector_t {
    pub p: *mut xen_hvm_evtchn_upcall_vector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_evtchn_upcall_vector_t {
    pub p: *const xen_hvm_evtchn_upcall_vector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_domain_state {
    pub state: u8,
}
pub type xen_hvm_altp2m_domain_state_t = xen_hvm_altp2m_domain_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_domain_state_t {
    pub p: *mut xen_hvm_altp2m_domain_state_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_domain_state_t {
    pub p: *const xen_hvm_altp2m_domain_state_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_vcpu_enable_notify {
    pub vcpu_id: u32,
    pub pad: u32,
    pub gfn: u64,
}
pub type xen_hvm_altp2m_vcpu_enable_notify_t = xen_hvm_altp2m_vcpu_enable_notify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_enable_notify_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_enable_notify_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_vcpu_disable_notify {
    pub vcpu_id: u32,
}
pub type xen_hvm_altp2m_vcpu_disable_notify_t = xen_hvm_altp2m_vcpu_disable_notify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_disable_notify_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_disable_notify_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_view {
    pub view: u16,
    pub hvmmem_default_access: u16,
}
pub type xen_hvm_altp2m_view_t = xen_hvm_altp2m_view;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_view_t {
    pub p: *mut xen_hvm_altp2m_view_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_view_t {
    pub p: *const xen_hvm_altp2m_view_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_mem_access {
    pub view: u16,
    pub access: u16,
    pub pad: u32,
    pub gfn: u64,
}
pub type xen_hvm_altp2m_mem_access_t = xen_hvm_altp2m_mem_access;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_mem_access_t {
    pub p: *mut xen_hvm_altp2m_mem_access_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_mem_access_t {
    pub p: *const xen_hvm_altp2m_mem_access_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_set_mem_access_multi {
    pub view: u16,
    pub pad: u16,
    pub nr: u32,
    pub opaque: u64,
    pub pfn_list: __guest_handle_const_uint64,
    pub access_list: __guest_handle_const_uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_change_gfn {
    pub view: u16,
    pub pad1: u16,
    pub pad2: u32,
    pub old_gfn: u64,
    pub new_gfn: u64,
}
pub type xen_hvm_altp2m_change_gfn_t = xen_hvm_altp2m_change_gfn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_change_gfn_t {
    pub p: *mut xen_hvm_altp2m_change_gfn_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_change_gfn_t {
    pub p: *const xen_hvm_altp2m_change_gfn_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_get_vcpu_p2m_idx {
    pub vcpu_id: u32,
    pub altp2m_idx: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_set_visibility {
    pub altp2m_idx: u16,
    pub visible: u8,
    pub pad: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_hvm_altp2m_op {
    pub version: u32,
    pub cmd: u32,
    pub domain: domid_t,
    pub pad1: u16,
    pub pad2: u32,
    pub u: xen_hvm_altp2m_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_hvm_altp2m_op__bindgen_ty_1 {
    pub domain_state: xen_hvm_altp2m_domain_state,
    pub enable_notify: xen_hvm_altp2m_vcpu_enable_notify,
    pub view: xen_hvm_altp2m_view,
    pub mem_access: xen_hvm_altp2m_mem_access,
    pub change_gfn: xen_hvm_altp2m_change_gfn,
    pub set_mem_access_multi: xen_hvm_altp2m_set_mem_access_multi,
    pub suppress_ve: xen_hvm_altp2m_suppress_ve,
    pub suppress_ve_multi: xen_hvm_altp2m_suppress_ve_multi,
    pub disable_notify: xen_hvm_altp2m_vcpu_disable_notify,
    pub get_vcpu_p2m_idx: xen_hvm_altp2m_get_vcpu_p2m_idx,
    pub set_visibility: xen_hvm_altp2m_set_visibility,
    pub pad: [u8; 64usize],
}
pub type xen_hvm_altp2m_op_t = xen_hvm_altp2m_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_op_t {
    pub p: *mut xen_hvm_altp2m_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_op_t {
    pub p: *const xen_hvm_altp2m_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_load {
    pub buffer: __guest_handle_char,
    pub size: u32,
}
pub type xen_flask_load_t = xen_flask_load;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_setenforce {
    pub enforcing: u32,
}
pub type xen_flask_setenforce_t = xen_flask_setenforce;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_sid_context {
    pub sid: u32,
    pub size: u32,
    pub context: __guest_handle_char,
}
pub type xen_flask_sid_context_t = xen_flask_sid_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_access {
    pub ssid: u32,
    pub tsid: u32,
    pub tclass: u32,
    pub req: u32,
    pub allowed: u32,
    pub audit_allow: u32,
    pub audit_deny: u32,
    pub seqno: u32,
}
pub type xen_flask_access_t = xen_flask_access;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_transition {
    pub ssid: u32,
    pub tsid: u32,
    pub tclass: u32,
    pub newsid: u32,
}
pub type xen_flask_transition_t = xen_flask_transition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_boolean {
    pub bool_id: u32,
    pub enforcing: u8,
    pub pending: u8,
    pub new_value: u8,
    pub commit: u8,
    pub size: u32,
    pub name: __guest_handle_char,
}
pub type xen_flask_boolean_t = xen_flask_boolean;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_setavc_threshold {
    pub threshold: u32,
}
pub type xen_flask_setavc_threshold_t = xen_flask_setavc_threshold;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_hash_stats {
    pub entries: u32,
    pub buckets_used: u32,
    pub buckets_total: u32,
    pub max_chain_len: u32,
}
pub type xen_flask_hash_stats_t = xen_flask_hash_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_cache_stats {
    pub cpu: u32,
    pub lookups: u32,
    pub hits: u32,
    pub misses: u32,
    pub allocations: u32,
    pub reclaims: u32,
    pub frees: u32,
}
pub type xen_flask_cache_stats_t = xen_flask_cache_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_ocontext {
    pub ocon: u32,
    pub sid: u32,
    pub low: u64,
    pub high: u64,
}
pub type xen_flask_ocontext_t = xen_flask_ocontext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_peersid {
    pub evtchn: evtchn_port_t,
    pub sid: u32,
}
pub type xen_flask_peersid_t = xen_flask_peersid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_relabel {
    pub domid: u32,
    pub sid: u32,
}
pub type xen_flask_relabel_t = xen_flask_relabel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_devicetree_label {
    pub sid: u32,
    pub length: u32,
    pub path: __guest_handle_char,
}
pub type xen_flask_devicetree_label_t = xen_flask_devicetree_label;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_op {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_flask_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_flask_op__bindgen_ty_1 {
    pub load: xen_flask_load_t,
    pub enforce: xen_flask_setenforce_t,
    pub sid_context: xen_flask_sid_context_t,
    pub access: xen_flask_access_t,
    pub transition: xen_flask_transition_t,
    pub boolean: xen_flask_boolean_t,
    pub setavc_threshold: xen_flask_setavc_threshold_t,
    pub hash_stats: xen_flask_hash_stats_t,
    pub cache_stats: xen_flask_cache_stats_t,
    pub ocontext: xen_flask_ocontext_t,
    pub peersid: xen_flask_peersid_t,
    pub relabel: xen_flask_relabel_t,
    pub devicetree_label: xen_flask_devicetree_label_t,
}
pub type xen_flask_op_t = xen_flask_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_flask_op_t {
    pub p: *mut xen_flask_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_flask_op_t {
    pub p: *const xen_flask_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_image {
    pub page_list: [xen_bindings_x86_64_types::c_ulong; 17usize],
    pub indirection_page: xen_bindings_x86_64_types::c_ulong,
    pub start_address: xen_bindings_x86_64_types::c_ulong,
}
pub type xen_kexec_image_t = xen_kexec_image;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_exec {
    pub type_: xen_bindings_x86_64_types::c_int,
}
pub type xen_kexec_exec_t = xen_kexec_exec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_load_v1 {
    pub type_: xen_bindings_x86_64_types::c_int,
    pub image: xen_kexec_image_t,
}
pub type xen_kexec_load_v1_t = xen_kexec_load_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_range {
    pub range: xen_bindings_x86_64_types::c_int,
    pub nr: xen_bindings_x86_64_types::c_int,
    pub size: xen_bindings_x86_64_types::c_ulong,
    pub start: xen_bindings_x86_64_types::c_ulong,
}
pub type xen_kexec_range_t = xen_kexec_range;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_kexec_segment {
    pub buf: xen_kexec_segment__bindgen_ty_1,
    pub buf_size: u64,
    pub dest_maddr: u64,
    pub dest_size: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_kexec_segment__bindgen_ty_1 {
    pub h: __guest_handle_const_void,
    pub _pad: u64,
}
pub type xen_kexec_segment_t = xen_kexec_segment;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_kexec_segment_t {
    pub p: *mut xen_kexec_segment_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_kexec_segment_t {
    pub p: *const xen_kexec_segment_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_kexec_load {
    pub type_: u8,
    pub _pad: u8,
    pub arch: u16,
    pub nr_segments: u32,
    pub segments: xen_kexec_load__bindgen_ty_1,
    pub entry_maddr: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_kexec_load__bindgen_ty_1 {
    pub h: __guest_handle_xen_kexec_segment_t,
    pub _pad: u64,
}
pub type xen_kexec_load_t = xen_kexec_load;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_kexec_load_t {
    pub p: *mut xen_kexec_load_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_kexec_load_t {
    pub p: *const xen_kexec_load_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_unload {
    pub type_: u8,
}
pub type xen_kexec_unload_t = xen_kexec_unload;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_kexec_unload_t {
    pub p: *mut xen_kexec_unload_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_kexec_unload_t {
    pub p: *const xen_kexec_unload_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_status {
    pub type_: u8,
}
pub type xen_kexec_status_t = xen_kexec_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_kexec_status_t {
    pub p: *mut xen_kexec_status_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_kexec_status_t {
    pub p: *const xen_kexec_status_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_settime32 {
    pub secs: u32,
    pub nsecs: u32,
    pub system_time: u64,
}
pub type xenpf_settime32_t = xenpf_settime32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_settime64 {
    pub secs: u64,
    pub nsecs: u32,
    pub mbz: u32,
    pub system_time: u64,
}
pub type xenpf_settime64_t = xenpf_settime64;
pub type xenpf_settime_t = xenpf_settime64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_settime_t {
    pub p: *mut xenpf_settime_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_settime_t {
    pub p: *const xenpf_settime_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_add_memtype {
    pub mfn: xen_pfn_t,
    pub nr_mfns: u64,
    pub type_: u32,
    pub handle: u32,
    pub reg: u32,
}
pub type xenpf_add_memtype_t = xenpf_add_memtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_add_memtype_t {
    pub p: *mut xenpf_add_memtype_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_add_memtype_t {
    pub p: *const xenpf_add_memtype_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_del_memtype {
    pub handle: u32,
    pub reg: u32,
}
pub type xenpf_del_memtype_t = xenpf_del_memtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_del_memtype_t {
    pub p: *mut xenpf_del_memtype_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_del_memtype_t {
    pub p: *const xenpf_del_memtype_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_read_memtype {
    pub reg: u32,
    pub mfn: xen_pfn_t,
    pub nr_mfns: u64,
    pub type_: u32,
}
pub type xenpf_read_memtype_t = xenpf_read_memtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_read_memtype_t {
    pub p: *mut xenpf_read_memtype_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_read_memtype_t {
    pub p: *const xenpf_read_memtype_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_microcode_update {
    pub data: __guest_handle_const_void,
    pub length: u32,
}
pub type xenpf_microcode_update_t = xenpf_microcode_update;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_microcode_update_t {
    pub p: *mut xenpf_microcode_update_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_microcode_update_t {
    pub p: *const xenpf_microcode_update_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_platform_quirk {
    pub quirk_id: u32,
}
pub type xenpf_platform_quirk_t = xenpf_platform_quirk;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_platform_quirk_t {
    pub p: *mut xenpf_platform_quirk_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_platform_quirk_t {
    pub p: *const xenpf_platform_quirk_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_time {
    pub year: u16,
    pub month: u8,
    pub day: u8,
    pub hour: u8,
    pub min: u8,
    pub sec: u8,
    pub ns: u32,
    pub tz: i16,
    pub daylight: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_guid {
    pub data1: u32,
    pub data2: u16,
    pub data3: u16,
    pub data4: [u8; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call {
    pub function: u32,
    pub misc: u32,
    pub status: xen_ulong_t,
    pub u: xenpf_efi_runtime_call__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_efi_runtime_call__bindgen_ty_1 {
    pub get_time: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1,
    pub set_time: xenpf_efi_time,
    pub get_wakeup_time: xenpf_efi_time,
    pub set_wakeup_time: xenpf_efi_time,
    pub get_variable: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
    pub set_variable: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
    pub get_next_variable_name: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3,
    pub query_variable_info: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
    pub query_capsule_capabilities: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
    pub update_capsule: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1 {
    pub time: xenpf_efi_time,
    pub resolution: u32,
    pub accuracy: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2 {
    pub name: __guest_handle_void,
    pub size: xen_ulong_t,
    pub data: __guest_handle_void,
    pub vendor_guid: xenpf_efi_guid,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3 {
    pub size: xen_ulong_t,
    pub name: __guest_handle_void,
    pub vendor_guid: xenpf_efi_guid,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4 {
    pub attr: u32,
    pub max_store_size: u64,
    pub remain_store_size: u64,
    pub max_size: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5 {
    pub capsule_header_array: __guest_handle_void,
    pub capsule_count: xen_ulong_t,
    pub max_capsule_size: u64,
    pub reset_type: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6 {
    pub capsule_header_array: __guest_handle_void,
    pub capsule_count: xen_ulong_t,
    pub sg_list: u64,
}
pub type xenpf_efi_runtime_call_t = xenpf_efi_runtime_call;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_efi_runtime_call_t {
    pub p: *mut xenpf_efi_runtime_call_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_efi_runtime_call_t {
    pub p: *const xenpf_efi_runtime_call_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info {
    pub type_: u32,
    pub index: u32,
    pub u: xenpf_firmware_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_firmware_info__bindgen_ty_1 {
    pub disk_info: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
    pub disk_mbr_signature: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2,
    pub vbeddc_info: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3,
    pub efi_info: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
    pub kbd_shift_flags: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1 {
    pub device: u8,
    pub version: u8,
    pub interface_support: u16,
    pub legacy_max_cylinder: u16,
    pub legacy_max_head: u8,
    pub legacy_sectors_per_track: u8,
    pub edd_params: __guest_handle_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2 {
    pub device: u8,
    pub mbr_signature: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3 {
    pub capabilities: u8,
    pub edid_transfer_time: u8,
    pub edid: __guest_handle_uint8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info {
    pub version: u32,
    pub cfg: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1,
    pub vendor: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
    pub mem: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
    pub pci_rom: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
    pub apple_properties: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1 {
    pub addr: u64,
    pub nent: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2 {
    pub revision: u32,
    pub bufsz: u32,
    pub name: __guest_handle_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3 {
    pub addr: u64,
    pub size: u64,
    pub attr: u64,
    pub type_: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4 {
    pub segment: u16,
    pub bus: u8,
    pub devfn: u8,
    pub vendor: u16,
    pub devid: u16,
    pub address: u64,
    pub size: xen_ulong_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5 {
    pub address: u64,
    pub size: xen_ulong_t,
}
pub type xenpf_firmware_info_t = xenpf_firmware_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_firmware_info_t {
    pub p: *mut xenpf_firmware_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_firmware_info_t {
    pub p: *const xenpf_firmware_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_enter_acpi_sleep {
    pub val_a: u16,
    pub val_b: u16,
    pub sleep_state: u32,
    pub flags: u32,
}
pub type xenpf_enter_acpi_sleep_t = xenpf_enter_acpi_sleep;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_enter_acpi_sleep_t {
    pub p: *mut xenpf_enter_acpi_sleep_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_enter_acpi_sleep_t {
    pub p: *const xenpf_enter_acpi_sleep_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_change_freq {
    pub flags: u32,
    pub cpu: u32,
    pub freq: u64,
}
pub type xenpf_change_freq_t = xenpf_change_freq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_change_freq_t {
    pub p: *mut xenpf_change_freq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_change_freq_t {
    pub p: *const xenpf_change_freq_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_getidletime {
    pub cpumap_bitmap: __guest_handle_uint8,
    pub cpumap_nr_cpus: u32,
    pub idletime: __guest_handle_uint64,
    pub now: u64,
}
pub type xenpf_getidletime_t = xenpf_getidletime;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_getidletime_t {
    pub p: *mut xenpf_getidletime_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_getidletime_t {
    pub p: *const xenpf_getidletime_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_power_register {
    pub space_id: u32,
    pub bit_width: u32,
    pub bit_offset: u32,
    pub access_size: u32,
    pub address: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_csd {
    pub domain: u32,
    pub coord_type: u32,
    pub num: u32,
}
pub type xen_processor_csd_t = xen_processor_csd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_processor_csd_t {
    pub p: *mut xen_processor_csd_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_processor_csd_t {
    pub p: *const xen_processor_csd_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_cx {
    pub reg: xen_power_register,
    pub type_: u8,
    pub latency: u32,
    pub power: u32,
    pub dpcnt: u32,
    pub dp: __guest_handle_xen_processor_csd_t,
}
pub type xen_processor_cx_t = xen_processor_cx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_processor_cx_t {
    pub p: *mut xen_processor_cx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_processor_cx_t {
    pub p: *const xen_processor_cx_t,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_flags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl xen_processor_flags {
    #[inline]
    pub fn bm_control(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_control(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bm_check(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_check(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_cst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_cst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn power_setup_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_power_setup_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bm_rld_set(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_rld_set(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bm_control: u32,
        bm_check: u32,
        has_cst: u32,
        power_setup_done: u32,
        bm_rld_set: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bm_control: u32 = unsafe { ::core::mem::transmute(bm_control) };
            bm_control as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bm_check: u32 = unsafe { ::core::mem::transmute(bm_check) };
            bm_check as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let has_cst: u32 = unsafe { ::core::mem::transmute(has_cst) };
            has_cst as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let power_setup_done: u32 = unsafe { ::core::mem::transmute(power_setup_done) };
            power_setup_done as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bm_rld_set: u32 = unsafe { ::core::mem::transmute(bm_rld_set) };
            bm_rld_set as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_power {
    pub count: u32,
    pub flags: xen_processor_flags,
    pub states: __guest_handle_xen_processor_cx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_pct_register {
    pub descriptor: u8,
    pub length: u16,
    pub space_id: u8,
    pub bit_width: u8,
    pub bit_offset: u8,
    pub reserved: u8,
    pub address: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_px {
    pub core_frequency: u64,
    pub power: u64,
    pub transition_latency: u64,
    pub bus_master_latency: u64,
    pub control: u64,
    pub status: u64,
}
pub type xen_processor_px_t = xen_processor_px;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_processor_px_t {
    pub p: *mut xen_processor_px_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_processor_px_t {
    pub p: *const xen_processor_px_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_psd_package {
    pub num_entries: u64,
    pub revision: u64,
    pub domain: u64,
    pub coord_type: u64,
    pub num_processors: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_performance {
    pub flags: u32,
    pub platform_limit: u32,
    pub control_register: xen_pct_register,
    pub status_register: xen_pct_register,
    pub state_count: u32,
    pub states: __guest_handle_xen_processor_px_t,
    pub domain_info: xen_psd_package,
    pub shared_type: u32,
}
pub type xen_processor_performance_t = xen_processor_performance;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_processor_performance_t {
    pub p: *mut xen_processor_performance_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_processor_performance_t {
    pub p: *const xen_processor_performance_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_set_processor_pminfo {
    pub id: u32,
    pub type_: u32,
    pub u: xenpf_set_processor_pminfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_set_processor_pminfo__bindgen_ty_1 {
    pub power: xen_processor_power,
    pub perf: xen_processor_performance,
    pub pdc: __guest_handle_uint32,
}
pub type xenpf_set_processor_pminfo_t = xenpf_set_processor_pminfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_set_processor_pminfo_t {
    pub p: *mut xenpf_set_processor_pminfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_set_processor_pminfo_t {
    pub p: *const xenpf_set_processor_pminfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_pcpuinfo {
    pub xen_cpuid: u32,
    pub max_present: u32,
    pub flags: u32,
    pub apic_id: u32,
    pub acpi_id: u32,
}
pub type xenpf_pcpuinfo_t = xenpf_pcpuinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_pcpuinfo_t {
    pub p: *mut xenpf_pcpuinfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_pcpuinfo_t {
    pub p: *const xenpf_pcpuinfo_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_pcpu_version {
    pub xen_cpuid: u32,
    pub max_present: u32,
    pub vendor_id: [xen_bindings_x86_64_types::c_char; 12usize],
    pub family: u32,
    pub model: u32,
    pub stepping: u32,
}
pub type xenpf_pcpu_version_t = xenpf_pcpu_version;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_pcpu_version_t {
    pub p: *mut xenpf_pcpu_version_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_pcpu_version_t {
    pub p: *const xenpf_pcpu_version_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_cpu_ol {
    pub cpuid: u32,
}
pub type xenpf_cpu_ol_t = xenpf_cpu_ol;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_cpu_ol_t {
    pub p: *mut xenpf_cpu_ol_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_cpu_ol_t {
    pub p: *const xenpf_cpu_ol_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_cpu_hotadd {
    pub apic_id: u32,
    pub acpi_id: u32,
    pub pxm: u32,
}
pub type xenpf_cpu_hotadd_t = xenpf_cpu_hotadd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_mem_hotadd {
    pub spfn: u64,
    pub epfn: u64,
    pub pxm: u32,
    pub flags: u32,
}
pub type xenpf_mem_hotadd_t = xenpf_mem_hotadd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_core_parking {
    pub type_: u32,
    pub idle_nums: u32,
}
pub type xenpf_core_parking_t = xenpf_core_parking;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_core_parking_t {
    pub p: *mut xenpf_core_parking_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_core_parking_t {
    pub p: *const xenpf_core_parking_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_resource_entry {
    pub u: xenpf_resource_entry__bindgen_ty_1,
    pub rsvd: u32,
    pub idx: u64,
    pub val: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_resource_entry__bindgen_ty_1 {
    pub cmd: u32,
    pub ret: i32,
}
pub type xenpf_resource_entry_t = xenpf_resource_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_resource_entry_t {
    pub p: *mut xenpf_resource_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_resource_entry_t {
    pub p: *const xenpf_resource_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_resource_op {
    pub nr_entries: u32,
    pub cpu: u32,
    pub entries: __guest_handle_xenpf_resource_entry_t,
}
pub type xenpf_resource_op_t = xenpf_resource_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_resource_op_t {
    pub p: *mut xenpf_resource_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_resource_op_t {
    pub p: *const xenpf_resource_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_symdata {
    pub namelen: u32,
    pub symnum: u32,
    pub name: __guest_handle_char,
    pub address: u64,
    pub type_: xen_bindings_x86_64_types::c_char,
}
pub type xenpf_symdata_t = xenpf_symdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_symdata_t {
    pub p: *mut xenpf_symdata_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_symdata_t {
    pub p: *const xenpf_symdata_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_platform_op {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_platform_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_platform_op__bindgen_ty_1 {
    pub settime: xenpf_settime_t,
    pub settime32: xenpf_settime32_t,
    pub settime64: xenpf_settime64_t,
    pub add_memtype: xenpf_add_memtype_t,
    pub del_memtype: xenpf_del_memtype_t,
    pub read_memtype: xenpf_read_memtype_t,
    pub microcode: xenpf_microcode_update_t,
    pub platform_quirk: xenpf_platform_quirk_t,
    pub efi_runtime_call: xenpf_efi_runtime_call_t,
    pub firmware_info: xenpf_firmware_info_t,
    pub enter_acpi_sleep: xenpf_enter_acpi_sleep_t,
    pub change_freq: xenpf_change_freq_t,
    pub getidletime: xenpf_getidletime_t,
    pub set_pminfo: xenpf_set_processor_pminfo_t,
    pub pcpu_info: xenpf_pcpuinfo_t,
    pub pcpu_version: xenpf_pcpu_version_t,
    pub cpu_ol: xenpf_cpu_ol_t,
    pub cpu_add: xenpf_cpu_hotadd_t,
    pub mem_add: xenpf_mem_hotadd_t,
    pub core_parking: xenpf_core_parking_t,
    pub resource_op: xenpf_resource_op_t,
    pub symdata: xenpf_symdata_t,
    pub pad: [u8; 128usize],
}
pub type xen_platform_op_t = xen_platform_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_platform_op_t {
    pub p: *mut xen_platform_op_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_platform_op_t {
    pub p: *const xen_platform_op_t,
}
pub const xentoollog_level_XTL_NONE: xentoollog_level = 0;
pub const xentoollog_level_XTL_DEBUG: xentoollog_level = 1;
pub const xentoollog_level_XTL_VERBOSE: xentoollog_level = 2;
pub const xentoollog_level_XTL_DETAIL: xentoollog_level = 3;
pub const xentoollog_level_XTL_PROGRESS: xentoollog_level = 4;
pub const xentoollog_level_XTL_INFO: xentoollog_level = 5;
pub const xentoollog_level_XTL_NOTICE: xentoollog_level = 6;
pub const xentoollog_level_XTL_WARN: xentoollog_level = 7;
pub const xentoollog_level_XTL_ERROR: xentoollog_level = 8;
pub const xentoollog_level_XTL_CRITICAL: xentoollog_level = 9;
pub const xentoollog_level_XTL_NUM_LEVELS: xentoollog_level = 10;
pub type xentoollog_level = xen_bindings_x86_64_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xentoollog_logger {
    pub vmessage: ::core::option::Option<
        unsafe extern "C" fn(
            logger: *mut xentoollog_logger,
            level: xentoollog_level,
            errnoval: xen_bindings_x86_64_types::c_int,
            context: *const xen_bindings_x86_64_types::c_char,
            format: *const xen_bindings_x86_64_types::c_char,
            al: *mut __va_list_tag,
        ),
    >,
    pub progress: ::core::option::Option<
        unsafe extern "C" fn(
            logger: *mut xentoollog_logger,
            context: *const xen_bindings_x86_64_types::c_char,
            doing_what: *const xen_bindings_x86_64_types::c_char,
            percent: xen_bindings_x86_64_types::c_int,
            done: xen_bindings_x86_64_types::c_ulong,
            total: xen_bindings_x86_64_types::c_ulong,
        ),
    >,
    pub destroy: ::core::option::Option<unsafe extern "C" fn(logger: *mut xentoollog_logger)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xentoollog_logger_stdiostream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct start_info_x86_32 {
    pub magic: [xen_bindings_x86_64_types::c_char; 32usize],
    pub nr_pages: u32,
    pub shared_info: u32,
    pub flags: u32,
    pub store_mfn: u32,
    pub store_evtchn: u32,
    pub console: start_info_x86_32__bindgen_ty_1,
    pub pt_base: u32,
    pub nr_pt_frames: u32,
    pub mfn_list: u32,
    pub mod_start: u32,
    pub mod_len: u32,
    pub cmd_line: [i8; 1024usize],
    pub first_p2m_pfn: u32,
    pub nr_p2m_frames: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union start_info_x86_32__bindgen_ty_1 {
    pub domU: start_info_x86_32__bindgen_ty_1__bindgen_ty_1,
    pub dom0: start_info_x86_32__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct start_info_x86_32__bindgen_ty_1__bindgen_ty_1 {
    pub mfn: u32,
    pub evtchn: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct start_info_x86_32__bindgen_ty_1__bindgen_ty_2 {
    pub info_off: u32,
    pub info_size: u32,
}
pub type start_info_x86_32_t = start_info_x86_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trap_info_x86_32 {
    pub vector: u8,
    pub flags: u8,
    pub cs: u16,
    pub address: u32,
}
pub type trap_info_x86_32_t = trap_info_x86_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_user_regs_x86_32 {
    pub ebx: u32,
    pub ecx: u32,
    pub edx: u32,
    pub esi: u32,
    pub edi: u32,
    pub ebp: u32,
    pub eax: u32,
    pub error_code: u16,
    pub entry_vector: u16,
    pub eip: u32,
    pub cs: u16,
    pub saved_upcall_mask: u8,
    pub _pad0: u8,
    pub eflags: u32,
    pub esp: u32,
    pub ss: u16,
    pub _pad1: u16,
    pub es: u16,
    pub _pad2: u16,
    pub ds: u16,
    pub _pad3: u16,
    pub fs: u16,
    pub _pad4: u16,
    pub gs: u16,
    pub _pad5: u16,
}
pub type cpu_user_regs_x86_32_t = cpu_user_regs_x86_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_guest_context_x86_32 {
    pub fpu_ctxt: vcpu_guest_context_x86_32__bindgen_ty_1,
    pub flags: u32,
    pub user_regs: cpu_user_regs_x86_32,
    pub trap_ctxt: [trap_info_x86_32; 256usize],
    pub ldt_base: u32,
    pub ldt_ents: u32,
    pub gdt_frames: [u32; 16usize],
    pub gdt_ents: u32,
    pub kernel_ss: u32,
    pub kernel_sp: u32,
    pub ctrlreg: [u32; 8usize],
    pub debugreg: [u32; 8usize],
    pub event_callback_cs: u32,
    pub event_callback_eip: u32,
    pub failsafe_callback_cs: u32,
    pub failsafe_callback_eip: u32,
    pub vm_assist: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_guest_context_x86_32__bindgen_ty_1 {
    pub x: [xen_bindings_x86_64_types::c_char; 512usize],
}
pub type vcpu_guest_context_x86_32_t = vcpu_guest_context_x86_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_vcpu_info_x86_32 {
    pub cr2: u32,
    pub pad: [u32; 5usize],
}
pub type arch_vcpu_info_x86_32_t = arch_vcpu_info_x86_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_time_info_x86_32 {
    pub version: u32,
    pub pad0: u32,
    pub tsc_timestamp: u64,
    pub system_time: u64,
    pub tsc_to_system_mul: u32,
    pub tsc_shift: i8,
    pub flags: u8,
    pub pad1: [u8; 2usize],
}
pub type vcpu_time_info_x86_32_t = vcpu_time_info_x86_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_info_x86_32 {
    pub evtchn_upcall_pending: u8,
    pub evtchn_upcall_mask: u8,
    pub evtchn_pending_sel: u32,
    pub arch: arch_vcpu_info_x86_32,
    pub time: vcpu_time_info_x86_32_t,
}
pub type vcpu_info_x86_32_t = vcpu_info_x86_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_shared_info_x86_32 {
    pub max_pfn: u32,
    pub pfn_to_mfn_frame_list_list: u32,
    pub nmi_reason: u32,
    pub p2m_cr3: u32,
    pub p2m_vaddr: u32,
    pub p2m_generation: u32,
    pub wc_sec_hi: u32,
}
pub type arch_shared_info_x86_32_t = arch_shared_info_x86_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_info_x86_32 {
    pub vcpu_info: [vcpu_info_x86_32; 32usize],
    pub evtchn_pending: [u32; 32usize],
    pub evtchn_mask: [u32; 32usize],
    pub wc_version: u32,
    pub wc_sec: u32,
    pub wc_nsec: u32,
    pub arch: arch_shared_info_x86_32,
}
pub type shared_info_x86_32_t = shared_info_x86_32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct start_info_x86_64 {
    pub magic: [xen_bindings_x86_64_types::c_char; 32usize],
    pub nr_pages: u64,
    pub shared_info: u64,
    pub flags: u32,
    pub store_mfn: u64,
    pub store_evtchn: u32,
    pub console: start_info_x86_64__bindgen_ty_1,
    pub pt_base: u64,
    pub nr_pt_frames: u64,
    pub mfn_list: u64,
    pub mod_start: u64,
    pub mod_len: u64,
    pub cmd_line: [i8; 1024usize],
    pub first_p2m_pfn: u64,
    pub nr_p2m_frames: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union start_info_x86_64__bindgen_ty_1 {
    pub domU: start_info_x86_64__bindgen_ty_1__bindgen_ty_1,
    pub dom0: start_info_x86_64__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct start_info_x86_64__bindgen_ty_1__bindgen_ty_1 {
    pub mfn: u64,
    pub evtchn: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct start_info_x86_64__bindgen_ty_1__bindgen_ty_2 {
    pub info_off: u32,
    pub info_size: u32,
}
pub type start_info_x86_64_t = start_info_x86_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trap_info_x86_64 {
    pub vector: u8,
    pub flags: u8,
    pub cs: u16,
    pub address: u64,
}
pub type trap_info_x86_64_t = trap_info_x86_64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpu_user_regs_x86_64 {
    pub __bindgen_anon_1: cpu_user_regs_x86_64__bindgen_ty_1,
    pub __bindgen_anon_2: cpu_user_regs_x86_64__bindgen_ty_2,
    pub __bindgen_anon_3: cpu_user_regs_x86_64__bindgen_ty_3,
    pub __bindgen_anon_4: cpu_user_regs_x86_64__bindgen_ty_4,
    pub __bindgen_anon_5: cpu_user_regs_x86_64__bindgen_ty_5,
    pub __bindgen_anon_6: cpu_user_regs_x86_64__bindgen_ty_6,
    pub __bindgen_anon_7: cpu_user_regs_x86_64__bindgen_ty_7,
    pub __bindgen_anon_8: cpu_user_regs_x86_64__bindgen_ty_8,
    pub __bindgen_anon_9: cpu_user_regs_x86_64__bindgen_ty_9,
    pub __bindgen_anon_10: cpu_user_regs_x86_64__bindgen_ty_10,
    pub __bindgen_anon_11: cpu_user_regs_x86_64__bindgen_ty_11,
    pub __bindgen_anon_12: cpu_user_regs_x86_64__bindgen_ty_12,
    pub __bindgen_anon_13: cpu_user_regs_x86_64__bindgen_ty_13,
    pub __bindgen_anon_14: cpu_user_regs_x86_64__bindgen_ty_14,
    pub __bindgen_anon_15: cpu_user_regs_x86_64__bindgen_ty_15,
    pub error_code: u32,
    pub entry_vector: u32,
    pub __bindgen_anon_16: cpu_user_regs_x86_64__bindgen_ty_16,
    pub cs: u16,
    pub _pad0: [u16; 1usize],
    pub saved_upcall_mask: u8,
    pub _pad1: [u8; 3usize],
    pub __bindgen_anon_17: cpu_user_regs_x86_64__bindgen_ty_17,
    pub __bindgen_anon_18: cpu_user_regs_x86_64__bindgen_ty_18,
    pub ss: u16,
    pub _pad2: [u16; 3usize],
    pub es: u16,
    pub _pad3: [u16; 3usize],
    pub ds: u16,
    pub _pad4: [u16; 3usize],
    pub fs: u16,
    pub _pad5: [u16; 3usize],
    pub gs: u16,
    pub _pad6: [u16; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_1 {
    pub r15: u64,
    pub e15: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_2 {
    pub r14: u64,
    pub e14: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_3 {
    pub r13: u64,
    pub e13: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_4 {
    pub r12: u64,
    pub e12: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_5 {
    pub rbp: u64,
    pub ebp: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_6 {
    pub rbx: u64,
    pub ebx: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_7 {
    pub r11: u64,
    pub e11: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_8 {
    pub r10: u64,
    pub e10: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_9 {
    pub r9: u64,
    pub e9: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_10 {
    pub r8: u64,
    pub e8: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_11 {
    pub rax: u64,
    pub eax: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_12 {
    pub rcx: u64,
    pub ecx: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_13 {
    pub rdx: u64,
    pub edx: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_14 {
    pub rsi: u64,
    pub esi: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_15 {
    pub rdi: u64,
    pub edi: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_16 {
    pub rip: u64,
    pub eip: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_17 {
    pub rflags: u64,
    pub eflags: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_18 {
    pub rsp: u64,
    pub esp: u64,
}
pub type cpu_user_regs_x86_64_t = cpu_user_regs_x86_64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vcpu_guest_context_x86_64 {
    pub fpu_ctxt: vcpu_guest_context_x86_64__bindgen_ty_1,
    pub flags: u64,
    pub user_regs: cpu_user_regs_x86_64,
    pub trap_ctxt: [trap_info_x86_64; 256usize],
    pub ldt_base: u64,
    pub ldt_ents: u64,
    pub gdt_frames: [u64; 16usize],
    pub gdt_ents: u64,
    pub kernel_ss: u64,
    pub kernel_sp: u64,
    pub ctrlreg: [u64; 8usize],
    pub debugreg: [u64; 8usize],
    pub event_callback_eip: u64,
    pub failsafe_callback_eip: u64,
    pub syscall_callback_eip: u64,
    pub vm_assist: u64,
    pub fs_base: u64,
    pub gs_base_kernel: u64,
    pub gs_base_user: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_guest_context_x86_64__bindgen_ty_1 {
    pub x: [xen_bindings_x86_64_types::c_char; 512usize],
}
pub type vcpu_guest_context_x86_64_t = vcpu_guest_context_x86_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_vcpu_info_x86_64 {
    pub cr2: u64,
    pub pad: u64,
}
pub type arch_vcpu_info_x86_64_t = arch_vcpu_info_x86_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_time_info_x86_64 {
    pub version: u32,
    pub pad0: u32,
    pub tsc_timestamp: u64,
    pub system_time: u64,
    pub tsc_to_system_mul: u32,
    pub tsc_shift: i8,
    pub flags: u8,
    pub pad1: [u8; 2usize],
}
pub type vcpu_time_info_x86_64_t = vcpu_time_info_x86_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_info_x86_64 {
    pub evtchn_upcall_pending: u8,
    pub evtchn_upcall_mask: u8,
    pub evtchn_pending_sel: u64,
    pub arch: arch_vcpu_info_x86_64,
    pub time: vcpu_time_info_x86_64_t,
}
pub type vcpu_info_x86_64_t = vcpu_info_x86_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_shared_info_x86_64 {
    pub max_pfn: u64,
    pub pfn_to_mfn_frame_list_list: u64,
    pub nmi_reason: u64,
    pub p2m_cr3: u64,
    pub p2m_vaddr: u64,
    pub p2m_generation: u64,
}
pub type arch_shared_info_x86_64_t = arch_shared_info_x86_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_info_x86_64 {
    pub vcpu_info: [vcpu_info_x86_64; 32usize],
    pub evtchn_pending: [u64; 64usize],
    pub evtchn_mask: [u64; 64usize],
    pub wc_version: u32,
    pub wc_sec: u32,
    pub wc_nsec: u32,
    pub wc_sec_hi: u32,
    pub arch: arch_shared_info_x86_64,
}
pub type shared_info_x86_64_t = shared_info_x86_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcinfo_common {
    pub type_: u16,
    pub size: u16,
}
pub type xen_mcinfo_common_t = mcinfo_common;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcinfo_global {
    pub common: xen_mcinfo_common_t,
    pub mc_domid: u16,
    pub mc_vcpuid: u16,
    pub mc_socketid: u32,
    pub mc_coreid: u16,
    pub mc_core_threadid: u16,
    pub mc_apicid: u32,
    pub mc_flags: u32,
    pub mc_gstatus: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcinfo_bank {
    pub common: xen_mcinfo_common_t,
    pub mc_bank: u16,
    pub mc_domid: u16,
    pub mc_status: u64,
    pub mc_addr: u64,
    pub mc_misc: u64,
    pub mc_ctrl2: u64,
    pub mc_tsc: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcinfo_msr {
    pub reg: u64,
    pub value: u64,
}
pub type xen_mcinfo_msr_t = mcinfo_msr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcinfo_extended {
    pub common: xen_mcinfo_common_t,
    pub mc_msrs: u32,
    pub mc_msr: [xen_mcinfo_msr_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page_offline_action {
    pub mfn: u64,
    pub status: u64,
}
pub type xen_page_offline_action_t = page_offline_action;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_offline_action {
    pub mc_socketid: u32,
    pub mc_coreid: u16,
    pub mc_core_threadid: u16,
}
pub type xen_cpu_offline_action_t = cpu_offline_action;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mcinfo_recovery {
    pub common: xen_mcinfo_common_t,
    pub mc_bank: u16,
    pub action_flags: u8,
    pub action_types: u8,
    pub action_info: mcinfo_recovery__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mcinfo_recovery__bindgen_ty_1 {
    pub page_retire: xen_page_offline_action_t,
    pub cpu_offline: xen_cpu_offline_action_t,
    pub pad: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mc_info {
    pub mi_nentries: u32,
    pub flags: u32,
    pub mi_data: [u64; 95usize],
}
pub type mc_info_t = mc_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_mc_info_t {
    pub p: *mut mc_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_mc_info_t {
    pub p: *const mc_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcinfo_logical_cpu {
    pub mc_cpunr: u32,
    pub mc_chipid: u32,
    pub mc_coreid: u16,
    pub mc_threadid: u16,
    pub mc_apicid: u32,
    pub mc_clusterid: u32,
    pub mc_ncores: u32,
    pub mc_ncores_active: u32,
    pub mc_nthreads: u32,
    pub mc_cpuid_level: i32,
    pub mc_family: u32,
    pub mc_vendor: u32,
    pub mc_model: u32,
    pub mc_step: u32,
    pub mc_vendorid: [xen_bindings_x86_64_types::c_char; 16usize],
    pub mc_brandid: [xen_bindings_x86_64_types::c_char; 64usize],
    pub mc_cpu_caps: [u32; 7usize],
    pub mc_cache_size: u32,
    pub mc_cache_alignment: u32,
    pub mc_nmsrvals: i32,
    pub mc_msrvalues: [xen_mcinfo_msr_t; 8usize],
}
pub type xen_mc_logical_cpu_t = mcinfo_logical_cpu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mc_logical_cpu_t {
    pub p: *mut xen_mc_logical_cpu_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mc_logical_cpu_t {
    pub p: *const xen_mc_logical_cpu_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mc_fetch {
    pub flags: u32,
    pub _pad0: u32,
    pub fetch_id: u64,
    pub data: __guest_handle_mc_info_t,
}
pub type xen_mc_fetch_t = xen_mc_fetch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mc_fetch_t {
    pub p: *mut xen_mc_fetch_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mc_fetch_t {
    pub p: *const xen_mc_fetch_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mc_notifydomain {
    pub mc_domid: u16,
    pub mc_vcpuid: u16,
    pub flags: u32,
}
pub type xen_mc_notifydomain_t = xen_mc_notifydomain;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mc_notifydomain_t {
    pub p: *mut xen_mc_notifydomain_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mc_notifydomain_t {
    pub p: *const xen_mc_notifydomain_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mc_physcpuinfo {
    pub ncpus: u32,
    pub _pad0: u32,
    pub info: __guest_handle_xen_mc_logical_cpu_t,
}
pub type xen_mc_physcpuinfo_t = xen_mc_physcpuinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mc_msrinject {
    pub mcinj_cpunr: u32,
    pub mcinj_flags: u32,
    pub mcinj_count: u32,
    pub mcinj_domid: domid_t,
    pub _pad0: u16,
    pub mcinj_msr: [xen_mcinfo_msr_t; 8usize],
}
pub type xen_mc_msrinject_t = xen_mc_msrinject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mc_mceinject {
    pub mceinj_cpunr: xen_bindings_x86_64_types::c_uint,
}
pub type xen_mc_mceinject_t = xen_mc_mceinject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mc_inject_v2 {
    pub flags: u32,
    pub cpumap: xenctl_bitmap_t,
}
pub type xen_mc_inject_v2_t = xen_mc_inject_v2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mc {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_mc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mc__bindgen_ty_1 {
    pub mc_fetch: xen_mc_fetch_t,
    pub mc_notifydomain: xen_mc_notifydomain_t,
    pub mc_physcpuinfo: xen_mc_physcpuinfo_t,
    pub mc_msrinject: xen_mc_msrinject_t,
    pub mc_mceinject: xen_mc_mceinject_t,
    pub mc_inject_v2: xen_mc_inject_v2_t,
}
pub type xen_mc_t = xen_mc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mc_t {
    pub p: *mut xen_mc_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mc_t {
    pub p: *const xen_mc_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_interface_core {
    _unused: [u8; 0],
}
pub type xc_interface = xc_interface_core;
pub const xc_error_code_XC_ERROR_NONE: xc_error_code = 0;
pub const xc_error_code_XC_INTERNAL_ERROR: xc_error_code = 1;
pub const xc_error_code_XC_INVALID_KERNEL: xc_error_code = 2;
pub const xc_error_code_XC_INVALID_PARAM: xc_error_code = 3;
pub const xc_error_code_XC_OUT_OF_MEMORY: xc_error_code = 4;
pub type xc_error_code = xen_bindings_x86_64_types::c_uint;
pub const xc_open_flags_XC_OPENFLAG_DUMMY: xc_open_flags = 1;
pub const xc_open_flags_XC_OPENFLAG_NON_REENTRANT: xc_open_flags = 2;
pub type xc_open_flags = xen_bindings_x86_64_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xencall_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenforeignmemory_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xendevicemodel_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_hypercall_buffer {
    pub hbuf: *mut xen_bindings_x86_64_types::c_void,
    pub param_shadow: *mut xc_hypercall_buffer,
    pub dir: xen_bindings_x86_64_types::c_int,
    pub ubuf: *mut xen_bindings_x86_64_types::c_void,
    pub sz: size_t,
}
pub type xc_hypercall_buffer_t = xc_hypercall_buffer;
extern "C" {
    pub static mut xc__hypercall_buffer_HYPERCALL_BUFFER_NULL: xc_hypercall_buffer_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_hypercall_buffer_array {
    _unused: [u8; 0],
}
pub type xc_hypercall_buffer_array_t = xc_hypercall_buffer_array;
pub type xc_cpumap_t = *mut u8;
pub type xc_nodemap_t = *mut u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_core_header {
    pub xch_magic: xen_bindings_x86_64_types::c_uint,
    pub xch_nr_vcpus: xen_bindings_x86_64_types::c_uint,
    pub xch_nr_pages: xen_bindings_x86_64_types::c_uint,
    pub xch_ctxt_offset: xen_bindings_x86_64_types::c_uint,
    pub xch_index_offset: xen_bindings_x86_64_types::c_uint,
    pub xch_pages_offset: xen_bindings_x86_64_types::c_uint,
}
pub type xc_core_header_t = xc_core_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_dominfo {
    pub domid: u32,
    pub ssidref: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub shutdown_reason: xen_bindings_x86_64_types::c_uint,
    pub nr_pages: xen_bindings_x86_64_types::c_ulong,
    pub nr_outstanding_pages: xen_bindings_x86_64_types::c_ulong,
    pub nr_shared_pages: xen_bindings_x86_64_types::c_ulong,
    pub nr_paged_pages: xen_bindings_x86_64_types::c_ulong,
    pub shared_info_frame: xen_bindings_x86_64_types::c_ulong,
    pub cpu_time: u64,
    pub max_memkb: xen_bindings_x86_64_types::c_ulong,
    pub nr_online_vcpus: xen_bindings_x86_64_types::c_uint,
    pub max_vcpu_id: xen_bindings_x86_64_types::c_uint,
    pub handle: xen_domain_handle_t,
    pub cpupool: xen_bindings_x86_64_types::c_uint,
    pub gpaddr_bits: u8,
    pub arch_config: xen_arch_domainconfig,
}
impl xc_dominfo {
    #[inline]
    pub fn dying(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dying(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn crashed(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_crashed(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shutdown(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shutdown(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn paused(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_paused(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blocked(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_blocked(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn running(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_running(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hvm(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hvm(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn debugged(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_debugged(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xenstore(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xenstore(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hap(&self) -> xen_bindings_x86_64_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hap(&mut self, val: xen_bindings_x86_64_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dying: xen_bindings_x86_64_types::c_uint,
        crashed: xen_bindings_x86_64_types::c_uint,
        shutdown: xen_bindings_x86_64_types::c_uint,
        paused: xen_bindings_x86_64_types::c_uint,
        blocked: xen_bindings_x86_64_types::c_uint,
        running: xen_bindings_x86_64_types::c_uint,
        hvm: xen_bindings_x86_64_types::c_uint,
        debugged: xen_bindings_x86_64_types::c_uint,
        xenstore: xen_bindings_x86_64_types::c_uint,
        hap: xen_bindings_x86_64_types::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dying: u32 = unsafe { ::core::mem::transmute(dying) };
            dying as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let crashed: u32 = unsafe { ::core::mem::transmute(crashed) };
            crashed as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let shutdown: u32 = unsafe { ::core::mem::transmute(shutdown) };
            shutdown as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let paused: u32 = unsafe { ::core::mem::transmute(paused) };
            paused as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let blocked: u32 = unsafe { ::core::mem::transmute(blocked) };
            blocked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let running: u32 = unsafe { ::core::mem::transmute(running) };
            running as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let hvm: u32 = unsafe { ::core::mem::transmute(hvm) };
            hvm as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let debugged: u32 = unsafe { ::core::mem::transmute(debugged) };
            debugged as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xenstore: u32 = unsafe { ::core::mem::transmute(xenstore) };
            xenstore as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let hap: u32 = unsafe { ::core::mem::transmute(hap) };
            hap as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type xc_dominfo_t = xc_dominfo;
pub type xc_domaininfo_t = xen_domctl_getdomaininfo_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_context_any_t {
    pub x64: vcpu_guest_context_x86_64_t,
    pub x32: vcpu_guest_context_x86_32_t,
    pub c: vcpu_guest_context_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union shared_info_any_t {
    pub x64: shared_info_x86_64_t,
    pub x32: shared_info_x86_32_t,
    pub s: shared_info_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union start_info_any_t {
    pub x64: start_info_x86_64_t,
    pub x32: start_info_x86_32_t,
    pub s: start_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_vcpu_extstate {
    pub xfeature_mask: u64,
    pub size: u64,
    pub buffer: *mut xen_bindings_x86_64_types::c_void,
}
pub type xc_vcpu_extstate_t = xc_vcpu_extstate;
pub type dumpcore_rtn_t = ::core::option::Option<
    unsafe extern "C" fn(
        xch: *mut xc_interface,
        arg: *mut xen_bindings_x86_64_types::c_void,
        buffer: *mut xen_bindings_x86_64_types::c_char,
        length: xen_bindings_x86_64_types::c_uint,
    ) -> xen_bindings_x86_64_types::c_int,
>;
pub type xc_vcpuinfo_t = xen_domctl_getvcpuinfo;
pub type xc_shadow_op_stats_t = xen_domctl_shadow_op_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_cpupoolinfo {
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub n_dom: u32,
    pub cpumap: xc_cpumap_t,
}
pub type xc_cpupoolinfo_t = xc_cpupoolinfo;
pub type xc_evtchn_port_or_error_t = xen_bindings_x86_64_types::c_int;
pub type xc_evtchn_status_t = evtchn_status;
pub type xc_physinfo_t = xen_sysctl_physinfo;
pub type xc_cputopo_t = xen_sysctl_cputopo;
pub type xc_numainfo_t = xen_sysctl_numainfo;
pub type xc_meminfo_t = xen_sysctl_meminfo;
pub type xc_pcitopoinfo_t = xen_sysctl_pcitopoinfo;
pub type xc_cpu_to_node_t = u32;
pub type xc_cpu_to_socket_t = u32;
pub type xc_cpu_to_core_t = u32;
pub type xc_node_to_memsize_t = u64;
pub type xc_node_to_memfree_t = u64;
pub type xc_node_to_node_dist_t = u32;
pub type xc_cpuinfo_t = xen_sysctl_cpuinfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct e820entry {
    pub addr: u64,
    pub size: u64,
    pub type_: u32,
}
pub type xc_perfc_desc_t = xen_sysctl_perfc_desc_t;
pub type xc_perfc_val_t = xen_sysctl_perfc_val_t;
pub type xc_lockprof_data_t = xen_sysctl_lockprof_data_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_error {
    pub code: xc_error_code,
    pub message: [xen_bindings_x86_64_types::c_char; 1024usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xc_xend_cpuid {
    pub __bindgen_anon_1: xc_xend_cpuid__bindgen_ty_1,
    pub policy: [*mut xen_bindings_x86_64_types::c_char; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xc_xend_cpuid__bindgen_ty_1 {
    pub __bindgen_anon_1: xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1,
    pub input: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1 {
    pub leaf: u32,
    pub subleaf: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_px_val {
    pub freq: u64,
    pub residency: u64,
    pub count: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_px_stat {
    pub total: u8,
    pub usable: u8,
    pub last: u8,
    pub cur: u8,
    pub trans_pt: *mut u64,
    pub pt: *mut xc_px_val,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_cx_stat {
    pub nr: u32,
    pub last: u32,
    pub idle_time: u64,
    pub triggers: *mut u64,
    pub residencies: *mut u64,
    pub nr_pc: u32,
    pub nr_cc: u32,
    pub pc: *mut u64,
    pub cc: *mut u64,
}
pub type xc_cx_stat_t = xc_cx_stat;
pub type xc_userspace_t = xen_userspace;
pub type xc_ondemand_t = xen_ondemand;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xc_get_cpufreq_para {
    pub cpu_num: u32,
    pub freq_num: u32,
    pub gov_num: u32,
    pub affected_cpus: *mut u32,
    pub scaling_available_frequencies: *mut u32,
    pub scaling_available_governors: *mut xen_bindings_x86_64_types::c_char,
    pub scaling_driver: [xen_bindings_x86_64_types::c_char; 16usize],
    pub cpuinfo_cur_freq: u32,
    pub cpuinfo_max_freq: u32,
    pub cpuinfo_min_freq: u32,
    pub scaling_cur_freq: u32,
    pub scaling_governor: [xen_bindings_x86_64_types::c_char; 16usize],
    pub scaling_max_freq: u32,
    pub scaling_min_freq: u32,
    pub u: xc_get_cpufreq_para__bindgen_ty_1,
    pub turbo_enabled: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xc_get_cpufreq_para__bindgen_ty_1 {
    pub userspace: xc_userspace_t,
    pub ondemand: xc_ondemand_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_binary {
    _unused: [u8; 0],
}
pub type xc_resource_entry_t = xenpf_resource_entry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_resource_op {
    pub result: u64,
    pub cpu: u32,
    pub nr_entries: u32,
    pub entries: *mut xc_resource_entry_t,
}
pub type xc_resource_op_t = xc_resource_op;
pub const xc_psr_cmt_type_XC_PSR_CMT_L3_OCCUPANCY: xc_psr_cmt_type = 0;
pub const xc_psr_cmt_type_XC_PSR_CMT_TOTAL_MEM_COUNT: xc_psr_cmt_type = 1;
pub const xc_psr_cmt_type_XC_PSR_CMT_LOCAL_MEM_COUNT: xc_psr_cmt_type = 2;
pub type xc_psr_cmt_type = xen_bindings_x86_64_types::c_uint;
pub const xc_psr_type_XC_PSR_CAT_L3_CBM: xc_psr_type = 1;
pub const xc_psr_type_XC_PSR_CAT_L3_CBM_CODE: xc_psr_type = 2;
pub const xc_psr_type_XC_PSR_CAT_L3_CBM_DATA: xc_psr_type = 3;
pub const xc_psr_type_XC_PSR_CAT_L2_CBM: xc_psr_type = 4;
pub const xc_psr_type_XC_PSR_MBA_THRTL: xc_psr_type = 5;
pub type xc_psr_type = xen_bindings_x86_64_types::c_uint;
pub const xc_psr_feat_type_XC_PSR_CAT_L3: xc_psr_feat_type = 0;
pub const xc_psr_feat_type_XC_PSR_CAT_L2: xc_psr_feat_type = 1;
pub const xc_psr_feat_type_XC_PSR_MBA: xc_psr_feat_type = 2;
pub type xc_psr_feat_type = xen_bindings_x86_64_types::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union xc_psr_hw_info {
    pub cat: xc_psr_hw_info__bindgen_ty_1,
    pub mba: xc_psr_hw_info__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_psr_hw_info__bindgen_ty_1 {
    pub cos_max: u32,
    pub cbm_len: u32,
    pub cdp_enabled: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_psr_hw_info__bindgen_ty_2 {
    pub cos_max: u32,
    pub thrtl_max: u32,
    pub linear: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xengntdev_handle {
    _unused: [u8; 0],
}
pub type xengnttab_handle = xengntdev_handle;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xengnttab_grant_copy_segment {
    pub source: xengnttab_grant_copy_segment_xengnttab_copy_ptr,
    pub dest: xengnttab_grant_copy_segment_xengnttab_copy_ptr,
    pub len: u16,
    pub flags: u16,
    pub status: i16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xengnttab_grant_copy_segment_xengnttab_copy_ptr {
    pub virt: *mut xen_bindings_x86_64_types::c_void,
    pub foreign: xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1 {
    pub ref_: u32,
    pub offset: u16,
    pub domid: u16,
}
pub type xengnttab_grant_copy_segment_t = xengnttab_grant_copy_segment;
pub type xengntshr_handle = xengntdev_handle;
pub const EPERM: _bindgen_ty_4 = 1;
pub const ENOENT: _bindgen_ty_4 = 2;
pub const ESRCH: _bindgen_ty_4 = 3;
pub const EIO: _bindgen_ty_4 = 5;
pub const ENXIO: _bindgen_ty_4 = 6;
pub const E2BIG: _bindgen_ty_4 = 7;
pub const ENOEXEC: _bindgen_ty_4 = 8;
pub const EBADF: _bindgen_ty_4 = 9;
pub const ECHILD: _bindgen_ty_4 = 10;
pub const EAGAIN: _bindgen_ty_4 = 11;
pub const EWOULDBLOCK: _bindgen_ty_4 = 11;
pub const ENOMEM: _bindgen_ty_4 = 12;
pub const EACCES: _bindgen_ty_4 = 13;
pub const EFAULT: _bindgen_ty_4 = 14;
pub const EBUSY: _bindgen_ty_4 = 16;
pub const EEXIST: _bindgen_ty_4 = 17;
pub const EXDEV: _bindgen_ty_4 = 18;
pub const ENODEV: _bindgen_ty_4 = 19;
pub const ENOTDIR: _bindgen_ty_4 = 20;
pub const EISDIR: _bindgen_ty_4 = 21;
pub const EINVAL: _bindgen_ty_4 = 22;
pub const ENFILE: _bindgen_ty_4 = 23;
pub const EMFILE: _bindgen_ty_4 = 24;
pub const ENOSPC: _bindgen_ty_4 = 28;
pub const EROFS: _bindgen_ty_4 = 30;
pub const EMLINK: _bindgen_ty_4 = 31;
pub const EDOM: _bindgen_ty_4 = 33;
pub const ERANGE: _bindgen_ty_4 = 34;
pub const EDEADLK: _bindgen_ty_4 = 35;
pub const EDEADLOCK: _bindgen_ty_4 = 35;
pub const ENAMETOOLONG: _bindgen_ty_4 = 36;
pub const ENOLCK: _bindgen_ty_4 = 37;
pub const ENOSYS: _bindgen_ty_4 = 38;
pub const ENOTEMPTY: _bindgen_ty_4 = 39;
pub const ENODATA: _bindgen_ty_4 = 61;
pub const ETIME: _bindgen_ty_4 = 62;
pub const EBADMSG: _bindgen_ty_4 = 74;
pub const EOVERFLOW: _bindgen_ty_4 = 75;
pub const EILSEQ: _bindgen_ty_4 = 84;
pub const ENOTSOCK: _bindgen_ty_4 = 88;
pub const EMSGSIZE: _bindgen_ty_4 = 90;
pub const EOPNOTSUPP: _bindgen_ty_4 = 95;
pub const EADDRINUSE: _bindgen_ty_4 = 98;
pub const EADDRNOTAVAIL: _bindgen_ty_4 = 99;
pub const ENOBUFS: _bindgen_ty_4 = 105;
pub const EISCONN: _bindgen_ty_4 = 106;
pub const ENOTCONN: _bindgen_ty_4 = 107;
pub const ETIMEDOUT: _bindgen_ty_4 = 110;
pub const ECONNREFUSED: _bindgen_ty_4 = 111;
pub type _bindgen_ty_4 = xen_bindings_x86_64_types::c_uint;
pub const xsd_sockmsg_type_XS_CONTROL: xsd_sockmsg_type = 0;
pub const xsd_sockmsg_type_XS_DIRECTORY: xsd_sockmsg_type = 1;
pub const xsd_sockmsg_type_XS_READ: xsd_sockmsg_type = 2;
pub const xsd_sockmsg_type_XS_GET_PERMS: xsd_sockmsg_type = 3;
pub const xsd_sockmsg_type_XS_WATCH: xsd_sockmsg_type = 4;
pub const xsd_sockmsg_type_XS_UNWATCH: xsd_sockmsg_type = 5;
pub const xsd_sockmsg_type_XS_TRANSACTION_START: xsd_sockmsg_type = 6;
pub const xsd_sockmsg_type_XS_TRANSACTION_END: xsd_sockmsg_type = 7;
pub const xsd_sockmsg_type_XS_INTRODUCE: xsd_sockmsg_type = 8;
pub const xsd_sockmsg_type_XS_RELEASE: xsd_sockmsg_type = 9;
pub const xsd_sockmsg_type_XS_GET_DOMAIN_PATH: xsd_sockmsg_type = 10;
pub const xsd_sockmsg_type_XS_WRITE: xsd_sockmsg_type = 11;
pub const xsd_sockmsg_type_XS_MKDIR: xsd_sockmsg_type = 12;
pub const xsd_sockmsg_type_XS_RM: xsd_sockmsg_type = 13;
pub const xsd_sockmsg_type_XS_SET_PERMS: xsd_sockmsg_type = 14;
pub const xsd_sockmsg_type_XS_WATCH_EVENT: xsd_sockmsg_type = 15;
pub const xsd_sockmsg_type_XS_ERROR: xsd_sockmsg_type = 16;
pub const xsd_sockmsg_type_XS_IS_DOMAIN_INTRODUCED: xsd_sockmsg_type = 17;
pub const xsd_sockmsg_type_XS_RESUME: xsd_sockmsg_type = 18;
pub const xsd_sockmsg_type_XS_SET_TARGET: xsd_sockmsg_type = 19;
pub const xsd_sockmsg_type_XS_RESET_WATCHES: xsd_sockmsg_type = 21;
pub const xsd_sockmsg_type_XS_DIRECTORY_PART: xsd_sockmsg_type = 22;
pub const xsd_sockmsg_type_XS_TYPE_COUNT: xsd_sockmsg_type = 23;
pub const xsd_sockmsg_type_XS_INVALID: xsd_sockmsg_type = 65535;
pub type xsd_sockmsg_type = xen_bindings_x86_64_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsd_errors {
    pub errnum: xen_bindings_x86_64_types::c_int,
    pub errstring: *const xen_bindings_x86_64_types::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsd_sockmsg {
    pub type_: u32,
    pub req_id: u32,
    pub tx_id: u32,
    pub len: u32,
}
pub const xs_watch_type_XS_WATCH_PATH: xs_watch_type = 0;
pub const xs_watch_type_XS_WATCH_TOKEN: xs_watch_type = 1;
pub type xs_watch_type = xen_bindings_x86_64_types::c_uint;
pub type XENSTORE_RING_IDX = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenstore_domain_interface {
    pub req: [xen_bindings_x86_64_types::c_char; 1024usize],
    pub rsp: [xen_bindings_x86_64_types::c_char; 1024usize],
    pub req_cons: XENSTORE_RING_IDX,
    pub req_prod: XENSTORE_RING_IDX,
    pub rsp_cons: XENSTORE_RING_IDX,
    pub rsp_prod: XENSTORE_RING_IDX,
    pub server_features: u32,
    pub connection: u32,
    pub error: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xs_permissions {
    pub id: xen_bindings_x86_64_types::c_uint,
    pub perms: xen_bindings_x86_64_types::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xs_handle {
    _unused: [u8; 0],
}
pub type xs_transaction_t = u32;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: xen_bindings_x86_64_types::c_uint,
    pub fp_offset: xen_bindings_x86_64_types::c_uint,
    pub overflow_arg_area: *mut xen_bindings_x86_64_types::c_void,
    pub reg_save_area: *mut xen_bindings_x86_64_types::c_void,
}
