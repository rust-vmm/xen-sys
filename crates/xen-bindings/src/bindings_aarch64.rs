/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __XEN_LATEST_INTERFACE_VERSION__: u32 = 265728;
pub const __XEN_INTERFACE_VERSION__: u32 = 265728;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const INVALID_PADDR: i32 = -1;
pub const PRIpaddr: &[u8; 6usize] = b"016lx\0";
pub const PRIregister: &[u8; 6usize] = b"016lx\0";
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT_MAX: i32 = -1;
pub const ULONG_MAX: i32 = -1;
pub const XEN_HYPERCALL_TAG: u32 = 3745;
pub const XEN_LEGACY_MAX_VCPUS: u32 = 1;
pub const _VGCF_online: u32 = 0;
pub const VGCF_online: u32 = 1;
pub const XEN_DOMCTL_CONFIG_GIC_NATIVE: u32 = 0;
pub const XEN_DOMCTL_CONFIG_GIC_V2: u32 = 1;
pub const XEN_DOMCTL_CONFIG_GIC_V3: u32 = 2;
pub const XEN_DOMCTL_CONFIG_TEE_NONE: u32 = 0;
pub const XEN_DOMCTL_CONFIG_TEE_OPTEE: u32 = 1;
pub const PSR_THUMB: u32 = 32;
pub const PSR_FIQ_MASK: u32 = 64;
pub const PSR_IRQ_MASK: u32 = 128;
pub const PSR_ABT_MASK: u32 = 256;
pub const PSR_BIG_ENDIAN: u32 = 512;
pub const PSR_DBG_MASK: u32 = 512;
pub const PSR_IT_MASK: u32 = 100727808;
pub const PSR_JAZELLE: u32 = 16777216;
pub const PSR_Z: u32 = 1073741824;
pub const PSR_MODE_USR: u32 = 16;
pub const PSR_MODE_FIQ: u32 = 17;
pub const PSR_MODE_IRQ: u32 = 18;
pub const PSR_MODE_SVC: u32 = 19;
pub const PSR_MODE_MON: u32 = 22;
pub const PSR_MODE_ABT: u32 = 23;
pub const PSR_MODE_HYP: u32 = 26;
pub const PSR_MODE_UND: u32 = 27;
pub const PSR_MODE_SYS: u32 = 31;
pub const PSR_MODE_BIT: u32 = 16;
pub const PSR_MODE_EL3h: u32 = 13;
pub const PSR_MODE_EL3t: u32 = 12;
pub const PSR_MODE_EL2h: u32 = 9;
pub const PSR_MODE_EL2t: u32 = 8;
pub const PSR_MODE_EL1h: u32 = 5;
pub const PSR_MODE_EL1t: u32 = 4;
pub const PSR_MODE_EL0t: u32 = 0;
pub const PSR_GUEST32_INIT: u32 = 1073742291;
pub const PSR_GUEST64_INIT: u32 = 453;
pub const GUEST_GICV3_RDIST_REGIONS: u32 = 1;
pub const GUEST_RAM_BANKS: u32 = 2;
pub const GUEST_MAX_VCPUS: u32 = 128;
pub const GUEST_TIMER_VIRT_PPI: u32 = 27;
pub const GUEST_TIMER_PHYS_S_PPI: u32 = 29;
pub const GUEST_TIMER_PHYS_NS_PPI: u32 = 30;
pub const GUEST_EVTCHN_PPI: u32 = 31;
pub const GUEST_VPL011_SPI: u32 = 32;
pub const GUEST_VIRTIO_MMIO_SPI_FIRST: u32 = 33;
pub const GUEST_VIRTIO_MMIO_SPI_LAST: u32 = 43;
pub const PSCI_cpu_suspend: u32 = 0;
pub const PSCI_cpu_off: u32 = 1;
pub const PSCI_cpu_on: u32 = 2;
pub const PSCI_migrate: u32 = 3;
pub const __HYPERVISOR_set_trap_table: u32 = 0;
pub const __HYPERVISOR_mmu_update: u32 = 1;
pub const __HYPERVISOR_set_gdt: u32 = 2;
pub const __HYPERVISOR_stack_switch: u32 = 3;
pub const __HYPERVISOR_set_callbacks: u32 = 4;
pub const __HYPERVISOR_fpu_taskswitch: u32 = 5;
pub const __HYPERVISOR_sched_op_compat: u32 = 6;
pub const __HYPERVISOR_platform_op: u32 = 7;
pub const __HYPERVISOR_set_debugreg: u32 = 8;
pub const __HYPERVISOR_get_debugreg: u32 = 9;
pub const __HYPERVISOR_update_descriptor: u32 = 10;
pub const __HYPERVISOR_memory_op: u32 = 12;
pub const __HYPERVISOR_multicall: u32 = 13;
pub const __HYPERVISOR_update_va_mapping: u32 = 14;
pub const __HYPERVISOR_set_timer_op: u32 = 15;
pub const __HYPERVISOR_event_channel_op_compat: u32 = 16;
pub const __HYPERVISOR_xen_version: u32 = 17;
pub const __HYPERVISOR_console_io: u32 = 18;
pub const __HYPERVISOR_physdev_op_compat: u32 = 19;
pub const __HYPERVISOR_grant_table_op: u32 = 20;
pub const __HYPERVISOR_vm_assist: u32 = 21;
pub const __HYPERVISOR_update_va_mapping_otherdomain: u32 = 22;
pub const __HYPERVISOR_iret: u32 = 23;
pub const __HYPERVISOR_vcpu_op: u32 = 24;
pub const __HYPERVISOR_set_segment_base: u32 = 25;
pub const __HYPERVISOR_mmuext_op: u32 = 26;
pub const __HYPERVISOR_xsm_op: u32 = 27;
pub const __HYPERVISOR_nmi_op: u32 = 28;
pub const __HYPERVISOR_sched_op: u32 = 29;
pub const __HYPERVISOR_callback_op: u32 = 30;
pub const __HYPERVISOR_xenoprof_op: u32 = 31;
pub const __HYPERVISOR_event_channel_op: u32 = 32;
pub const __HYPERVISOR_physdev_op: u32 = 33;
pub const __HYPERVISOR_hvm_op: u32 = 34;
pub const __HYPERVISOR_sysctl: u32 = 35;
pub const __HYPERVISOR_domctl: u32 = 36;
pub const __HYPERVISOR_kexec_op: u32 = 37;
pub const __HYPERVISOR_tmem_op: u32 = 38;
pub const __HYPERVISOR_argo_op: u32 = 39;
pub const __HYPERVISOR_xenpmu_op: u32 = 40;
pub const __HYPERVISOR_dm_op: u32 = 41;
pub const __HYPERVISOR_hypfs_op: u32 = 42;
pub const __HYPERVISOR_arch_0: u32 = 48;
pub const __HYPERVISOR_arch_1: u32 = 49;
pub const __HYPERVISOR_arch_2: u32 = 50;
pub const __HYPERVISOR_arch_3: u32 = 51;
pub const __HYPERVISOR_arch_4: u32 = 52;
pub const __HYPERVISOR_arch_5: u32 = 53;
pub const __HYPERVISOR_arch_6: u32 = 54;
pub const __HYPERVISOR_arch_7: u32 = 55;
pub const VIRQ_TIMER: u32 = 0;
pub const VIRQ_DEBUG: u32 = 1;
pub const VIRQ_CONSOLE: u32 = 2;
pub const VIRQ_DOM_EXC: u32 = 3;
pub const VIRQ_TBUF: u32 = 4;
pub const VIRQ_DEBUGGER: u32 = 6;
pub const VIRQ_XENOPROF: u32 = 7;
pub const VIRQ_CON_RING: u32 = 8;
pub const VIRQ_PCPU_STATE: u32 = 9;
pub const VIRQ_MEM_EVENT: u32 = 10;
pub const VIRQ_ARGO: u32 = 11;
pub const VIRQ_ENOMEM: u32 = 12;
pub const VIRQ_XENPMU: u32 = 13;
pub const VIRQ_ARCH_0: u32 = 16;
pub const VIRQ_ARCH_1: u32 = 17;
pub const VIRQ_ARCH_2: u32 = 18;
pub const VIRQ_ARCH_3: u32 = 19;
pub const VIRQ_ARCH_4: u32 = 20;
pub const VIRQ_ARCH_5: u32 = 21;
pub const VIRQ_ARCH_6: u32 = 22;
pub const VIRQ_ARCH_7: u32 = 23;
pub const NR_VIRQS: u32 = 24;
pub const MMU_NORMAL_PT_UPDATE: u32 = 0;
pub const MMU_MACHPHYS_UPDATE: u32 = 1;
pub const MMU_PT_UPDATE_PRESERVE_AD: u32 = 2;
pub const MMU_PT_UPDATE_NO_TRANSLATE: u32 = 3;
pub const MMUEXT_PIN_L1_TABLE: u32 = 0;
pub const MMUEXT_PIN_L2_TABLE: u32 = 1;
pub const MMUEXT_PIN_L3_TABLE: u32 = 2;
pub const MMUEXT_PIN_L4_TABLE: u32 = 3;
pub const MMUEXT_UNPIN_TABLE: u32 = 4;
pub const MMUEXT_NEW_BASEPTR: u32 = 5;
pub const MMUEXT_TLB_FLUSH_LOCAL: u32 = 6;
pub const MMUEXT_INVLPG_LOCAL: u32 = 7;
pub const MMUEXT_TLB_FLUSH_MULTI: u32 = 8;
pub const MMUEXT_INVLPG_MULTI: u32 = 9;
pub const MMUEXT_TLB_FLUSH_ALL: u32 = 10;
pub const MMUEXT_INVLPG_ALL: u32 = 11;
pub const MMUEXT_FLUSH_CACHE: u32 = 12;
pub const MMUEXT_SET_LDT: u32 = 13;
pub const MMUEXT_NEW_USER_BASEPTR: u32 = 15;
pub const MMUEXT_CLEAR_PAGE: u32 = 16;
pub const MMUEXT_COPY_PAGE: u32 = 17;
pub const MMUEXT_FLUSH_CACHE_GLOBAL: u32 = 18;
pub const MMUEXT_MARK_SUPER: u32 = 19;
pub const MMUEXT_UNMARK_SUPER: u32 = 20;
pub const CONSOLEIO_write: u32 = 0;
pub const CONSOLEIO_read: u32 = 1;
pub const VMASST_CMD_enable: u32 = 0;
pub const VMASST_CMD_disable: u32 = 1;
pub const VMASST_TYPE_4gb_segments: u32 = 0;
pub const VMASST_TYPE_4gb_segments_notify: u32 = 1;
pub const VMASST_TYPE_writable_pagetables: u32 = 2;
pub const VMASST_TYPE_pae_extended_cr3: u32 = 3;
pub const VMASST_TYPE_architectural_iopl: u32 = 4;
pub const VMASST_TYPE_runstate_update_flag: u32 = 5;
pub const VMASST_TYPE_m2p_strict: u32 = 32;
pub const XEN_PVCLOCK_TSC_STABLE_BIT: u32 = 1;
pub const XEN_PVCLOCK_GUEST_STOPPED: u32 = 2;
pub const SIF_PRIVILEGED: u32 = 1;
pub const SIF_INITDOMAIN: u32 = 2;
pub const SIF_MULTIBOOT_MOD: u32 = 4;
pub const SIF_MOD_START_PFN: u32 = 8;
pub const SIF_VIRT_P2M_4TOOLS: u32 = 16;
pub const SIF_PM_MASK: u32 = 65280;
pub const XEN_VGATYPE_TEXT_MODE_3: u32 = 3;
pub const XEN_VGATYPE_VESA_LFB: u32 = 35;
pub const XEN_VGATYPE_EFI_LFB: u32 = 112;
pub const EVTCHNOP_bind_interdomain: u32 = 0;
pub const EVTCHNOP_bind_virq: u32 = 1;
pub const EVTCHNOP_bind_pirq: u32 = 2;
pub const EVTCHNOP_close: u32 = 3;
pub const EVTCHNOP_send: u32 = 4;
pub const EVTCHNOP_status: u32 = 5;
pub const EVTCHNOP_alloc_unbound: u32 = 6;
pub const EVTCHNOP_bind_ipi: u32 = 7;
pub const EVTCHNOP_bind_vcpu: u32 = 8;
pub const EVTCHNOP_unmask: u32 = 9;
pub const EVTCHNOP_reset: u32 = 10;
pub const EVTCHNOP_init_control: u32 = 11;
pub const EVTCHNOP_expand_array: u32 = 12;
pub const EVTCHNOP_set_priority: u32 = 13;
pub const BIND_PIRQ__WILL_SHARE: u32 = 1;
pub const EVTCHNSTAT_closed: u32 = 0;
pub const EVTCHNSTAT_unbound: u32 = 1;
pub const EVTCHNSTAT_interdomain: u32 = 2;
pub const EVTCHNSTAT_pirq: u32 = 3;
pub const EVTCHNSTAT_virq: u32 = 4;
pub const EVTCHNSTAT_ipi: u32 = 5;
pub const EVTCHN_FIFO_PRIORITY_MAX: u32 = 0;
pub const EVTCHN_FIFO_PRIORITY_DEFAULT: u32 = 7;
pub const EVTCHN_FIFO_PRIORITY_MIN: u32 = 15;
pub const EVTCHN_FIFO_MAX_QUEUES: u32 = 16;
pub const EVTCHN_FIFO_PENDING: u32 = 31;
pub const EVTCHN_FIFO_MASKED: u32 = 30;
pub const EVTCHN_FIFO_LINKED: u32 = 29;
pub const EVTCHN_FIFO_BUSY: u32 = 28;
pub const EVTCHN_FIFO_LINK_BITS: u32 = 17;
pub const EVTCHN_FIFO_LINK_MASK: u32 = 131071;
pub const EVTCHN_FIFO_NR_CHANNELS: u32 = 131072;
pub const GNTTAB_NR_RESERVED_ENTRIES: u32 = 8;
pub const GNTTAB_RESERVED_CONSOLE: u32 = 0;
pub const GNTTAB_RESERVED_XENSTORE: u32 = 1;
pub const GTF_invalid: u32 = 0;
pub const GTF_permit_access: u32 = 1;
pub const GTF_accept_transfer: u32 = 2;
pub const GTF_transitive: u32 = 3;
pub const GTF_type_mask: u32 = 3;
pub const _GTF_readonly: u32 = 2;
pub const GTF_readonly: u32 = 4;
pub const _GTF_reading: u32 = 3;
pub const GTF_reading: u32 = 8;
pub const _GTF_writing: u32 = 4;
pub const GTF_writing: u32 = 16;
pub const _GTF_PWT: u32 = 5;
pub const GTF_PWT: u32 = 32;
pub const _GTF_PCD: u32 = 6;
pub const GTF_PCD: u32 = 64;
pub const _GTF_PAT: u32 = 7;
pub const GTF_PAT: u32 = 128;
pub const _GTF_sub_page: u32 = 8;
pub const GTF_sub_page: u32 = 256;
pub const _GTF_transfer_committed: u32 = 2;
pub const GTF_transfer_committed: u32 = 4;
pub const _GTF_transfer_completed: u32 = 3;
pub const GTF_transfer_completed: u32 = 8;
pub const GNTTABOP_map_grant_ref: u32 = 0;
pub const GNTTABOP_unmap_grant_ref: u32 = 1;
pub const GNTTABOP_setup_table: u32 = 2;
pub const GNTTABOP_dump_table: u32 = 3;
pub const GNTTABOP_transfer: u32 = 4;
pub const GNTTABOP_copy: u32 = 5;
pub const GNTTABOP_query_size: u32 = 6;
pub const GNTTABOP_unmap_and_replace: u32 = 7;
pub const GNTTABOP_set_version: u32 = 8;
pub const GNTTABOP_get_status_frames: u32 = 9;
pub const GNTTABOP_get_version: u32 = 10;
pub const GNTTABOP_swap_grant_ref: u32 = 11;
pub const GNTTABOP_cache_flush: u32 = 12;
pub const _GNTCOPY_source_gref: u32 = 0;
pub const GNTCOPY_source_gref: u32 = 1;
pub const _GNTCOPY_dest_gref: u32 = 1;
pub const GNTCOPY_dest_gref: u32 = 2;
pub const GNTTAB_CACHE_CLEAN: u32 = 1;
pub const GNTTAB_CACHE_INVAL: u32 = 2;
pub const GNTTAB_CACHE_SOURCE_GREF: u32 = 2147483648;
pub const _GNTMAP_device_map: u32 = 0;
pub const GNTMAP_device_map: u32 = 1;
pub const _GNTMAP_host_map: u32 = 1;
pub const GNTMAP_host_map: u32 = 2;
pub const _GNTMAP_readonly: u32 = 2;
pub const GNTMAP_readonly: u32 = 4;
pub const _GNTMAP_application_map: u32 = 3;
pub const GNTMAP_application_map: u32 = 8;
pub const _GNTMAP_contains_pte: u32 = 4;
pub const GNTMAP_contains_pte: u32 = 16;
pub const _GNTMAP_guest_avail0: u32 = 16;
pub const GNTST_okay: u32 = 0;
pub const GNTST_general_error: i32 = -1;
pub const GNTST_bad_domain: i32 = -2;
pub const GNTST_bad_gntref: i32 = -3;
pub const GNTST_bad_handle: i32 = -4;
pub const GNTST_bad_virt_addr: i32 = -5;
pub const GNTST_bad_dev_addr: i32 = -6;
pub const GNTST_no_device_space: i32 = -7;
pub const GNTST_permission_denied: i32 = -8;
pub const GNTST_bad_page: i32 = -9;
pub const GNTST_bad_copy_arg: i32 = -10;
pub const GNTST_address_too_big: i32 = -11;
pub const GNTST_eagain: i32 = -12;
pub const GNTST_no_space: i32 = -13;
pub const PHYSDEVOP_eoi: u32 = 12;
pub const PHYSDEVOP_pirq_eoi_gmfn_v1: u32 = 17;
pub const PHYSDEVOP_pirq_eoi_gmfn_v2: u32 = 28;
pub const PHYSDEVOP_irq_status_query: u32 = 5;
pub const _XENIRQSTAT_needs_eoi: u32 = 0;
pub const XENIRQSTAT_needs_eoi: u32 = 1;
pub const _XENIRQSTAT_shared: u32 = 1;
pub const XENIRQSTAT_shared: u32 = 2;
pub const PHYSDEVOP_set_iopl: u32 = 6;
pub const PHYSDEVOP_set_iobitmap: u32 = 7;
pub const PHYSDEVOP_apic_read: u32 = 8;
pub const PHYSDEVOP_apic_write: u32 = 9;
pub const PHYSDEVOP_alloc_irq_vector: u32 = 10;
pub const PHYSDEVOP_free_irq_vector: u32 = 11;
pub const MAP_PIRQ_TYPE_MSI: u32 = 0;
pub const MAP_PIRQ_TYPE_GSI: u32 = 1;
pub const MAP_PIRQ_TYPE_UNKNOWN: u32 = 2;
pub const MAP_PIRQ_TYPE_MSI_SEG: u32 = 3;
pub const MAP_PIRQ_TYPE_MULTI_MSI: u32 = 4;
pub const PHYSDEVOP_map_pirq: u32 = 13;
pub const PHYSDEVOP_unmap_pirq: u32 = 14;
pub const PHYSDEVOP_manage_pci_add: u32 = 15;
pub const PHYSDEVOP_manage_pci_remove: u32 = 16;
pub const PHYSDEVOP_restore_msi: u32 = 19;
pub const PHYSDEVOP_manage_pci_add_ext: u32 = 20;
pub const PHYSDEVOP_setup_gsi: u32 = 21;
pub const PHYSDEVOP_get_free_pirq: u32 = 23;
pub const XEN_PCI_MMCFG_RESERVED: u32 = 1;
pub const PHYSDEVOP_pci_mmcfg_reserved: u32 = 24;
pub const XEN_PCI_DEV_EXTFN: u32 = 1;
pub const XEN_PCI_DEV_VIRTFN: u32 = 2;
pub const XEN_PCI_DEV_PXM: u32 = 4;
pub const PHYSDEVOP_pci_device_add: u32 = 25;
pub const PHYSDEVOP_pci_device_remove: u32 = 26;
pub const PHYSDEVOP_restore_msi_ext: u32 = 27;
pub const PHYSDEVOP_prepare_msix: u32 = 30;
pub const PHYSDEVOP_release_msix: u32 = 31;
pub const PHYSDEVOP_DBGP_RESET_PREPARE: u32 = 1;
pub const PHYSDEVOP_DBGP_RESET_DONE: u32 = 2;
pub const PHYSDEVOP_DBGP_BUS_UNKNOWN: u32 = 0;
pub const PHYSDEVOP_DBGP_BUS_PCI: u32 = 1;
pub const PHYSDEVOP_dbgp_op: u32 = 29;
pub const PHYSDEVOP_IRQ_UNMASK_NOTIFY: u32 = 4;
pub const PHYSDEVOP_pirq_eoi_gmfn: u32 = 28;
pub const XENMEM_increase_reservation: u32 = 0;
pub const XENMEM_decrease_reservation: u32 = 1;
pub const XENMEM_populate_physmap: u32 = 6;
pub const XENMEMF_populate_on_demand: u32 = 65536;
pub const XENMEMF_exact_node_request: u32 = 131072;
pub const XENMEMF_vnode: u32 = 262144;
pub const XENMEM_exchange: u32 = 11;
pub const XENMEM_maximum_ram_page: u32 = 2;
pub const XENMEM_current_reservation: u32 = 3;
pub const XENMEM_maximum_reservation: u32 = 4;
pub const XENMEM_maximum_gpfn: u32 = 14;
pub const XENMEM_machphys_mfn_list: u32 = 5;
pub const XENMEM_machphys_compat_mfn_list: u32 = 25;
pub const XENMEM_machphys_mapping: u32 = 12;
pub const XENMAPSPACE_shared_info: u32 = 0;
pub const XENMAPSPACE_grant_table: u32 = 1;
pub const XENMAPSPACE_gmfn: u32 = 2;
pub const XENMAPSPACE_gmfn_range: u32 = 3;
pub const XENMAPSPACE_gmfn_foreign: u32 = 4;
pub const XENMAPSPACE_dev_mmio: u32 = 5;
pub const XENMEM_add_to_physmap: u32 = 7;
pub const XENMAPIDX_grant_table_status: u32 = 2147483648;
pub const XENMEM_add_to_physmap_batch: u32 = 23;
pub const XENMEM_remove_from_physmap: u32 = 15;
pub const XENMEM_memory_map: u32 = 9;
pub const XENMEM_machine_memory_map: u32 = 10;
pub const XENMEM_set_memory_map: u32 = 13;
pub const XENMEM_set_pod_target: u32 = 16;
pub const XENMEM_get_pod_target: u32 = 17;
pub const XENMEM_get_sharing_freed_pages: u32 = 18;
pub const XENMEM_get_sharing_shared_pages: u32 = 19;
pub const XENMEM_paging_op: u32 = 20;
pub const XENMEM_paging_op_nominate: u32 = 0;
pub const XENMEM_paging_op_evict: u32 = 1;
pub const XENMEM_paging_op_prep: u32 = 2;
pub const XENMEM_access_op: u32 = 21;
pub const XENMEM_access_op_set_access: u32 = 0;
pub const XENMEM_access_op_get_access: u32 = 1;
pub const XENMEM_access_op_set_access_multi: u32 = 4;
pub const XENMEM_sharing_op: u32 = 22;
pub const XENMEM_sharing_op_nominate_gfn: u32 = 0;
pub const XENMEM_sharing_op_nominate_gref: u32 = 1;
pub const XENMEM_sharing_op_share: u32 = 2;
pub const XENMEM_sharing_op_debug_gfn: u32 = 3;
pub const XENMEM_sharing_op_debug_mfn: u32 = 4;
pub const XENMEM_sharing_op_debug_gref: u32 = 5;
pub const XENMEM_sharing_op_add_physmap: u32 = 6;
pub const XENMEM_sharing_op_audit: u32 = 7;
pub const XENMEM_sharing_op_range_share: u32 = 8;
pub const XENMEM_sharing_op_fork: u32 = 9;
pub const XENMEM_sharing_op_fork_reset: u32 = 10;
pub const XENMEM_SHARING_OP_S_HANDLE_INVALID: i32 = -10;
pub const XENMEM_SHARING_OP_C_HANDLE_INVALID: i32 = -9;
pub const XENMEM_FORK_WITH_IOMMU_ALLOWED: u32 = 1;
pub const XENMEM_FORK_BLOCK_INTERRUPTS: u32 = 2;
pub const XENMEM_FORK_RESET_STATE: u32 = 4;
pub const XENMEM_FORK_RESET_MEMORY: u32 = 8;
pub const XENMEM_claim_pages: u32 = 24;
pub const XENMEM_reserved_device_memory_map: u32 = 27;
pub const XENMEM_RDM_ALL: u32 = 1;
pub const XENMEM_acquire_resource: u32 = 28;
pub const XENMEM_resource_ioreq_server: u32 = 0;
pub const XENMEM_resource_grant_table: u32 = 1;
pub const XENMEM_resource_vmtrace_buf: u32 = 2;
pub const XENMEM_resource_grant_table_id_shared: u32 = 0;
pub const XENMEM_resource_grant_table_id_status: u32 = 1;
pub const XENMEM_resource_ioreq_server_frame_bufioreq: u32 = 0;
pub const XENMEM_get_vnumainfo: u32 = 26;
pub const XEN_DOMCTL_INTERFACE_VERSION: u32 = 21;
pub const _XEN_DOMCTL_CDF_hvm: u32 = 0;
pub const XEN_DOMCTL_CDF_hvm: u32 = 1;
pub const _XEN_DOMCTL_CDF_hap: u32 = 1;
pub const XEN_DOMCTL_CDF_hap: u32 = 2;
pub const _XEN_DOMCTL_CDF_s3_integrity: u32 = 2;
pub const XEN_DOMCTL_CDF_s3_integrity: u32 = 4;
pub const _XEN_DOMCTL_CDF_oos_off: u32 = 3;
pub const XEN_DOMCTL_CDF_oos_off: u32 = 8;
pub const _XEN_DOMCTL_CDF_xs_domain: u32 = 4;
pub const XEN_DOMCTL_CDF_xs_domain: u32 = 16;
pub const _XEN_DOMCTL_CDF_iommu: u32 = 5;
pub const XEN_DOMCTL_CDF_iommu: u32 = 32;
pub const _XEN_DOMCTL_CDF_nested_virt: u32 = 6;
pub const XEN_DOMCTL_CDF_nested_virt: u32 = 64;
pub const XEN_DOMCTL_CDF_vpmu: u32 = 128;
pub const XEN_DOMCTL_CDF_MAX: u32 = 128;
pub const _XEN_DOMCTL_IOMMU_no_sharept: u32 = 0;
pub const XEN_DOMCTL_IOMMU_no_sharept: u32 = 1;
pub const XEN_DOMCTL_IOMMU_MAX: u32 = 1;
pub const XEN_DOMCTL_GRANT_version_mask: u32 = 15;
pub const _XEN_DOMINF_dying: u32 = 0;
pub const XEN_DOMINF_dying: u32 = 1;
pub const _XEN_DOMINF_hvm_guest: u32 = 1;
pub const XEN_DOMINF_hvm_guest: u32 = 2;
pub const _XEN_DOMINF_shutdown: u32 = 2;
pub const XEN_DOMINF_shutdown: u32 = 4;
pub const _XEN_DOMINF_paused: u32 = 3;
pub const XEN_DOMINF_paused: u32 = 8;
pub const _XEN_DOMINF_blocked: u32 = 4;
pub const XEN_DOMINF_blocked: u32 = 16;
pub const _XEN_DOMINF_running: u32 = 5;
pub const XEN_DOMINF_running: u32 = 32;
pub const _XEN_DOMINF_debugged: u32 = 6;
pub const XEN_DOMINF_debugged: u32 = 64;
pub const _XEN_DOMINF_xs_domain: u32 = 7;
pub const XEN_DOMINF_xs_domain: u32 = 128;
pub const _XEN_DOMINF_hap: u32 = 8;
pub const XEN_DOMINF_hap: u32 = 256;
pub const XEN_DOMINF_shutdownmask: u32 = 255;
pub const XEN_DOMINF_shutdownshift: u32 = 16;
pub const XEN_INVALID_MAX_VCPU_ID: i32 = -1;
pub const XEN_DOMCTL_PFINFO_LTAB_SHIFT: u32 = 28;
pub const XEN_DOMCTL_PFINFO_NOTAB: u32 = 0;
pub const XEN_DOMCTL_PFINFO_L1TAB: u32 = 268435456;
pub const XEN_DOMCTL_PFINFO_L2TAB: u32 = 536870912;
pub const XEN_DOMCTL_PFINFO_L3TAB: u32 = 805306368;
pub const XEN_DOMCTL_PFINFO_L4TAB: u32 = 1073741824;
pub const XEN_DOMCTL_PFINFO_LTABTYPE_MASK: u32 = 1879048192;
pub const XEN_DOMCTL_PFINFO_LPINTAB: u32 = 2147483648;
pub const XEN_DOMCTL_PFINFO_XTAB: u32 = 4026531840;
pub const XEN_DOMCTL_PFINFO_XALLOC: u32 = 3758096384;
pub const XEN_DOMCTL_PFINFO_BROKEN: u32 = 3489660928;
pub const XEN_DOMCTL_PFINFO_LTAB_MASK: u32 = 4026531840;
pub const XEN_DOMCTL_SHADOW_OP_OFF: u32 = 0;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE: u32 = 32;
pub const XEN_DOMCTL_SHADOW_OP_CLEAN: u32 = 11;
pub const XEN_DOMCTL_SHADOW_OP_PEEK: u32 = 12;
pub const XEN_DOMCTL_SHADOW_OP_GET_ALLOCATION: u32 = 30;
pub const XEN_DOMCTL_SHADOW_OP_SET_ALLOCATION: u32 = 31;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE_TEST: u32 = 1;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE_LOGDIRTY: u32 = 2;
pub const XEN_DOMCTL_SHADOW_ENABLE_REFCOUNT: u32 = 2;
pub const XEN_DOMCTL_SHADOW_ENABLE_LOG_DIRTY: u32 = 4;
pub const XEN_DOMCTL_SHADOW_ENABLE_TRANSLATE: u32 = 8;
pub const XEN_DOMCTL_SHADOW_ENABLE_EXTERNAL: u32 = 16;
pub const XEN_DOMCTL_SHADOW_LOGDIRTY_FINAL: u32 = 1;
pub const _XEN_VCPUAFFINITY_HARD: u32 = 0;
pub const XEN_VCPUAFFINITY_HARD: u32 = 1;
pub const _XEN_VCPUAFFINITY_SOFT: u32 = 1;
pub const XEN_VCPUAFFINITY_SOFT: u32 = 2;
pub const _XEN_VCPUAFFINITY_FORCE: u32 = 2;
pub const XEN_VCPUAFFINITY_FORCE: u32 = 4;
pub const XEN_SCHEDULER_CREDIT: u32 = 5;
pub const XEN_SCHEDULER_CREDIT2: u32 = 6;
pub const XEN_SCHEDULER_ARINC653: u32 = 7;
pub const XEN_SCHEDULER_RTDS: u32 = 8;
pub const XEN_SCHEDULER_NULL: u32 = 9;
pub const _XEN_DOMCTL_SCHEDRT_extra: u32 = 0;
pub const XEN_DOMCTL_SCHEDRT_extra: u32 = 1;
pub const XEN_DOMCTL_SCHEDOP_putinfo: u32 = 0;
pub const XEN_DOMCTL_SCHEDOP_getinfo: u32 = 1;
pub const XEN_DOMCTL_SCHEDOP_putvcpuinfo: u32 = 2;
pub const XEN_DOMCTL_SCHEDOP_getvcpuinfo: u32 = 3;
pub const XEN_DOMCTL_SENDTRIGGER_NMI: u32 = 0;
pub const XEN_DOMCTL_SENDTRIGGER_RESET: u32 = 1;
pub const XEN_DOMCTL_SENDTRIGGER_INIT: u32 = 2;
pub const XEN_DOMCTL_SENDTRIGGER_POWER: u32 = 3;
pub const XEN_DOMCTL_SENDTRIGGER_SLEEP: u32 = 4;
pub const XEN_DOMCTL_DEV_PCI: u32 = 0;
pub const XEN_DOMCTL_DEV_DT: u32 = 1;
pub const XEN_DOMCTL_DEV_RDM_RELAXED: u32 = 1;
pub const XEN_DOMCTL_VMSI_X86_DEST_ID_MASK: u32 = 255;
pub const XEN_DOMCTL_VMSI_X86_RH_MASK: u32 = 256;
pub const XEN_DOMCTL_VMSI_X86_DM_MASK: u32 = 512;
pub const XEN_DOMCTL_VMSI_X86_DELIV_MASK: u32 = 28672;
pub const XEN_DOMCTL_VMSI_X86_TRIG_MASK: u32 = 32768;
pub const XEN_DOMCTL_VMSI_X86_UNMASKED: u32 = 65536;
pub const DPCI_ADD_MAPPING: u32 = 1;
pub const DPCI_REMOVE_MAPPING: u32 = 0;
pub const XEN_DOMCTL_MEM_CACHEATTR_UC: u32 = 0;
pub const XEN_DOMCTL_MEM_CACHEATTR_WC: u32 = 1;
pub const XEN_DOMCTL_MEM_CACHEATTR_WT: u32 = 4;
pub const XEN_DOMCTL_MEM_CACHEATTR_WP: u32 = 5;
pub const XEN_DOMCTL_MEM_CACHEATTR_WB: u32 = 6;
pub const XEN_DOMCTL_MEM_CACHEATTR_UCM: u32 = 7;
pub const XEN_DOMCTL_DEBUG_OP_SINGLE_STEP_OFF: u32 = 0;
pub const XEN_DOMCTL_DEBUG_OP_SINGLE_STEP_ON: u32 = 1;
pub const XEN_VM_EVENT_ENABLE: u32 = 0;
pub const XEN_VM_EVENT_DISABLE: u32 = 1;
pub const XEN_VM_EVENT_RESUME: u32 = 2;
pub const XEN_VM_EVENT_GET_VERSION: u32 = 3;
pub const XEN_DOMCTL_VM_EVENT_OP_PAGING: u32 = 1;
pub const XEN_DOMCTL_VM_EVENT_OP_MONITOR: u32 = 2;
pub const XEN_DOMCTL_VM_EVENT_OP_SHARING: u32 = 3;
pub const XEN_DOMCTL_MEM_SHARING_CONTROL: u32 = 0;
pub const XEN_DOMCTL_PSR_CMT_OP_DETACH: u32 = 0;
pub const XEN_DOMCTL_PSR_CMT_OP_ATTACH: u32 = 1;
pub const XEN_DOMCTL_PSR_CMT_OP_QUERY_RMID: u32 = 2;
pub const XEN_DOMCTL_MONITOR_OP_ENABLE: u32 = 0;
pub const XEN_DOMCTL_MONITOR_OP_DISABLE: u32 = 1;
pub const XEN_DOMCTL_MONITOR_OP_GET_CAPABILITIES: u32 = 2;
pub const XEN_DOMCTL_MONITOR_OP_EMULATE_EACH_REP: u32 = 3;
pub const XEN_DOMCTL_MONITOR_OP_CONTROL_REGISTERS: u32 = 4;
pub const XEN_DOMCTL_MONITOR_EVENT_WRITE_CTRLREG: u32 = 0;
pub const XEN_DOMCTL_MONITOR_EVENT_MOV_TO_MSR: u32 = 1;
pub const XEN_DOMCTL_MONITOR_EVENT_SINGLESTEP: u32 = 2;
pub const XEN_DOMCTL_MONITOR_EVENT_SOFTWARE_BREAKPOINT: u32 = 3;
pub const XEN_DOMCTL_MONITOR_EVENT_GUEST_REQUEST: u32 = 4;
pub const XEN_DOMCTL_MONITOR_EVENT_DEBUG_EXCEPTION: u32 = 5;
pub const XEN_DOMCTL_MONITOR_EVENT_CPUID: u32 = 6;
pub const XEN_DOMCTL_MONITOR_EVENT_PRIVILEGED_CALL: u32 = 7;
pub const XEN_DOMCTL_MONITOR_EVENT_INTERRUPT: u32 = 8;
pub const XEN_DOMCTL_MONITOR_EVENT_DESC_ACCESS: u32 = 9;
pub const XEN_DOMCTL_MONITOR_EVENT_EMUL_UNIMPLEMENTED: u32 = 10;
pub const XEN_DOMCTL_MONITOR_EVENT_INGUEST_PAGEFAULT: u32 = 11;
pub const XEN_DOMCTL_MONITOR_EVENT_VMEXIT: u32 = 12;
pub const XEN_DOMCTL_PSR_SET_L3_CBM: u32 = 0;
pub const XEN_DOMCTL_PSR_GET_L3_CBM: u32 = 1;
pub const XEN_DOMCTL_PSR_SET_L3_CODE: u32 = 2;
pub const XEN_DOMCTL_PSR_SET_L3_DATA: u32 = 3;
pub const XEN_DOMCTL_PSR_GET_L3_CODE: u32 = 4;
pub const XEN_DOMCTL_PSR_GET_L3_DATA: u32 = 5;
pub const XEN_DOMCTL_PSR_SET_L2_CBM: u32 = 6;
pub const XEN_DOMCTL_PSR_GET_L2_CBM: u32 = 7;
pub const XEN_DOMCTL_PSR_SET_MBA_THRTL: u32 = 8;
pub const XEN_DOMCTL_PSR_GET_MBA_THRTL: u32 = 9;
pub const XEN_DOMCTL_VUART_OP_INIT: u32 = 0;
pub const XEN_DOMCTL_VUART_TYPE_VPL011: u32 = 0;
pub const XEN_DOMCTL_vmtrace_enable: u32 = 1;
pub const XEN_DOMCTL_vmtrace_disable: u32 = 2;
pub const XEN_DOMCTL_vmtrace_reset_and_enable: u32 = 3;
pub const XEN_DOMCTL_vmtrace_output_position: u32 = 4;
pub const XEN_DOMCTL_vmtrace_get_option: u32 = 5;
pub const XEN_DOMCTL_vmtrace_set_option: u32 = 6;
pub const XEN_DOMCTL_createdomain: u32 = 1;
pub const XEN_DOMCTL_destroydomain: u32 = 2;
pub const XEN_DOMCTL_pausedomain: u32 = 3;
pub const XEN_DOMCTL_unpausedomain: u32 = 4;
pub const XEN_DOMCTL_getdomaininfo: u32 = 5;
pub const XEN_DOMCTL_setvcpuaffinity: u32 = 9;
pub const XEN_DOMCTL_shadow_op: u32 = 10;
pub const XEN_DOMCTL_max_mem: u32 = 11;
pub const XEN_DOMCTL_setvcpucontext: u32 = 12;
pub const XEN_DOMCTL_getvcpucontext: u32 = 13;
pub const XEN_DOMCTL_getvcpuinfo: u32 = 14;
pub const XEN_DOMCTL_max_vcpus: u32 = 15;
pub const XEN_DOMCTL_scheduler_op: u32 = 16;
pub const XEN_DOMCTL_setdomainhandle: u32 = 17;
pub const XEN_DOMCTL_setdebugging: u32 = 18;
pub const XEN_DOMCTL_irq_permission: u32 = 19;
pub const XEN_DOMCTL_iomem_permission: u32 = 20;
pub const XEN_DOMCTL_ioport_permission: u32 = 21;
pub const XEN_DOMCTL_hypercall_init: u32 = 22;
pub const XEN_DOMCTL_settimeoffset: u32 = 24;
pub const XEN_DOMCTL_getvcpuaffinity: u32 = 25;
pub const XEN_DOMCTL_real_mode_area: u32 = 26;
pub const XEN_DOMCTL_resumedomain: u32 = 27;
pub const XEN_DOMCTL_sendtrigger: u32 = 28;
pub const XEN_DOMCTL_subscribe: u32 = 29;
pub const XEN_DOMCTL_gethvmcontext: u32 = 33;
pub const XEN_DOMCTL_sethvmcontext: u32 = 34;
pub const XEN_DOMCTL_set_address_size: u32 = 35;
pub const XEN_DOMCTL_get_address_size: u32 = 36;
pub const XEN_DOMCTL_assign_device: u32 = 37;
pub const XEN_DOMCTL_bind_pt_irq: u32 = 38;
pub const XEN_DOMCTL_memory_mapping: u32 = 39;
pub const XEN_DOMCTL_ioport_mapping: u32 = 40;
pub const XEN_DOMCTL_set_ext_vcpucontext: u32 = 42;
pub const XEN_DOMCTL_get_ext_vcpucontext: u32 = 43;
pub const XEN_DOMCTL_set_opt_feature: u32 = 44;
pub const XEN_DOMCTL_test_assign_device: u32 = 45;
pub const XEN_DOMCTL_set_target: u32 = 46;
pub const XEN_DOMCTL_deassign_device: u32 = 47;
pub const XEN_DOMCTL_unbind_pt_irq: u32 = 48;
pub const XEN_DOMCTL_get_device_group: u32 = 50;
pub const XEN_DOMCTL_debug_op: u32 = 54;
pub const XEN_DOMCTL_gethvmcontext_partial: u32 = 55;
pub const XEN_DOMCTL_vm_event_op: u32 = 56;
pub const XEN_DOMCTL_mem_sharing_op: u32 = 57;
pub const XEN_DOMCTL_gettscinfo: u32 = 59;
pub const XEN_DOMCTL_settscinfo: u32 = 60;
pub const XEN_DOMCTL_getpageframeinfo3: u32 = 61;
pub const XEN_DOMCTL_setvcpuextstate: u32 = 62;
pub const XEN_DOMCTL_getvcpuextstate: u32 = 63;
pub const XEN_DOMCTL_set_access_required: u32 = 64;
pub const XEN_DOMCTL_audit_p2m: u32 = 65;
pub const XEN_DOMCTL_set_virq_handler: u32 = 66;
pub const XEN_DOMCTL_set_broken_page_p2m: u32 = 67;
pub const XEN_DOMCTL_setnodeaffinity: u32 = 68;
pub const XEN_DOMCTL_getnodeaffinity: u32 = 69;
pub const XEN_DOMCTL_cacheflush: u32 = 71;
pub const XEN_DOMCTL_get_vcpu_msrs: u32 = 72;
pub const XEN_DOMCTL_set_vcpu_msrs: u32 = 73;
pub const XEN_DOMCTL_setvnumainfo: u32 = 74;
pub const XEN_DOMCTL_psr_cmt_op: u32 = 75;
pub const XEN_DOMCTL_monitor_op: u32 = 77;
pub const XEN_DOMCTL_psr_alloc: u32 = 78;
pub const XEN_DOMCTL_soft_reset: u32 = 79;
pub const XEN_DOMCTL_vuart_op: u32 = 81;
pub const XEN_DOMCTL_get_cpu_policy: u32 = 82;
pub const XEN_DOMCTL_set_cpu_policy: u32 = 83;
pub const XEN_DOMCTL_vmtrace_op: u32 = 84;
pub const XEN_DOMCTL_gdbsx_guestmemio: u32 = 1000;
pub const XEN_DOMCTL_gdbsx_pausevcpu: u32 = 1001;
pub const XEN_DOMCTL_gdbsx_unpausevcpu: u32 = 1002;
pub const XEN_DOMCTL_gdbsx_domstatus: u32 = 1003;
pub const IOREQ_READ: u32 = 1;
pub const IOREQ_WRITE: u32 = 0;
pub const STATE_IOREQ_NONE: u32 = 0;
pub const STATE_IOREQ_READY: u32 = 1;
pub const STATE_IOREQ_INPROCESS: u32 = 2;
pub const STATE_IORESP_READY: u32 = 3;
pub const IOREQ_TYPE_PIO: u32 = 0;
pub const IOREQ_TYPE_COPY: u32 = 1;
pub const IOREQ_TYPE_PCI_CONFIG: u32 = 2;
pub const IOREQ_TYPE_TIMEOFFSET: u32 = 7;
pub const IOREQ_TYPE_INVALIDATE: u32 = 8;
pub const IOREQ_BUFFER_SLOT_NUM: u32 = 511;
pub const ACPI_PM1A_EVT_BLK_ADDRESS_V0: u32 = 8000;
pub const ACPI_PM1A_CNT_BLK_ADDRESS_V0: u32 = 8004;
pub const ACPI_PM_TMR_BLK_ADDRESS_V0: u32 = 8008;
pub const ACPI_GPE0_BLK_ADDRESS_V0: u32 = 8040;
pub const ACPI_GPE0_BLK_LEN_V0: u32 = 8;
pub const ACPI_PM1A_EVT_BLK_ADDRESS_V1: u32 = 45056;
pub const ACPI_PM1A_CNT_BLK_ADDRESS_V1: u32 = 45060;
pub const ACPI_PM_TMR_BLK_ADDRESS_V1: u32 = 45064;
pub const ACPI_GPE0_BLK_ADDRESS_V1: u32 = 45024;
pub const ACPI_GPE0_BLK_LEN_V1: u32 = 4;
pub const ACPI_PM1A_EVT_BLK_ADDRESS: u32 = 8000;
pub const ACPI_PM1A_CNT_BLK_ADDRESS: u32 = 8004;
pub const ACPI_PM_TMR_BLK_ADDRESS: u32 = 8008;
pub const ACPI_GPE0_BLK_ADDRESS: u32 = 8040;
pub const ACPI_GPE0_BLK_LEN: u32 = 8;
pub const _STDIO_H: u32 = 1;
pub const XENFEAT_writable_page_tables: u32 = 0;
pub const XENFEAT_writable_descriptor_tables: u32 = 1;
pub const XENFEAT_auto_translated_physmap: u32 = 2;
pub const XENFEAT_supervisor_mode_kernel: u32 = 3;
pub const XENFEAT_pae_pgdir_above_4gb: u32 = 4;
pub const XENFEAT_mmu_pt_update_preserve_ad: u32 = 5;
pub const XENFEAT_highmem_assist: u32 = 6;
pub const XENFEAT_gnttab_map_avail_bits: u32 = 7;
pub const XENFEAT_hvm_callback_vector: u32 = 8;
pub const XENFEAT_hvm_safe_pvclock: u32 = 9;
pub const XENFEAT_hvm_pirqs: u32 = 10;
pub const XENFEAT_dom0: u32 = 11;
pub const XENFEAT_memory_op_vnode_supported: u32 = 13;
pub const XENFEAT_ARM_SMCCC_supported: u32 = 14;
pub const XENFEAT_linux_rsdp_unrestricted: u32 = 15;
pub const XENFEAT_not_direct_mapped: u32 = 16;
pub const XENFEAT_direct_mapped: u32 = 17;
pub const XENFEAT_NR_SUBMAPS: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const __WORDSIZE32_SIZE_ULONG: u32 = 0;
pub const __WORDSIZE32_PTRDIFF_LONG: u32 = 0;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __TIMESIZE: u32 = 32;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 0;
pub const __STATFS_MATCHES_STATFS64: u32 = 0;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const FOPEN_MAX: u32 = 16;
pub const XEN_SYSCTL_INTERFACE_VERSION: u32 = 21;
pub const XEN_SYSCTL_TBUFOP_get_info: u32 = 0;
pub const XEN_SYSCTL_TBUFOP_set_cpu_mask: u32 = 1;
pub const XEN_SYSCTL_TBUFOP_set_evt_mask: u32 = 2;
pub const XEN_SYSCTL_TBUFOP_set_size: u32 = 3;
pub const XEN_SYSCTL_TBUFOP_enable: u32 = 4;
pub const XEN_SYSCTL_TBUFOP_disable: u32 = 5;
pub const _XEN_SYSCTL_PHYSCAP_hvm: u32 = 0;
pub const XEN_SYSCTL_PHYSCAP_hvm: u32 = 1;
pub const _XEN_SYSCTL_PHYSCAP_pv: u32 = 1;
pub const XEN_SYSCTL_PHYSCAP_pv: u32 = 2;
pub const _XEN_SYSCTL_PHYSCAP_directio: u32 = 2;
pub const XEN_SYSCTL_PHYSCAP_directio: u32 = 4;
pub const _XEN_SYSCTL_PHYSCAP_hap: u32 = 3;
pub const XEN_SYSCTL_PHYSCAP_hap: u32 = 8;
pub const _XEN_SYSCTL_PHYSCAP_shadow: u32 = 4;
pub const XEN_SYSCTL_PHYSCAP_shadow: u32 = 16;
pub const _XEN_SYSCTL_PHYSCAP_iommu_hap_pt_share: u32 = 5;
pub const XEN_SYSCTL_PHYSCAP_iommu_hap_pt_share: u32 = 32;
pub const XEN_SYSCTL_PHYSCAP_vmtrace: u32 = 64;
pub const XEN_SYSCTL_PHYSCAP_vpmu: u32 = 128;
pub const XEN_SYSCTL_PHYSCAP_gnttab_v1: u32 = 256;
pub const XEN_SYSCTL_PHYSCAP_gnttab_v2: u32 = 512;
pub const XEN_SYSCTL_PHYSCAP_MAX: u32 = 512;
pub const XEN_SYSCTL_PHYSCAP_X86_ASSISTED_XAPIC: u32 = 1;
pub const XEN_SYSCTL_PHYSCAP_X86_ASSISTED_X2APIC: u32 = 2;
pub const XEN_SYSCTL_PHYSCAP_X86_MAX: u32 = 2;
pub const XEN_SYSCTL_PERFCOP_reset: u32 = 1;
pub const XEN_SYSCTL_PERFCOP_query: u32 = 2;
pub const PMSTAT_CATEGORY_MASK: u32 = 240;
pub const PMSTAT_PX: u32 = 16;
pub const PMSTAT_CX: u32 = 32;
pub const PMSTAT_get_max_px: u32 = 17;
pub const PMSTAT_get_pxstat: u32 = 18;
pub const PMSTAT_reset_pxstat: u32 = 19;
pub const PMSTAT_get_max_cx: u32 = 33;
pub const PMSTAT_get_cxstat: u32 = 34;
pub const PMSTAT_reset_cxstat: u32 = 35;
pub const XEN_SYSCTL_CPU_HOTPLUG_ONLINE: u32 = 0;
pub const XEN_SYSCTL_CPU_HOTPLUG_OFFLINE: u32 = 1;
pub const XEN_SYSCTL_CPU_HOTPLUG_SMT_ENABLE: u32 = 2;
pub const XEN_SYSCTL_CPU_HOTPLUG_SMT_DISABLE: u32 = 3;
pub const CPUFREQ_NAME_LEN: u32 = 16;
pub const SCALING_MAX_FREQ: u32 = 1;
pub const SCALING_MIN_FREQ: u32 = 2;
pub const SCALING_SETSPEED: u32 = 3;
pub const SAMPLING_RATE: u32 = 4;
pub const UP_THRESHOLD: u32 = 5;
pub const PM_PARA_CATEGORY_MASK: u32 = 240;
pub const CPUFREQ_PARA: u32 = 16;
pub const GET_CPUFREQ_PARA: u32 = 17;
pub const SET_CPUFREQ_GOV: u32 = 18;
pub const SET_CPUFREQ_PARA: u32 = 19;
pub const GET_CPUFREQ_AVGFREQ: u32 = 20;
pub const XEN_SYSCTL_pm_op_set_sched_opt_smt: u32 = 33;
pub const XEN_SYSCTL_pm_op_get_max_cstate: u32 = 34;
pub const XEN_SYSCTL_pm_op_set_max_cstate: u32 = 35;
pub const XEN_SYSCTL_pm_op_set_vcpu_migration_delay: u32 = 36;
pub const XEN_SYSCTL_pm_op_get_vcpu_migration_delay: u32 = 37;
pub const XEN_SYSCTL_pm_op_enable_turbo: u32 = 38;
pub const XEN_SYSCTL_pm_op_disable_turbo: u32 = 39;
pub const XEN_SYSCTL_CX_UNLIMITED: u32 = 4294967295;
pub const sysctl_page_offline: u32 = 1;
pub const sysctl_page_online: u32 = 2;
pub const sysctl_query_page_offline: u32 = 3;
pub const PG_OFFLINE_STATUS_MASK: u32 = 255;
pub const PG_OFFLINE_INVALID: u32 = 1;
pub const PG_OFFLINE_OFFLINED: u32 = 2;
pub const PG_OFFLINE_PENDING: u32 = 4;
pub const PG_OFFLINE_FAILED: u32 = 8;
pub const PG_OFFLINE_AGAIN: u32 = 16;
pub const PG_ONLINE_FAILED: u32 = 8;
pub const PG_ONLINE_ONLINED: u32 = 2;
pub const PG_OFFLINE_STATUS_OFFLINED: u32 = 2;
pub const PG_OFFLINE_STATUS_ONLINE: u32 = 4;
pub const PG_OFFLINE_STATUS_OFFLINE_PENDING: u32 = 8;
pub const PG_OFFLINE_STATUS_BROKEN: u32 = 16;
pub const PG_OFFLINE_MISC_MASK: u32 = 4080;
pub const PG_OFFLINE_XENPAGE: u32 = 256;
pub const PG_OFFLINE_DOM0PAGE: u32 = 512;
pub const PG_OFFLINE_ANONYMOUS: u32 = 1024;
pub const PG_OFFLINE_NOT_CONV_RAM: u32 = 2048;
pub const PG_OFFLINE_OWNED: u32 = 4096;
pub const PG_OFFLINE_BROKEN: u32 = 8192;
pub const PG_ONLINE_BROKEN: u32 = 8192;
pub const PG_OFFLINE_OWNER_SHIFT: u32 = 16;
pub const XEN_SYSCTL_LOCKPROF_reset: u32 = 1;
pub const XEN_SYSCTL_LOCKPROF_query: u32 = 2;
pub const LOCKPROF_TYPE_GLOBAL: u32 = 0;
pub const LOCKPROF_TYPE_PERDOM: u32 = 1;
pub const LOCKPROF_TYPE_N: u32 = 2;
pub const XEN_INVALID_CORE_ID: i32 = -1;
pub const XEN_INVALID_SOCKET_ID: i32 = -1;
pub const XEN_INVALID_NODE_ID: i32 = -1;
pub const XEN_INVALID_MEM_SZ: i32 = -1;
pub const XEN_INVALID_NODE_DIST: i32 = -1;
pub const XEN_SYSCTL_CPUPOOL_OP_CREATE: u32 = 1;
pub const XEN_SYSCTL_CPUPOOL_OP_DESTROY: u32 = 2;
pub const XEN_SYSCTL_CPUPOOL_OP_INFO: u32 = 3;
pub const XEN_SYSCTL_CPUPOOL_OP_ADDCPU: u32 = 4;
pub const XEN_SYSCTL_CPUPOOL_OP_RMCPU: u32 = 5;
pub const XEN_SYSCTL_CPUPOOL_OP_MOVEDOMAIN: u32 = 6;
pub const XEN_SYSCTL_CPUPOOL_OP_FREEINFO: u32 = 7;
pub const XEN_SYSCTL_CPUPOOL_PAR_ANY: u32 = 4294967295;
pub const ARINC653_MAX_DOMAINS_PER_SCHEDULE: u32 = 64;
pub const XEN_SYSCTL_SCHED_RATELIMIT_MAX: u32 = 500000;
pub const XEN_SYSCTL_SCHED_RATELIMIT_MIN: u32 = 100;
pub const XEN_SYSCTL_CSCHED_TSLICE_MAX: u32 = 1000;
pub const XEN_SYSCTL_CSCHED_TSLICE_MIN: u32 = 1;
pub const XEN_SYSCTL_CSCHED_MGR_DLY_MAX_US: u32 = 100000;
pub const XEN_SYSCTL_SCHEDOP_putinfo: u32 = 0;
pub const XEN_SYSCTL_SCHEDOP_getinfo: u32 = 1;
pub const XEN_GCOV_FORMAT_MAGIC: u32 = 1480806230;
pub const XEN_SYSCTL_COVERAGE_get_size: u32 = 0;
pub const XEN_SYSCTL_COVERAGE_read: u32 = 1;
pub const XEN_SYSCTL_COVERAGE_reset: u32 = 2;
pub const XEN_SYSCTL_PSR_CMT_get_total_rmid: u32 = 0;
pub const XEN_SYSCTL_PSR_CMT_get_l3_upscaling_factor: u32 = 1;
pub const XEN_SYSCTL_PSR_CMT_get_l3_cache_size: u32 = 2;
pub const XEN_SYSCTL_PSR_CMT_enabled: u32 = 3;
pub const XEN_SYSCTL_PSR_CMT_get_l3_event_mask: u32 = 4;
pub const XEN_INVALID_DEV: i32 = -2;
pub const XEN_SYSCTL_PSR_get_l3_info: u32 = 0;
pub const XEN_SYSCTL_PSR_get_l2_info: u32 = 1;
pub const XEN_SYSCTL_PSR_get_mba_info: u32 = 2;
pub const XEN_SYSCTL_PSR_CAT_L3_CDP: u32 = 1;
pub const XEN_SYSCTL_PSR_MBA_LINEAR: u32 = 1;
pub const XEN_SYSCTL_CPU_LEVELCAP_faulting: u32 = 1;
pub const XEN_SYSCTL_CPU_LEVELCAP_ecx: u32 = 2;
pub const XEN_SYSCTL_CPU_LEVELCAP_edx: u32 = 4;
pub const XEN_SYSCTL_CPU_LEVELCAP_extd_ecx: u32 = 8;
pub const XEN_SYSCTL_CPU_LEVELCAP_extd_edx: u32 = 16;
pub const XEN_SYSCTL_CPU_LEVELCAP_xsave_eax: u32 = 32;
pub const XEN_SYSCTL_CPU_LEVELCAP_thermal_ecx: u32 = 64;
pub const XEN_SYSCTL_CPU_LEVELCAP_l7s0_eax: u32 = 128;
pub const XEN_SYSCTL_CPU_LEVELCAP_l7s0_ebx: u32 = 256;
pub const XEN_SYSCTL_cpu_featureset_raw: u32 = 0;
pub const XEN_SYSCTL_cpu_featureset_host: u32 = 1;
pub const XEN_SYSCTL_cpu_featureset_pv: u32 = 2;
pub const XEN_SYSCTL_cpu_featureset_hvm: u32 = 3;
pub const LIVEPATCH_PAYLOAD_VERSION: u32 = 2;
pub const XEN_LIVEPATCH_NAME_SIZE: u32 = 128;
pub const XEN_SYSCTL_LIVEPATCH_UPLOAD: u32 = 0;
pub const XEN_SYSCTL_LIVEPATCH_GET: u32 = 1;
pub const LIVEPATCH_STATE_CHECKED: u32 = 1;
pub const LIVEPATCH_STATE_APPLIED: u32 = 2;
pub const XEN_SYSCTL_LIVEPATCH_LIST: u32 = 2;
pub const XEN_SYSCTL_LIVEPATCH_ACTION: u32 = 3;
pub const LIVEPATCH_ACTION_UNLOAD: u32 = 1;
pub const LIVEPATCH_ACTION_REVERT: u32 = 2;
pub const LIVEPATCH_ACTION_APPLY: u32 = 3;
pub const LIVEPATCH_ACTION_REPLACE: u32 = 4;
pub const LIVEPATCH_ACTION_APPLY_NODEPS: u32 = 1;
pub const XEN_SYSCTL_readconsole: u32 = 1;
pub const XEN_SYSCTL_tbuf_op: u32 = 2;
pub const XEN_SYSCTL_physinfo: u32 = 3;
pub const XEN_SYSCTL_sched_id: u32 = 4;
pub const XEN_SYSCTL_perfc_op: u32 = 5;
pub const XEN_SYSCTL_getdomaininfolist: u32 = 6;
pub const XEN_SYSCTL_debug_keys: u32 = 7;
pub const XEN_SYSCTL_getcpuinfo: u32 = 8;
pub const XEN_SYSCTL_availheap: u32 = 9;
pub const XEN_SYSCTL_get_pmstat: u32 = 10;
pub const XEN_SYSCTL_cpu_hotplug: u32 = 11;
pub const XEN_SYSCTL_pm_op: u32 = 12;
pub const XEN_SYSCTL_page_offline_op: u32 = 14;
pub const XEN_SYSCTL_lockprof_op: u32 = 15;
pub const XEN_SYSCTL_cputopoinfo: u32 = 16;
pub const XEN_SYSCTL_numainfo: u32 = 17;
pub const XEN_SYSCTL_cpupool_op: u32 = 18;
pub const XEN_SYSCTL_scheduler_op: u32 = 19;
pub const XEN_SYSCTL_coverage_op: u32 = 20;
pub const XEN_SYSCTL_psr_cmt_op: u32 = 21;
pub const XEN_SYSCTL_pcitopoinfo: u32 = 22;
pub const XEN_SYSCTL_psr_alloc: u32 = 23;
pub const XEN_SYSCTL_get_cpu_levelling_caps: u32 = 25;
pub const XEN_SYSCTL_get_cpu_featureset: u32 = 26;
pub const XEN_SYSCTL_livepatch_op: u32 = 27;
pub const XEN_SYSCTL_get_cpu_policy: u32 = 29;
pub const XENVER_version: u32 = 0;
pub const XENVER_extraversion: u32 = 1;
pub const XENVER_compile_info: u32 = 2;
pub const XENVER_capabilities: u32 = 3;
pub const XENVER_changeset: u32 = 4;
pub const XENVER_platform_parameters: u32 = 5;
pub const XENVER_get_features: u32 = 6;
pub const XENVER_pagesize: u32 = 7;
pub const XENVER_guest_handle: u32 = 8;
pub const XENVER_commandline: u32 = 9;
pub const XENVER_build_id: u32 = 10;
pub const SCHEDOP_yield: u32 = 0;
pub const SCHEDOP_block: u32 = 1;
pub const SCHEDOP_shutdown: u32 = 2;
pub const SCHEDOP_poll: u32 = 3;
pub const SCHEDOP_remote_shutdown: u32 = 4;
pub const SCHEDOP_shutdown_code: u32 = 5;
pub const SCHEDOP_watchdog: u32 = 6;
pub const SCHEDOP_pin_override: u32 = 7;
pub const SHUTDOWN_poweroff: u32 = 0;
pub const SHUTDOWN_reboot: u32 = 1;
pub const SHUTDOWN_suspend: u32 = 2;
pub const SHUTDOWN_crash: u32 = 3;
pub const SHUTDOWN_watchdog: u32 = 4;
pub const SHUTDOWN_soft_reset: u32 = 5;
pub const SHUTDOWN_MAX: u32 = 5;
pub const XEN_DMOP_create_ioreq_server: u32 = 1;
pub const XEN_DMOP_get_ioreq_server_info: u32 = 2;
pub const _XEN_DMOP_no_gfns: u32 = 0;
pub const XEN_DMOP_no_gfns: u32 = 1;
pub const XEN_DMOP_map_io_range_to_ioreq_server: u32 = 3;
pub const XEN_DMOP_unmap_io_range_from_ioreq_server: u32 = 4;
pub const XEN_DMOP_IO_RANGE_PORT: u32 = 0;
pub const XEN_DMOP_IO_RANGE_MEMORY: u32 = 1;
pub const XEN_DMOP_IO_RANGE_PCI: u32 = 2;
pub const XEN_DMOP_set_ioreq_server_state: u32 = 5;
pub const XEN_DMOP_destroy_ioreq_server: u32 = 6;
pub const XEN_DMOP_track_dirty_vram: u32 = 7;
pub const XEN_DMOP_set_pci_intx_level: u32 = 8;
pub const XEN_DMOP_set_isa_irq_level: u32 = 9;
pub const XEN_DMOP_set_pci_link_route: u32 = 10;
pub const XEN_DMOP_modified_memory: u32 = 11;
pub const XEN_DMOP_set_mem_type: u32 = 12;
pub const XEN_DMOP_inject_event: u32 = 13;
pub const XEN_DMOP_EVENT_ext_int: u32 = 0;
pub const XEN_DMOP_EVENT_nmi: u32 = 2;
pub const XEN_DMOP_EVENT_hw_exc: u32 = 3;
pub const XEN_DMOP_EVENT_sw_int: u32 = 4;
pub const XEN_DMOP_EVENT_pri_sw_exc: u32 = 5;
pub const XEN_DMOP_EVENT_sw_exc: u32 = 6;
pub const XEN_DMOP_inject_msi: u32 = 14;
pub const XEN_DMOP_map_mem_type_to_ioreq_server: u32 = 15;
pub const XEN_DMOP_IOREQ_MEM_ACCESS_READ: u32 = 1;
pub const XEN_DMOP_IOREQ_MEM_ACCESS_WRITE: u32 = 2;
pub const XEN_DMOP_remote_shutdown: u32 = 16;
pub const XEN_DMOP_relocate_memory: u32 = 17;
pub const XEN_DMOP_pin_memory_cacheattr: u32 = 18;
pub const XEN_DMOP_MEM_CACHEATTR_UC: u32 = 0;
pub const XEN_DMOP_MEM_CACHEATTR_WC: u32 = 1;
pub const XEN_DMOP_MEM_CACHEATTR_WT: u32 = 4;
pub const XEN_DMOP_MEM_CACHEATTR_WP: u32 = 5;
pub const XEN_DMOP_MEM_CACHEATTR_WB: u32 = 6;
pub const XEN_DMOP_MEM_CACHEATTR_UCM: u32 = 7;
pub const XEN_DMOP_set_irq_level: u32 = 19;
pub const XEN_DMOP_nr_vcpus: u32 = 20;
pub const TRACE_EXTRA_MAX: u32 = 7;
pub const TRACE_EXTRA_SHIFT: u32 = 28;
pub const TRC_CLS_SHIFT: u32 = 16;
pub const TRC_GEN: u32 = 126976;
pub const TRC_SCHED: u32 = 192512;
pub const TRC_DOM0OP: u32 = 323584;
pub const TRC_HVM: u32 = 585728;
pub const TRC_MEM: u32 = 1110016;
pub const TRC_PV: u32 = 2158592;
pub const TRC_SHADOW: u32 = 4255744;
pub const TRC_HW: u32 = 8450048;
pub const TRC_GUEST: u32 = 134279168;
pub const TRC_ALL: u32 = 268431360;
pub const TRC_HD_CYCLE_FLAG: u32 = 2147483648;
pub const TRC_SUBCLS_SHIFT: u32 = 12;
pub const TRC_HVM_ENTRYEXIT: u32 = 528384;
pub const TRC_HVM_HANDLER: u32 = 532480;
pub const TRC_HVM_EMUL: u32 = 540672;
pub const TRC_SCHED_MIN: u32 = 135168;
pub const TRC_SCHED_CLASS: u32 = 139264;
pub const TRC_SCHED_VERBOSE: u32 = 163840;
pub const TRC_SCHED_ID_BITS: u32 = 3;
pub const TRC_SCHED_ID_SHIFT: u32 = 9;
pub const TRC_SCHED_ID_MASK: u32 = 3584;
pub const TRC_SCHED_EVT_MASK: i32 = -3585;
pub const TRC_SCHED_CSCHED: u32 = 0;
pub const TRC_SCHED_CSCHED2: u32 = 1;
pub const TRC_SCHED_ARINC653: u32 = 3;
pub const TRC_SCHED_RTDS: u32 = 4;
pub const TRC_SCHED_SNULL: u32 = 5;
pub const TRC_DOM0_DOMOPS: u32 = 266240;
pub const TRC_HW_PM: u32 = 8392704;
pub const TRC_HW_IRQ: u32 = 8396800;
pub const TRC_LOST_RECORDS: u32 = 126977;
pub const TRC_TRACE_WRAP_BUFFER: u32 = 126978;
pub const TRC_TRACE_CPU_CHANGE: u32 = 126979;
pub const TRC_SCHED_RUNSTATE_CHANGE: u32 = 135169;
pub const TRC_SCHED_CONTINUE_RUNNING: u32 = 135170;
pub const TRC_SCHED_DOM_ADD: u32 = 163841;
pub const TRC_SCHED_DOM_REM: u32 = 163842;
pub const TRC_SCHED_SLEEP: u32 = 163843;
pub const TRC_SCHED_WAKE: u32 = 163844;
pub const TRC_SCHED_YIELD: u32 = 163845;
pub const TRC_SCHED_BLOCK: u32 = 163846;
pub const TRC_SCHED_SHUTDOWN: u32 = 163847;
pub const TRC_SCHED_CTL: u32 = 163848;
pub const TRC_SCHED_ADJDOM: u32 = 163849;
pub const TRC_SCHED_SWITCH: u32 = 163850;
pub const TRC_SCHED_S_TIMER_FN: u32 = 163851;
pub const TRC_SCHED_T_TIMER_FN: u32 = 163852;
pub const TRC_SCHED_DOM_TIMER_FN: u32 = 163853;
pub const TRC_SCHED_SWITCH_INFPREV: u32 = 163854;
pub const TRC_SCHED_SWITCH_INFNEXT: u32 = 163855;
pub const TRC_SCHED_SHUTDOWN_CODE: u32 = 163856;
pub const TRC_SCHED_SWITCH_INFCONT: u32 = 163857;
pub const TRC_DOM0_DOM_ADD: u32 = 266241;
pub const TRC_DOM0_DOM_REM: u32 = 266242;
pub const TRC_MEM_PAGE_GRANT_MAP: u32 = 1110017;
pub const TRC_MEM_PAGE_GRANT_UNMAP: u32 = 1110018;
pub const TRC_MEM_PAGE_GRANT_TRANSFER: u32 = 1110019;
pub const TRC_MEM_SET_P2M_ENTRY: u32 = 1110020;
pub const TRC_MEM_DECREASE_RESERVATION: u32 = 1110021;
pub const TRC_MEM_POD_POPULATE: u32 = 1110032;
pub const TRC_MEM_POD_ZERO_RECLAIM: u32 = 1110033;
pub const TRC_MEM_POD_SUPERPAGE_SPLINTER: u32 = 1110034;
pub const TRC_PV_ENTRY: u32 = 2101248;
pub const TRC_PV_SUBCALL: u32 = 2105344;
pub const TRC_PV_HYPERCALL: u32 = 2101249;
pub const TRC_PV_TRAP: u32 = 2101251;
pub const TRC_PV_PAGE_FAULT: u32 = 2101252;
pub const TRC_PV_FORCED_INVALID_OP: u32 = 2101253;
pub const TRC_PV_EMULATE_PRIVOP: u32 = 2101254;
pub const TRC_PV_EMULATE_4GB: u32 = 2101255;
pub const TRC_PV_MATH_STATE_RESTORE: u32 = 2101256;
pub const TRC_PV_PAGING_FIXUP: u32 = 2101257;
pub const TRC_PV_GDT_LDT_MAPPING_FAULT: u32 = 2101258;
pub const TRC_PV_PTWR_EMULATION: u32 = 2101259;
pub const TRC_PV_PTWR_EMULATION_PAE: u32 = 2101260;
pub const TRC_PV_HYPERCALL_V2: u32 = 2101261;
pub const TRC_PV_HYPERCALL_SUBCALL: u32 = 2105358;
pub const TRC_PV_HYPERCALL_V2_ARG_MASK: u32 = 4293918720;
pub const TRC_SHADOW_NOT_SHADOW: u32 = 4255745;
pub const TRC_SHADOW_FAST_PROPAGATE: u32 = 4255746;
pub const TRC_SHADOW_FAST_MMIO: u32 = 4255747;
pub const TRC_SHADOW_FALSE_FAST_PATH: u32 = 4255748;
pub const TRC_SHADOW_MMIO: u32 = 4255749;
pub const TRC_SHADOW_FIXUP: u32 = 4255750;
pub const TRC_SHADOW_DOMF_DYING: u32 = 4255751;
pub const TRC_SHADOW_EMULATE: u32 = 4255752;
pub const TRC_SHADOW_EMULATE_UNSHADOW_USER: u32 = 4255753;
pub const TRC_SHADOW_EMULATE_UNSHADOW_EVTINJ: u32 = 4255754;
pub const TRC_SHADOW_EMULATE_UNSHADOW_UNHANDLED: u32 = 4255755;
pub const TRC_SHADOW_WRMAP_BF: u32 = 4255756;
pub const TRC_SHADOW_PREALLOC_UNPIN: u32 = 4255757;
pub const TRC_SHADOW_RESYNC_FULL: u32 = 4255758;
pub const TRC_SHADOW_RESYNC_ONLY: u32 = 4255759;
pub const TRC_HVM_NESTEDFLAG: u32 = 1024;
pub const TRC_HVM_VMENTRY: u32 = 528385;
pub const TRC_HVM_VMEXIT: u32 = 528386;
pub const TRC_HVM_PF_XEN: u32 = 532481;
pub const TRC_HVM_PF_INJECT: u32 = 532482;
pub const TRC_HVM_INJ_EXC: u32 = 532483;
pub const TRC_HVM_INJ_VIRQ: u32 = 532484;
pub const TRC_HVM_REINJ_VIRQ: u32 = 532485;
pub const TRC_HVM_IO_READ: u32 = 532486;
pub const TRC_HVM_IO_WRITE: u32 = 532487;
pub const TRC_HVM_CR_READ: u32 = 532488;
pub const TRC_HVM_CR_WRITE: u32 = 532489;
pub const TRC_HVM_DR_READ: u32 = 532490;
pub const TRC_HVM_DR_WRITE: u32 = 532491;
pub const TRC_HVM_MSR_READ: u32 = 532492;
pub const TRC_HVM_MSR_WRITE: u32 = 532493;
pub const TRC_HVM_CPUID: u32 = 532494;
pub const TRC_HVM_INTR: u32 = 532495;
pub const TRC_HVM_NMI: u32 = 532496;
pub const TRC_HVM_SMI: u32 = 532497;
pub const TRC_HVM_VMMCALL: u32 = 532498;
pub const TRC_HVM_HLT: u32 = 532499;
pub const TRC_HVM_INVLPG: u32 = 532500;
pub const TRC_HVM_MCE: u32 = 532501;
pub const TRC_HVM_IOPORT_READ: u32 = 532502;
pub const TRC_HVM_IOMEM_READ: u32 = 532503;
pub const TRC_HVM_CLTS: u32 = 532504;
pub const TRC_HVM_LMSW: u32 = 532505;
pub const TRC_HVM_RDTSC: u32 = 532506;
pub const TRC_HVM_INTR_WINDOW: u32 = 532512;
pub const TRC_HVM_NPF: u32 = 532513;
pub const TRC_HVM_REALMODE_EMULATE: u32 = 532514;
pub const TRC_HVM_TRAP: u32 = 532515;
pub const TRC_HVM_TRAP_DEBUG: u32 = 532516;
pub const TRC_HVM_VLAPIC: u32 = 532517;
pub const TRC_HVM_IOPORT_WRITE: u32 = 533014;
pub const TRC_HVM_IOMEM_WRITE: u32 = 533015;
pub const TRC_HVM_EMUL_HPET_START_TIMER: u32 = 540673;
pub const TRC_HVM_EMUL_PIT_START_TIMER: u32 = 540674;
pub const TRC_HVM_EMUL_RTC_START_TIMER: u32 = 540675;
pub const TRC_HVM_EMUL_LAPIC_START_TIMER: u32 = 540676;
pub const TRC_HVM_EMUL_HPET_STOP_TIMER: u32 = 540677;
pub const TRC_HVM_EMUL_PIT_STOP_TIMER: u32 = 540678;
pub const TRC_HVM_EMUL_RTC_STOP_TIMER: u32 = 540679;
pub const TRC_HVM_EMUL_LAPIC_STOP_TIMER: u32 = 540680;
pub const TRC_HVM_EMUL_PIT_TIMER_CB: u32 = 540681;
pub const TRC_HVM_EMUL_LAPIC_TIMER_CB: u32 = 540682;
pub const TRC_HVM_EMUL_PIC_INT_OUTPUT: u32 = 540683;
pub const TRC_HVM_EMUL_PIC_KICK: u32 = 540684;
pub const TRC_HVM_EMUL_PIC_INTACK: u32 = 540685;
pub const TRC_HVM_EMUL_PIC_POSEDGE: u32 = 540686;
pub const TRC_HVM_EMUL_PIC_NEGEDGE: u32 = 540687;
pub const TRC_HVM_EMUL_PIC_PEND_IRQ_CALL: u32 = 540688;
pub const TRC_HVM_EMUL_LAPIC_PIC_INTR: u32 = 540689;
pub const TRC_PM_FREQ_CHANGE: u32 = 8392705;
pub const TRC_PM_IDLE_ENTRY: u32 = 8392706;
pub const TRC_PM_IDLE_EXIT: u32 = 8392707;
pub const TRC_HW_IRQ_MOVE_CLEANUP_DELAY: u32 = 8396801;
pub const TRC_HW_IRQ_MOVE_CLEANUP: u32 = 8396802;
pub const TRC_HW_IRQ_BIND_VECTOR: u32 = 8396803;
pub const TRC_HW_IRQ_CLEAR_VECTOR: u32 = 8396804;
pub const TRC_HW_IRQ_MOVE_FINISH: u32 = 8396805;
pub const TRC_HW_IRQ_ASSIGN_VECTOR: u32 = 8396806;
pub const TRC_HW_IRQ_UNMAPPED_VECTOR: u32 = 8396807;
pub const TRC_HW_IRQ_HANDLED: u32 = 8396808;
pub const TRC_64_FLAG: u32 = 256;
pub const HVMOP_set_param: u32 = 0;
pub const HVMOP_get_param: u32 = 1;
pub const HVMOP_flush_tlbs: u32 = 5;
pub const HVMOP_pagetable_dying: u32 = 9;
pub const HVMOP_get_time: u32 = 10;
pub const HVMOP_xentrace: u32 = 11;
pub const HVMOP_set_mem_access: u32 = 12;
pub const HVMOP_get_mem_access: u32 = 13;
pub const HVMOP_get_mem_type: u32 = 15;
pub const HVM_IOREQSRV_BUFIOREQ_OFF: u32 = 0;
pub const HVM_IOREQSRV_BUFIOREQ_LEGACY: u32 = 1;
pub const HVM_IOREQSRV_BUFIOREQ_ATOMIC: u32 = 2;
pub const HVMOP_guest_request_vm_event: u32 = 24;
pub const HVMOP_altp2m: u32 = 25;
pub const HVMOP_ALTP2M_INTERFACE_VERSION: u32 = 1;
pub const HVMOP_altp2m_get_domain_state: u32 = 1;
pub const HVMOP_altp2m_set_domain_state: u32 = 2;
pub const HVMOP_altp2m_vcpu_enable_notify: u32 = 3;
pub const HVMOP_altp2m_create_p2m: u32 = 4;
pub const HVMOP_altp2m_destroy_p2m: u32 = 5;
pub const HVMOP_altp2m_switch_p2m: u32 = 6;
pub const HVMOP_altp2m_set_mem_access: u32 = 7;
pub const HVMOP_altp2m_change_gfn: u32 = 8;
pub const HVMOP_altp2m_set_mem_access_multi: u32 = 9;
pub const HVMOP_altp2m_set_suppress_ve: u32 = 10;
pub const HVMOP_altp2m_get_suppress_ve: u32 = 11;
pub const HVMOP_altp2m_get_mem_access: u32 = 12;
pub const HVMOP_altp2m_vcpu_disable_notify: u32 = 13;
pub const HVMOP_altp2m_get_p2m_idx: u32 = 14;
pub const HVMOP_altp2m_set_suppress_ve_multi: u32 = 15;
pub const HVMOP_altp2m_set_visibility: u32 = 16;
pub const HVM_PARAM_PAE_ENABLED: u32 = 4;
pub const HVM_PARAM_DM_DOMAIN: u32 = 13;
pub const HVM_PARAM_MEMORY_EVENT_CR0: u32 = 20;
pub const HVM_PARAM_MEMORY_EVENT_CR3: u32 = 21;
pub const HVM_PARAM_MEMORY_EVENT_CR4: u32 = 22;
pub const HVM_PARAM_MEMORY_EVENT_INT3: u32 = 23;
pub const HVM_PARAM_NESTEDHVM: u32 = 24;
pub const HVM_PARAM_MEMORY_EVENT_SINGLE_STEP: u32 = 25;
pub const HVM_PARAM_BUFIOREQ_EVTCHN: u32 = 26;
pub const HVM_PARAM_MEMORY_EVENT_MSR: u32 = 30;
pub const HVM_PARAM_CALLBACK_IRQ: u32 = 0;
pub const HVM_PARAM_CALLBACK_TYPE_GSI: u32 = 0;
pub const HVM_PARAM_CALLBACK_TYPE_PCI_INTX: u32 = 1;
pub const HVM_PARAM_CALLBACK_TYPE_PPI: u32 = 2;
pub const HVM_PARAM_CALLBACK_TYPE_PPI_FLAG_MASK: u32 = 65280;
pub const HVM_PARAM_CALLBACK_TYPE_PPI_FLAG_LOW_LEVEL: u32 = 2;
pub const HVM_PARAM_STORE_PFN: u32 = 1;
pub const HVM_PARAM_STORE_EVTCHN: u32 = 2;
pub const HVM_PARAM_IOREQ_PFN: u32 = 5;
pub const HVM_PARAM_BUFIOREQ_PFN: u32 = 6;
pub const HVM_PARAM_TIMER_MODE: u32 = 10;
pub const HVMPTM_delay_for_missed_ticks: u32 = 0;
pub const HVMPTM_no_delay_for_missed_ticks: u32 = 1;
pub const HVMPTM_no_missed_ticks_pending: u32 = 2;
pub const HVMPTM_one_missed_tick_pending: u32 = 3;
pub const HVM_PARAM_HPET_ENABLED: u32 = 11;
pub const HVM_PARAM_IDENT_PT: u32 = 12;
pub const HVM_PARAM_ACPI_S_STATE: u32 = 14;
pub const HVM_PARAM_VM86_TSS: u32 = 15;
pub const HVM_PARAM_VPT_ALIGN: u32 = 16;
pub const HVM_PARAM_CONSOLE_PFN: u32 = 17;
pub const HVM_PARAM_CONSOLE_EVTCHN: u32 = 18;
pub const HVM_PARAM_ACPI_IOPORTS_LOCATION: u32 = 19;
pub const HVM_PARAM_PAGING_RING_PFN: u32 = 27;
pub const HVM_PARAM_MONITOR_RING_PFN: u32 = 28;
pub const HVM_PARAM_SHARING_RING_PFN: u32 = 29;
pub const HVM_PARAM_TRIPLE_FAULT_REASON: u32 = 31;
pub const HVM_PARAM_IOREQ_SERVER_PFN: u32 = 32;
pub const HVM_PARAM_NR_IOREQ_SERVER_PAGES: u32 = 33;
pub const HVM_PARAM_VM_GENERATION_ID_ADDR: u32 = 34;
pub const HVM_PARAM_ALTP2M: u32 = 35;
pub const XEN_ALTP2M_disabled: u32 = 0;
pub const XEN_ALTP2M_mixed: u32 = 1;
pub const XEN_ALTP2M_external: u32 = 2;
pub const XEN_ALTP2M_limited: u32 = 3;
pub const HVM_PARAM_X87_FIP_WIDTH: u32 = 36;
pub const HVM_PARAM_VM86_TSS_SIZED: u32 = 37;
pub const HVM_PARAM_MCA_CAP: u32 = 38;
pub const HVM_NR_PARAMS: u32 = 39;
pub const XEN_FLASK_INTERFACE_VERSION: u32 = 1;
pub const FLASK_LOAD: u32 = 1;
pub const FLASK_GETENFORCE: u32 = 2;
pub const FLASK_SETENFORCE: u32 = 3;
pub const FLASK_CONTEXT_TO_SID: u32 = 4;
pub const FLASK_SID_TO_CONTEXT: u32 = 5;
pub const FLASK_ACCESS: u32 = 6;
pub const FLASK_CREATE: u32 = 7;
pub const FLASK_RELABEL: u32 = 8;
pub const FLASK_USER: u32 = 9;
pub const FLASK_POLICYVERS: u32 = 10;
pub const FLASK_GETBOOL: u32 = 11;
pub const FLASK_SETBOOL: u32 = 12;
pub const FLASK_COMMITBOOLS: u32 = 13;
pub const FLASK_MLS: u32 = 14;
pub const FLASK_DISABLE: u32 = 15;
pub const FLASK_GETAVC_THRESHOLD: u32 = 16;
pub const FLASK_SETAVC_THRESHOLD: u32 = 17;
pub const FLASK_AVC_HASHSTATS: u32 = 18;
pub const FLASK_AVC_CACHESTATS: u32 = 19;
pub const FLASK_MEMBER: u32 = 20;
pub const FLASK_ADD_OCONTEXT: u32 = 21;
pub const FLASK_DEL_OCONTEXT: u32 = 22;
pub const FLASK_GET_PEER_SID: u32 = 23;
pub const FLASK_RELABEL_DOMAIN: u32 = 24;
pub const FLASK_DEVICETREE_LABEL: u32 = 25;
pub const KEXEC_TYPE_DEFAULT: u32 = 0;
pub const KEXEC_TYPE_CRASH: u32 = 1;
pub const KEXEC_CMD_kexec: u32 = 0;
pub const KEXEC_CMD_kexec_load_v1: u32 = 1;
pub const KEXEC_CMD_kexec_unload_v1: u32 = 2;
pub const KEXEC_RANGE_MA_CRASH: u32 = 0;
pub const KEXEC_RANGE_MA_XEN: u32 = 1;
pub const KEXEC_RANGE_MA_CPU: u32 = 2;
pub const KEXEC_RANGE_MA_XENHEAP: u32 = 3;
pub const KEXEC_RANGE_MA_BOOT_PARAM: u32 = 4;
pub const KEXEC_RANGE_MA_EFI_MEMMAP: u32 = 5;
pub const KEXEC_RANGE_MA_VMCOREINFO: u32 = 6;
pub const KEXEC_CMD_kexec_get_range: u32 = 3;
pub const KEXEC_CMD_kexec_load: u32 = 4;
pub const KEXEC_CMD_kexec_unload: u32 = 5;
pub const KEXEC_CMD_kexec_status: u32 = 6;
pub const XENPF_INTERFACE_VERSION: u32 = 50331649;
pub const XENPF_settime32: u32 = 17;
pub const XENPF_settime64: u32 = 62;
pub const XENPF_settime: u32 = 62;
pub const XENPF_add_memtype: u32 = 31;
pub const XENPF_del_memtype: u32 = 32;
pub const XENPF_read_memtype: u32 = 33;
pub const XENPF_microcode_update: u32 = 35;
pub const XENPF_platform_quirk: u32 = 39;
pub const QUIRK_NOIRQBALANCING: u32 = 1;
pub const QUIRK_IOAPIC_BAD_REGSEL: u32 = 2;
pub const QUIRK_IOAPIC_GOOD_REGSEL: u32 = 3;
pub const XENPF_efi_runtime_call: u32 = 49;
pub const XEN_EFI_get_time: u32 = 1;
pub const XEN_EFI_set_time: u32 = 2;
pub const XEN_EFI_get_wakeup_time: u32 = 3;
pub const XEN_EFI_set_wakeup_time: u32 = 4;
pub const XEN_EFI_get_next_high_monotonic_count: u32 = 5;
pub const XEN_EFI_get_variable: u32 = 6;
pub const XEN_EFI_set_variable: u32 = 7;
pub const XEN_EFI_get_next_variable_name: u32 = 8;
pub const XEN_EFI_query_variable_info: u32 = 9;
pub const XEN_EFI_query_capsule_capabilities: u32 = 10;
pub const XEN_EFI_update_capsule: u32 = 11;
pub const XEN_EFI_GET_TIME_SET_CLEARS_NS: u32 = 1;
pub const XEN_EFI_GET_WAKEUP_TIME_ENABLED: u32 = 1;
pub const XEN_EFI_GET_WAKEUP_TIME_PENDING: u32 = 2;
pub const XEN_EFI_SET_WAKEUP_TIME_ENABLE: u32 = 1;
pub const XEN_EFI_SET_WAKEUP_TIME_ENABLE_ONLY: u32 = 2;
pub const XEN_EFI_VARIABLE_NON_VOLATILE: u32 = 1;
pub const XEN_EFI_VARIABLE_BOOTSERVICE_ACCESS: u32 = 2;
pub const XEN_EFI_VARIABLE_RUNTIME_ACCESS: u32 = 4;
pub const XEN_EFI_VARINFO_BOOT_SNAPSHOT: u32 = 1;
pub const XENPF_firmware_info: u32 = 50;
pub const XEN_FW_DISK_INFO: u32 = 1;
pub const XEN_FW_DISK_MBR_SIGNATURE: u32 = 2;
pub const XEN_FW_VBEDDC_INFO: u32 = 3;
pub const XEN_FW_EFI_INFO: u32 = 4;
pub const XEN_FW_EFI_VERSION: u32 = 0;
pub const XEN_FW_EFI_CONFIG_TABLE: u32 = 1;
pub const XEN_FW_EFI_VENDOR: u32 = 2;
pub const XEN_FW_EFI_MEM_INFO: u32 = 3;
pub const XEN_FW_EFI_RT_VERSION: u32 = 4;
pub const XEN_FW_EFI_PCI_ROM: u32 = 5;
pub const XEN_FW_EFI_APPLE_PROPERTIES: u32 = 6;
pub const XEN_FW_KBD_SHIFT_FLAGS: u32 = 5;
pub const XENPF_enter_acpi_sleep: u32 = 51;
pub const XENPF_ACPI_SLEEP_EXTENDED: u32 = 1;
pub const XENPF_change_freq: u32 = 52;
pub const XENPF_getidletime: u32 = 53;
pub const XENPF_set_processor_pminfo: u32 = 54;
pub const XEN_PROCESSOR_PM_CX: u32 = 1;
pub const XEN_PROCESSOR_PM_PX: u32 = 2;
pub const XEN_PROCESSOR_PM_TX: u32 = 4;
pub const XEN_PM_CX: u32 = 0;
pub const XEN_PM_PX: u32 = 1;
pub const XEN_PM_TX: u32 = 2;
pub const XEN_PM_PDC: u32 = 3;
pub const XEN_PX_PCT: u32 = 1;
pub const XEN_PX_PSS: u32 = 2;
pub const XEN_PX_PPC: u32 = 4;
pub const XEN_PX_PSD: u32 = 8;
pub const XEN_CPUPERF_SHARED_TYPE_HW: u32 = 1;
pub const XEN_CPUPERF_SHARED_TYPE_ALL: u32 = 2;
pub const XEN_CPUPERF_SHARED_TYPE_ANY: u32 = 3;
pub const XENPF_get_cpuinfo: u32 = 55;
pub const XEN_PCPU_FLAGS_ONLINE: u32 = 1;
pub const XEN_PCPU_FLAGS_INVALID: u32 = 2;
pub const XENPF_get_cpu_version: u32 = 48;
pub const XENPF_cpu_online: u32 = 56;
pub const XENPF_cpu_offline: u32 = 57;
pub const XENPF_cpu_hotadd: u32 = 58;
pub const XENPF_mem_hotadd: u32 = 59;
pub const XENPF_core_parking: u32 = 60;
pub const XEN_CORE_PARKING_SET: u32 = 1;
pub const XEN_CORE_PARKING_GET: u32 = 2;
pub const XENPF_resource_op: u32 = 61;
pub const XEN_RESOURCE_OP_MSR_READ: u32 = 0;
pub const XEN_RESOURCE_OP_MSR_WRITE: u32 = 1;
pub const XENPF_get_symbol: u32 = 63;
pub const XTL_STDIOSTREAM_SHOW_PID: u32 = 1;
pub const XTL_STDIOSTREAM_SHOW_DATE: u32 = 2;
pub const XTL_STDIOSTREAM_HIDE_PROGRESS: u32 = 4;
pub const XTL_STDIOSTREAM_PROGRESS_USE_CR: u32 = 8;
pub const XTL_STDIOSTREAM_PROGRESS_NO_CR: u32 = 16;
pub const XC_PAGE_SHIFT: u32 = 12;
pub const XC_PAGE_SIZE: u32 = 4096;
pub const XC_PAGE_MASK: i32 = -4096;
pub const INVALID_MFN: i32 = -1;
pub const XENCTRL_HAS_XC_INTERFACE: u32 = 1;
pub const XC_CORE_MAGIC: u32 = 4027575277;
pub const XC_CORE_MAGIC_HVM: u32 = 4027575278;
pub const XC_CPUPOOL_POOLID_ANY: u32 = 4294967295;
pub const XC_MAX_ERROR_MSG_LEN: u32 = 1024;
pub const GNTDEV_DMA_FLAG_WC: u32 = 1;
pub const GNTDEV_DMA_FLAG_COHERENT: u32 = 2;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const XS_WRITE_NONE: &[u8; 5usize] = b"NONE\0";
pub const XS_WRITE_CREATE: &[u8; 7usize] = b"CREATE\0";
pub const XS_WRITE_CREATE_EXCL: &[u8; 12usize] = b"CREATE|EXCL\0";
pub const XENSTORE_RING_SIZE: u32 = 1024;
pub const XENSTORE_PAYLOAD_MAX: u32 = 4096;
pub const XENSTORE_ABS_PATH_MAX: u32 = 3072;
pub const XENSTORE_REL_PATH_MAX: u32 = 2048;
pub const XENSTORE_SERVER_FEATURE_RECONNECTION: u32 = 1;
pub const XENSTORE_SERVER_FEATURE_ERROR: u32 = 2;
pub const XENSTORE_CONNECTED: u32 = 0;
pub const XENSTORE_RECONNECT: u32 = 1;
pub const XENSTORE_ERROR_NONE: u32 = 0;
pub const XENSTORE_ERROR_COMM: u32 = 1;
pub const XENSTORE_ERROR_RINGIDX: u32 = 2;
pub const XENSTORE_ERROR_PROTO: u32 = 3;
pub const XS_PERM_NONE: u32 = 0;
pub const XS_PERM_READ: u32 = 1;
pub const XS_PERM_WRITE: u32 = 2;
pub const XS_PERM_ENOENT_OK: u32 = 4;
pub const XS_PERM_OWNER: u32 = 8;
pub const XS_PERM_IGNORE: u32 = 16;
pub const XBT_NULL: u32 = 0;
pub const XS_OPEN_READONLY: u32 = 1;
pub const XS_OPEN_SOCKETONLY: u32 = 2;
pub const XS_UNWATCH_FILTER: u32 = 4;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_long;
pub type __u64 = ::std::os::raw::c_ulong;
pub type s8 = ::std::os::raw::c_schar;
pub type u8_ = ::std::os::raw::c_uchar;
pub type s16 = ::std::os::raw::c_short;
pub type u16_ = ::std::os::raw::c_ushort;
pub type s32 = ::std::os::raw::c_int;
pub type u32_ = ::std::os::raw::c_uint;
pub type s64 = ::std::os::raw::c_long;
pub type u64_ = ::std::os::raw::c_ulong;
pub type vaddr_t = u64_;
pub type paddr_t = u64_;
pub type register_t = u64_;
pub type size_t = ::std::os::raw::c_ulong;
pub type ssize_t = ::std::os::raw::c_long;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type bool_t = bool;
pub type xen_pfn_t = u64;
pub type xen_ulong_t = u64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vcpu_guest_core_regs {
    pub __bindgen_anon_1: vcpu_guest_core_regs__bindgen_ty_1,
    pub __bindgen_anon_2: vcpu_guest_core_regs__bindgen_ty_2,
    pub __bindgen_anon_3: vcpu_guest_core_regs__bindgen_ty_3,
    pub __bindgen_anon_4: vcpu_guest_core_regs__bindgen_ty_4,
    pub __bindgen_anon_5: vcpu_guest_core_regs__bindgen_ty_5,
    pub __bindgen_anon_6: vcpu_guest_core_regs__bindgen_ty_6,
    pub __bindgen_anon_7: vcpu_guest_core_regs__bindgen_ty_7,
    pub __bindgen_anon_8: vcpu_guest_core_regs__bindgen_ty_8,
    pub __bindgen_anon_9: vcpu_guest_core_regs__bindgen_ty_9,
    pub __bindgen_anon_10: vcpu_guest_core_regs__bindgen_ty_10,
    pub __bindgen_anon_11: vcpu_guest_core_regs__bindgen_ty_11,
    pub __bindgen_anon_12: vcpu_guest_core_regs__bindgen_ty_12,
    pub __bindgen_anon_13: vcpu_guest_core_regs__bindgen_ty_13,
    pub __bindgen_anon_14: vcpu_guest_core_regs__bindgen_ty_14,
    pub __bindgen_anon_15: vcpu_guest_core_regs__bindgen_ty_15,
    pub __bindgen_anon_16: vcpu_guest_core_regs__bindgen_ty_16,
    pub __bindgen_anon_17: vcpu_guest_core_regs__bindgen_ty_17,
    pub __bindgen_anon_18: vcpu_guest_core_regs__bindgen_ty_18,
    pub __bindgen_anon_19: vcpu_guest_core_regs__bindgen_ty_19,
    pub __bindgen_anon_20: vcpu_guest_core_regs__bindgen_ty_20,
    pub __bindgen_anon_21: vcpu_guest_core_regs__bindgen_ty_21,
    pub __bindgen_anon_22: vcpu_guest_core_regs__bindgen_ty_22,
    pub __bindgen_anon_23: vcpu_guest_core_regs__bindgen_ty_23,
    pub __bindgen_anon_24: vcpu_guest_core_regs__bindgen_ty_24,
    pub __bindgen_anon_25: vcpu_guest_core_regs__bindgen_ty_25,
    pub __bindgen_anon_26: vcpu_guest_core_regs__bindgen_ty_26,
    pub __bindgen_anon_27: vcpu_guest_core_regs__bindgen_ty_27,
    pub __bindgen_anon_28: vcpu_guest_core_regs__bindgen_ty_28,
    pub __bindgen_anon_29: vcpu_guest_core_regs__bindgen_ty_29,
    pub __bindgen_anon_30: vcpu_guest_core_regs__bindgen_ty_30,
    pub __bindgen_anon_31: vcpu_guest_core_regs__bindgen_ty_31,
    pub __bindgen_anon_32: vcpu_guest_core_regs__bindgen_ty_32,
    pub cpsr: u64,
    pub __bindgen_anon_33: vcpu_guest_core_regs__bindgen_ty_33,
    pub spsr_fiq: u32,
    pub spsr_irq: u32,
    pub spsr_und: u32,
    pub spsr_abt: u32,
    pub sp_el0: u64,
    pub sp_el1: u64,
    pub elr_el1: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_1 {
    pub x0: u64,
    pub r0_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_1)
        )
    );
    fn test_field_x0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_1),
                "::",
                stringify!(x0)
            )
        );
    }
    test_field_x0();
    fn test_field_r0_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r0_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_1),
                "::",
                stringify!(r0_usr)
            )
        );
    }
    test_field_r0_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_2 {
    pub x1: u64,
    pub r1_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_2)
        )
    );
    fn test_field_x1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_2),
                "::",
                stringify!(x1)
            )
        );
    }
    test_field_x1();
    fn test_field_r1_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r1_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_2),
                "::",
                stringify!(r1_usr)
            )
        );
    }
    test_field_r1_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_3 {
    pub x2: u64,
    pub r2_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_3)
        )
    );
    fn test_field_x2() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_3),
                "::",
                stringify!(x2)
            )
        );
    }
    test_field_x2();
    fn test_field_r2_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r2_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_3),
                "::",
                stringify!(r2_usr)
            )
        );
    }
    test_field_r2_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_4 {
    pub x3: u64,
    pub r3_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_4)
        )
    );
    fn test_field_x3() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x3) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_4),
                "::",
                stringify!(x3)
            )
        );
    }
    test_field_x3();
    fn test_field_r3_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r3_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_4),
                "::",
                stringify!(r3_usr)
            )
        );
    }
    test_field_r3_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_5 {
    pub x4: u64,
    pub r4_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_5)
        )
    );
    fn test_field_x4() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_5),
                "::",
                stringify!(x4)
            )
        );
    }
    test_field_x4();
    fn test_field_r4_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r4_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_5),
                "::",
                stringify!(r4_usr)
            )
        );
    }
    test_field_r4_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_6 {
    pub x5: u64,
    pub r5_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_6>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_6)
        )
    );
    fn test_field_x5() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x5) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_6),
                "::",
                stringify!(x5)
            )
        );
    }
    test_field_x5();
    fn test_field_r5_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r5_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_6),
                "::",
                stringify!(r5_usr)
            )
        );
    }
    test_field_r5_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_7 {
    pub x6: u64,
    pub r6_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_7>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_7)
        )
    );
    fn test_field_x6() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_7>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x6) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_7),
                "::",
                stringify!(x6)
            )
        );
    }
    test_field_x6();
    fn test_field_r6_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_7>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r6_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_7),
                "::",
                stringify!(r6_usr)
            )
        );
    }
    test_field_r6_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_8 {
    pub x7: u64,
    pub r7_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_8() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_8>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_8>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_8)
        )
    );
    fn test_field_x7() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x7) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_8),
                "::",
                stringify!(x7)
            )
        );
    }
    test_field_x7();
    fn test_field_r7_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r7_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_8),
                "::",
                stringify!(r7_usr)
            )
        );
    }
    test_field_r7_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_9 {
    pub x8: u64,
    pub r8_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_9() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_9>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_9))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_9>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_9)
        )
    );
    fn test_field_x8() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_9>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_9),
                "::",
                stringify!(x8)
            )
        );
    }
    test_field_x8();
    fn test_field_r8_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_9>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r8_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_9),
                "::",
                stringify!(r8_usr)
            )
        );
    }
    test_field_r8_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_10 {
    pub x9: u64,
    pub r9_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_10() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_10>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_10))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_10>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_10)
        )
    );
    fn test_field_x9() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_10>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x9) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_10),
                "::",
                stringify!(x9)
            )
        );
    }
    test_field_x9();
    fn test_field_r9_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_10>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r9_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_10),
                "::",
                stringify!(r9_usr)
            )
        );
    }
    test_field_r9_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_11 {
    pub x10: u64,
    pub r10_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_11() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_11>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_11))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_11)
        )
    );
    fn test_field_x10() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_11>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x10) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_11),
                "::",
                stringify!(x10)
            )
        );
    }
    test_field_x10();
    fn test_field_r10_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_11>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r10_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_11),
                "::",
                stringify!(r10_usr)
            )
        );
    }
    test_field_r10_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_12 {
    pub x11: u64,
    pub r11_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_12() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_12>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_12))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_12)
        )
    );
    fn test_field_x11() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_12>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x11) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_12),
                "::",
                stringify!(x11)
            )
        );
    }
    test_field_x11();
    fn test_field_r11_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_12>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r11_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_12),
                "::",
                stringify!(r11_usr)
            )
        );
    }
    test_field_r11_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_13 {
    pub x12: u64,
    pub r12_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_13() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_13>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_13))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_13>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_13)
        )
    );
    fn test_field_x12() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_13>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x12) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_13),
                "::",
                stringify!(x12)
            )
        );
    }
    test_field_x12();
    fn test_field_r12_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_13>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r12_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_13),
                "::",
                stringify!(r12_usr)
            )
        );
    }
    test_field_r12_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_14 {
    pub x13: u64,
    pub sp_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_14() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_14>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_14))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_14>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_14)
        )
    );
    fn test_field_x13() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_14>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x13) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_14),
                "::",
                stringify!(x13)
            )
        );
    }
    test_field_x13();
    fn test_field_sp_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_14>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_14),
                "::",
                stringify!(sp_usr)
            )
        );
    }
    test_field_sp_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_15 {
    pub x14: u64,
    pub lr_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_15() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_15>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_15))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_15>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_15)
        )
    );
    fn test_field_x14() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_15>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x14) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_15),
                "::",
                stringify!(x14)
            )
        );
    }
    test_field_x14();
    fn test_field_lr_usr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_15>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lr_usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_15),
                "::",
                stringify!(lr_usr)
            )
        );
    }
    test_field_lr_usr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_16 {
    pub x15: u64,
    pub __unused_sp_hyp: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_16() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_16>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_16))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_16>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_16)
        )
    );
    fn test_field_x15() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x15) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_16),
                "::",
                stringify!(x15)
            )
        );
    }
    test_field_x15();
    fn test_field___unused_sp_hyp() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__unused_sp_hyp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_16),
                "::",
                stringify!(__unused_sp_hyp)
            )
        );
    }
    test_field___unused_sp_hyp();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_17 {
    pub x16: u64,
    pub lr_irq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_17() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_17>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_17))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_17>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_17)
        )
    );
    fn test_field_x16() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_17>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x16) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_17),
                "::",
                stringify!(x16)
            )
        );
    }
    test_field_x16();
    fn test_field_lr_irq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_17>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lr_irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_17),
                "::",
                stringify!(lr_irq)
            )
        );
    }
    test_field_lr_irq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_18 {
    pub x17: u64,
    pub sp_irq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_18() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_18>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_18))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_18>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_18)
        )
    );
    fn test_field_x17() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_18>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x17) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_18),
                "::",
                stringify!(x17)
            )
        );
    }
    test_field_x17();
    fn test_field_sp_irq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_18>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp_irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_18),
                "::",
                stringify!(sp_irq)
            )
        );
    }
    test_field_sp_irq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_19 {
    pub x18: u64,
    pub lr_svc: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_19() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_19>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_19))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_19>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_19)
        )
    );
    fn test_field_x18() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_19>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x18) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_19),
                "::",
                stringify!(x18)
            )
        );
    }
    test_field_x18();
    fn test_field_lr_svc() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_19>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lr_svc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_19),
                "::",
                stringify!(lr_svc)
            )
        );
    }
    test_field_lr_svc();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_20 {
    pub x19: u64,
    pub sp_svc: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_20() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_20>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_20))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_20>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_20)
        )
    );
    fn test_field_x19() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_20>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x19) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_20),
                "::",
                stringify!(x19)
            )
        );
    }
    test_field_x19();
    fn test_field_sp_svc() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_20>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp_svc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_20),
                "::",
                stringify!(sp_svc)
            )
        );
    }
    test_field_sp_svc();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_21 {
    pub x20: u64,
    pub lr_abt: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_21() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_21>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_21))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_21>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_21)
        )
    );
    fn test_field_x20() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_21>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x20) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_21),
                "::",
                stringify!(x20)
            )
        );
    }
    test_field_x20();
    fn test_field_lr_abt() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_21>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lr_abt) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_21),
                "::",
                stringify!(lr_abt)
            )
        );
    }
    test_field_lr_abt();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_22 {
    pub x21: u64,
    pub sp_abt: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_22() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_22>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_22))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_22>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_22)
        )
    );
    fn test_field_x21() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_22>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x21) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_22),
                "::",
                stringify!(x21)
            )
        );
    }
    test_field_x21();
    fn test_field_sp_abt() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_22>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp_abt) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_22),
                "::",
                stringify!(sp_abt)
            )
        );
    }
    test_field_sp_abt();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_23 {
    pub x22: u64,
    pub lr_und: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_23() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_23>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_23))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_23>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_23)
        )
    );
    fn test_field_x22() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_23>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x22) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_23),
                "::",
                stringify!(x22)
            )
        );
    }
    test_field_x22();
    fn test_field_lr_und() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_23>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lr_und) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_23),
                "::",
                stringify!(lr_und)
            )
        );
    }
    test_field_lr_und();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_24 {
    pub x23: u64,
    pub sp_und: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_24() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_24>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_24))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_24>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_24)
        )
    );
    fn test_field_x23() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_24>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x23) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_24),
                "::",
                stringify!(x23)
            )
        );
    }
    test_field_x23();
    fn test_field_sp_und() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_24>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp_und) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_24),
                "::",
                stringify!(sp_und)
            )
        );
    }
    test_field_sp_und();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_25 {
    pub x24: u64,
    pub r8_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_25() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_25>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_25))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_25>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_25)
        )
    );
    fn test_field_x24() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_25>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x24) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_25),
                "::",
                stringify!(x24)
            )
        );
    }
    test_field_x24();
    fn test_field_r8_fiq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_25>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r8_fiq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_25),
                "::",
                stringify!(r8_fiq)
            )
        );
    }
    test_field_r8_fiq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_26 {
    pub x25: u64,
    pub r9_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_26() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_26>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_26))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_26>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_26)
        )
    );
    fn test_field_x25() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_26>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x25) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_26),
                "::",
                stringify!(x25)
            )
        );
    }
    test_field_x25();
    fn test_field_r9_fiq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_26>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r9_fiq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_26),
                "::",
                stringify!(r9_fiq)
            )
        );
    }
    test_field_r9_fiq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_27 {
    pub x26: u64,
    pub r10_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_27() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_27>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_27))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_27>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_27)
        )
    );
    fn test_field_x26() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_27>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x26) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_27),
                "::",
                stringify!(x26)
            )
        );
    }
    test_field_x26();
    fn test_field_r10_fiq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_27>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r10_fiq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_27),
                "::",
                stringify!(r10_fiq)
            )
        );
    }
    test_field_r10_fiq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_28 {
    pub x27: u64,
    pub r11_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_28() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_28>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_28))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_28>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_28)
        )
    );
    fn test_field_x27() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_28>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x27) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_28),
                "::",
                stringify!(x27)
            )
        );
    }
    test_field_x27();
    fn test_field_r11_fiq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_28>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r11_fiq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_28),
                "::",
                stringify!(r11_fiq)
            )
        );
    }
    test_field_r11_fiq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_29 {
    pub x28: u64,
    pub r12_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_29() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_29>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_29))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_29>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_29)
        )
    );
    fn test_field_x28() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_29>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x28) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_29),
                "::",
                stringify!(x28)
            )
        );
    }
    test_field_x28();
    fn test_field_r12_fiq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_29>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r12_fiq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_29),
                "::",
                stringify!(r12_fiq)
            )
        );
    }
    test_field_r12_fiq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_30 {
    pub x29: u64,
    pub sp_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_30() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_30>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_30))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_30>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_30)
        )
    );
    fn test_field_x29() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_30>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x29) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_30),
                "::",
                stringify!(x29)
            )
        );
    }
    test_field_x29();
    fn test_field_sp_fiq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_30>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp_fiq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_30),
                "::",
                stringify!(sp_fiq)
            )
        );
    }
    test_field_sp_fiq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_31 {
    pub x30: u64,
    pub lr_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_31() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_31>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_31))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_31>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_31)
        )
    );
    fn test_field_x30() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_31>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x30) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_31),
                "::",
                stringify!(x30)
            )
        );
    }
    test_field_x30();
    fn test_field_lr_fiq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_31>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lr_fiq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_31),
                "::",
                stringify!(lr_fiq)
            )
        );
    }
    test_field_lr_fiq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_32 {
    pub pc64: u64,
    pub pc32: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_32() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_32>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_32))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_32>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_32)
        )
    );
    fn test_field_pc64() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pc64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_32),
                "::",
                stringify!(pc64)
            )
        );
    }
    test_field_pc64();
    fn test_field_pc32() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pc32) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_32),
                "::",
                stringify!(pc32)
            )
        );
    }
    test_field_pc32();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_33 {
    pub spsr_el1: u64,
    pub spsr_svc: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_33() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_33>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_33))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_33>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_33)
        )
    );
    fn test_field_spsr_el1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_33>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spsr_el1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_33),
                "::",
                stringify!(spsr_el1)
            )
        );
    }
    test_field_spsr_el1();
    fn test_field_spsr_svc() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<vcpu_guest_core_regs__bindgen_ty_33>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spsr_svc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs__bindgen_ty_33),
                "::",
                stringify!(spsr_svc)
            )
        );
    }
    test_field_spsr_svc();
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs>(),
        312usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_guest_core_regs))
    );
    fn test_field_cpsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_core_regs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpsr) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs),
                "::",
                stringify!(cpsr)
            )
        );
    }
    test_field_cpsr();
    fn test_field_spsr_fiq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_core_regs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spsr_fiq) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs),
                "::",
                stringify!(spsr_fiq)
            )
        );
    }
    test_field_spsr_fiq();
    fn test_field_spsr_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_core_regs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spsr_irq) as usize - ptr as usize
            },
            276usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs),
                "::",
                stringify!(spsr_irq)
            )
        );
    }
    test_field_spsr_irq();
    fn test_field_spsr_und() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_core_regs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spsr_und) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs),
                "::",
                stringify!(spsr_und)
            )
        );
    }
    test_field_spsr_und();
    fn test_field_spsr_abt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_core_regs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spsr_abt) as usize - ptr as usize
            },
            284usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs),
                "::",
                stringify!(spsr_abt)
            )
        );
    }
    test_field_spsr_abt();
    fn test_field_sp_el0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_core_regs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp_el0) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs),
                "::",
                stringify!(sp_el0)
            )
        );
    }
    test_field_sp_el0();
    fn test_field_sp_el1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_core_regs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp_el1) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs),
                "::",
                stringify!(sp_el1)
            )
        );
    }
    test_field_sp_el1();
    fn test_field_elr_el1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_core_regs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).elr_el1) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_core_regs),
                "::",
                stringify!(elr_el1)
            )
        );
    }
    test_field_elr_el1();
}
pub type vcpu_guest_core_regs_t = vcpu_guest_core_regs;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_vcpu_guest_core_regs_t {
    pub p: *mut vcpu_guest_core_regs_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_vcpu_guest_core_regs_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_vcpu_guest_core_regs_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_vcpu_guest_core_regs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_vcpu_guest_core_regs_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_vcpu_guest_core_regs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_vcpu_guest_core_regs_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_vcpu_guest_core_regs_t {
    pub p: *mut vcpu_guest_core_regs_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_vcpu_guest_core_regs_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_vcpu_guest_core_regs_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_vcpu_guest_core_regs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_vcpu_guest_core_regs_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_vcpu_guest_core_regs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_vcpu_guest_core_regs_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_vcpu_guest_core_regs_t {
    pub p: *const vcpu_guest_core_regs_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_vcpu_guest_core_regs_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_vcpu_guest_core_regs_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_vcpu_guest_core_regs_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_vcpu_guest_core_regs_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_vcpu_guest_core_regs_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_vcpu_guest_core_regs_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_vcpu_guest_core_regs_t {
    pub p: *const vcpu_guest_core_regs_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_vcpu_guest_core_regs_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_vcpu_guest_core_regs_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_vcpu_guest_core_regs_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_vcpu_guest_core_regs_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_vcpu_guest_core_regs_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_vcpu_guest_core_regs_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vcpu_guest_context {
    pub flags: u32,
    pub user_regs: vcpu_guest_core_regs,
    pub sctlr: u64,
    pub ttbcr: u64,
    pub ttbr0: u64,
    pub ttbr1: u64,
}
#[test]
fn bindgen_test_layout_vcpu_guest_context() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_context>(),
        352usize,
        concat!("Size of: ", stringify!(vcpu_guest_context))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_context>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_guest_context))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_context>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_context),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_user_regs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_context>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_regs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_context),
                "::",
                stringify!(user_regs)
            )
        );
    }
    test_field_user_regs();
    fn test_field_sctlr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_context>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sctlr) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_context),
                "::",
                stringify!(sctlr)
            )
        );
    }
    test_field_sctlr();
    fn test_field_ttbcr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_context>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ttbcr) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_context),
                "::",
                stringify!(ttbcr)
            )
        );
    }
    test_field_ttbcr();
    fn test_field_ttbr0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_context>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ttbr0) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_context),
                "::",
                stringify!(ttbr0)
            )
        );
    }
    test_field_ttbr0();
    fn test_field_ttbr1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_context>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ttbr1) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_context),
                "::",
                stringify!(ttbr1)
            )
        );
    }
    test_field_ttbr1();
}
pub type vcpu_guest_context_t = vcpu_guest_context;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_vcpu_guest_context_t {
    pub p: *mut vcpu_guest_context_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_vcpu_guest_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_vcpu_guest_context_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_vcpu_guest_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_vcpu_guest_context_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_vcpu_guest_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_vcpu_guest_context_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_vcpu_guest_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_vcpu_guest_context_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_vcpu_guest_context_t {
    pub p: *mut vcpu_guest_context_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_vcpu_guest_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_vcpu_guest_context_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_vcpu_guest_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_vcpu_guest_context_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_vcpu_guest_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_vcpu_guest_context_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_vcpu_guest_context_t {
    pub p: *const vcpu_guest_context_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_vcpu_guest_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_vcpu_guest_context_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_vcpu_guest_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_vcpu_guest_context_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_vcpu_guest_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_vcpu_guest_context_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_vcpu_guest_context_t {
    pub p: *const vcpu_guest_context_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_vcpu_guest_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_vcpu_guest_context_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_vcpu_guest_context_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_vcpu_guest_context_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_vcpu_guest_context_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_vcpu_guest_context_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_arch_domainconfig {
    pub gic_version: u8,
    pub tee_type: u16,
    pub nr_spis: u32,
    pub clock_frequency: u32,
}
#[test]
fn bindgen_test_layout_xen_arch_domainconfig() {
    assert_eq!(
        ::std::mem::size_of::<xen_arch_domainconfig>(),
        12usize,
        concat!("Size of: ", stringify!(xen_arch_domainconfig))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_arch_domainconfig>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_arch_domainconfig))
    );
    fn test_field_gic_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_arch_domainconfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gic_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_arch_domainconfig),
                "::",
                stringify!(gic_version)
            )
        );
    }
    test_field_gic_version();
    fn test_field_tee_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_arch_domainconfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tee_type) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_arch_domainconfig),
                "::",
                stringify!(tee_type)
            )
        );
    }
    test_field_tee_type();
    fn test_field_nr_spis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_arch_domainconfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_spis) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_arch_domainconfig),
                "::",
                stringify!(nr_spis)
            )
        );
    }
    test_field_nr_spis();
    fn test_field_clock_frequency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_arch_domainconfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clock_frequency) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_arch_domainconfig),
                "::",
                stringify!(clock_frequency)
            )
        );
    }
    test_field_clock_frequency();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_vcpu_info {}
#[test]
fn bindgen_test_layout_arch_vcpu_info() {
    assert_eq!(
        ::std::mem::size_of::<arch_vcpu_info>(),
        0usize,
        concat!("Size of: ", stringify!(arch_vcpu_info))
    );
    assert_eq!(
        ::std::mem::align_of::<arch_vcpu_info>(),
        1usize,
        concat!("Alignment of ", stringify!(arch_vcpu_info))
    );
}
pub type arch_vcpu_info_t = arch_vcpu_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_shared_info {}
#[test]
fn bindgen_test_layout_arch_shared_info() {
    assert_eq!(
        ::std::mem::size_of::<arch_shared_info>(),
        0usize,
        concat!("Size of: ", stringify!(arch_shared_info))
    );
    assert_eq!(
        ::std::mem::align_of::<arch_shared_info>(),
        1usize,
        concat!("Alignment of ", stringify!(arch_shared_info))
    );
}
pub type arch_shared_info_t = arch_shared_info;
pub type xen_callback_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_pmu_arch {
    pub dummy: u8,
}
#[test]
fn bindgen_test_layout_xen_pmu_arch() {
    assert_eq!(
        ::std::mem::size_of::<xen_pmu_arch>(),
        1usize,
        concat!("Size of: ", stringify!(xen_pmu_arch))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_pmu_arch>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_pmu_arch))
    );
    fn test_field_dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pmu_arch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pmu_arch),
                "::",
                stringify!(dummy)
            )
        );
    }
    test_field_dummy();
}
pub type xen_pmu_arch_t = xen_pmu_arch;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_char {
    pub p: *mut ::std::os::raw::c_char,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_char() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_char>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_char))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_char>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_char))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_char),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_char),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_char {
    pub p: *mut ::std::os::raw::c_char,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_char() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_char>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_char))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_char>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_char))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_char),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_char),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_char {
    pub p: *const ::std::os::raw::c_char,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_char() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_char>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_char))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_char>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_char))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_char),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_char),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_char {
    pub p: *const ::std::os::raw::c_char,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_char() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_char>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_char))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_char>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_char))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_char),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_char),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uchar {
    pub p: *mut ::std::os::raw::c_uchar,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uchar() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uchar>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uchar))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uchar>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uchar))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uchar),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uchar),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uchar {
    pub p: *mut ::std::os::raw::c_uchar,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uchar() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uchar>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uchar))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uchar>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uchar))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uchar),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uchar),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uchar {
    pub p: *const ::std::os::raw::c_uchar,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uchar() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uchar>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uchar))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uchar>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uchar))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uchar),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uchar),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uchar {
    pub p: *const ::std::os::raw::c_uchar,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uchar() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uchar>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uchar))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uchar>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uchar))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uchar),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uchar),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_int {
    pub p: *mut ::std::os::raw::c_int,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_int() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_int>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_int))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_int>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_int))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_int>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_int),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_int>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_int),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_int {
    pub p: *mut ::std::os::raw::c_int,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_int() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_int>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_int))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_int>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_int))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_int>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_int),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_int>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_int),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_int {
    pub p: *const ::std::os::raw::c_int,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_int() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_int>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_int))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_int>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_int))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_int>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_int),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_int>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_int),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_int {
    pub p: *const ::std::os::raw::c_int,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_int() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_int>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_int))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_int>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_int))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_int>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_int),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_int>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_int),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint {
    pub p: *mut ::std::os::raw::c_uint,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint {
    pub p: *mut ::std::os::raw::c_uint,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint {
    pub p: *const ::std::os::raw::c_uint,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint {
    pub p: *const ::std::os::raw::c_uint,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_void {
    pub p: *mut ::std::os::raw::c_void,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_void() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_void>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_void))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_void>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_void))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_void>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_void),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_void>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_void),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_void {
    pub p: *mut ::std::os::raw::c_void,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_void() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_void>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_void))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_void>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_void))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_void>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_void),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_void>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_void),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_void {
    pub p: *const ::std::os::raw::c_void,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_void() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_void>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_void))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_void>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_void))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_void>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_void),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_void>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_void),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_void {
    pub p: *const ::std::os::raw::c_void,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_void() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_void>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_void))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_void>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_void))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_void>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_void),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_void>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_void),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint64_t {
    pub p: *mut u64,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint64_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint64_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint64_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint64_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint64_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint64_t {
    pub p: *mut u64,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint64_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint64_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint64_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint64_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint64_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint64_t {
    pub p: *const u64,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint64_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint64_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint64_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint64_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint64_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint64_t {
    pub p: *const u64,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint64_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint64_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint64_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_uint64_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint64_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint64_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_pfn_t {
    pub p: *mut xen_pfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_pfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_pfn_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_pfn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_pfn_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_pfn_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_pfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_pfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_pfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_pfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_pfn_t {
    pub p: *mut xen_pfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_pfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_pfn_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_pfn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_pfn_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_xen_pfn_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_pfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_pfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_pfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_pfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_pfn_t {
    pub p: *const xen_pfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_pfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_pfn_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_pfn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_pfn_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_xen_pfn_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_xen_pfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_pfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_xen_pfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_pfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_pfn_t {
    pub p: *const xen_pfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_pfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_pfn_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_xen_pfn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_pfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_pfn_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_pfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_pfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_pfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_pfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_ulong_t {
    pub p: *mut xen_ulong_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_ulong_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_ulong_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_ulong_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_ulong_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_ulong_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_ulong_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_ulong_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_ulong_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_ulong_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_ulong_t {
    pub p: *mut xen_ulong_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_ulong_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_ulong_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_ulong_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_ulong_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_xen_ulong_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_ulong_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_ulong_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_ulong_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_ulong_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_ulong_t {
    pub p: *const xen_ulong_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_ulong_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_ulong_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_ulong_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_ulong_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_ulong_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_xen_ulong_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_ulong_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_xen_ulong_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_ulong_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_ulong_t {
    pub p: *const xen_ulong_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_ulong_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_ulong_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_xen_ulong_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_ulong_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_ulong_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_ulong_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_ulong_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_ulong_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_ulong_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmuext_op {
    pub cmd: ::std::os::raw::c_uint,
    pub arg1: mmuext_op__bindgen_ty_1,
    pub arg2: mmuext_op__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmuext_op__bindgen_ty_1 {
    pub mfn: xen_pfn_t,
    pub linear_addr: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_mmuext_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mmuext_op__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mmuext_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mmuext_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mmuext_op__bindgen_ty_1))
    );
    fn test_field_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmuext_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mmuext_op__bindgen_ty_1),
                "::",
                stringify!(mfn)
            )
        );
    }
    test_field_mfn();
    fn test_field_linear_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmuext_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).linear_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mmuext_op__bindgen_ty_1),
                "::",
                stringify!(linear_addr)
            )
        );
    }
    test_field_linear_addr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmuext_op__bindgen_ty_2 {
    pub nr_ents: ::std::os::raw::c_uint,
    pub vcpumask: __guest_handle_64_const_void,
    pub src_mfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_mmuext_op__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<mmuext_op__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(mmuext_op__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<mmuext_op__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(mmuext_op__bindgen_ty_2))
    );
    fn test_field_nr_ents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmuext_op__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_ents) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mmuext_op__bindgen_ty_2),
                "::",
                stringify!(nr_ents)
            )
        );
    }
    test_field_nr_ents();
    fn test_field_vcpumask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmuext_op__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpumask) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mmuext_op__bindgen_ty_2),
                "::",
                stringify!(vcpumask)
            )
        );
    }
    test_field_vcpumask();
    fn test_field_src_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmuext_op__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).src_mfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mmuext_op__bindgen_ty_2),
                "::",
                stringify!(src_mfn)
            )
        );
    }
    test_field_src_mfn();
}
#[test]
fn bindgen_test_layout_mmuext_op() {
    assert_eq!(
        ::std::mem::size_of::<mmuext_op>(),
        24usize,
        concat!("Size of: ", stringify!(mmuext_op))
    );
    assert_eq!(
        ::std::mem::align_of::<mmuext_op>(),
        8usize,
        concat!("Alignment of ", stringify!(mmuext_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmuext_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mmuext_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_arg1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmuext_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mmuext_op),
                "::",
                stringify!(arg1)
            )
        );
    }
    test_field_arg1();
    fn test_field_arg2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmuext_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mmuext_op),
                "::",
                stringify!(arg2)
            )
        );
    }
    test_field_arg2();
}
pub type mmuext_op_t = mmuext_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_mmuext_op_t {
    pub p: *mut mmuext_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_mmuext_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_mmuext_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_mmuext_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_mmuext_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_mmuext_op_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_mmuext_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_mmuext_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_mmuext_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_mmuext_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_mmuext_op_t {
    pub p: *mut mmuext_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_mmuext_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_mmuext_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_mmuext_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_mmuext_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_mmuext_op_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_mmuext_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_mmuext_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_mmuext_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_mmuext_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_mmuext_op_t {
    pub p: *const mmuext_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_mmuext_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_mmuext_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_mmuext_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_mmuext_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_mmuext_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_mmuext_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_mmuext_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_mmuext_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_mmuext_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_mmuext_op_t {
    pub p: *const mmuext_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_mmuext_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_mmuext_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_mmuext_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_mmuext_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_mmuext_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_mmuext_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_mmuext_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_mmuext_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_mmuext_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
pub type domid_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_update {
    pub ptr: u64,
    pub val: u64,
}
#[test]
fn bindgen_test_layout_mmu_update() {
    assert_eq!(
        ::std::mem::size_of::<mmu_update>(),
        16usize,
        concat!("Size of: ", stringify!(mmu_update))
    );
    assert_eq!(
        ::std::mem::align_of::<mmu_update>(),
        8usize,
        concat!("Alignment of ", stringify!(mmu_update))
    );
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmu_update>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mmu_update),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
    fn test_field_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mmu_update>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mmu_update),
                "::",
                stringify!(val)
            )
        );
    }
    test_field_val();
}
pub type mmu_update_t = mmu_update;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_mmu_update_t {
    pub p: *mut mmu_update_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_mmu_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_mmu_update_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_mmu_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_mmu_update_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_mmu_update_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_mmu_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_mmu_update_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_mmu_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_mmu_update_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_mmu_update_t {
    pub p: *mut mmu_update_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_mmu_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_mmu_update_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_mmu_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_mmu_update_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_mmu_update_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_mmu_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_mmu_update_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_mmu_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_mmu_update_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_mmu_update_t {
    pub p: *const mmu_update_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_mmu_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_mmu_update_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_mmu_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_mmu_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_mmu_update_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_mmu_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_mmu_update_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_mmu_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_mmu_update_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_mmu_update_t {
    pub p: *const mmu_update_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_mmu_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_mmu_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_mmu_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_mmu_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_mmu_update_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_mmu_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_mmu_update_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_mmu_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_mmu_update_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multicall_entry {
    pub op: xen_ulong_t,
    pub result: xen_ulong_t,
    pub args: [xen_ulong_t; 6usize],
}
#[test]
fn bindgen_test_layout_multicall_entry() {
    assert_eq!(
        ::std::mem::size_of::<multicall_entry>(),
        64usize,
        concat!("Size of: ", stringify!(multicall_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<multicall_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(multicall_entry))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<multicall_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(multicall_entry),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_result() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<multicall_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(multicall_entry),
                "::",
                stringify!(result)
            )
        );
    }
    test_field_result();
    fn test_field_args() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<multicall_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(multicall_entry),
                "::",
                stringify!(args)
            )
        );
    }
    test_field_args();
}
pub type multicall_entry_t = multicall_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_multicall_entry_t {
    pub p: *mut multicall_entry_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_multicall_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_multicall_entry_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_multicall_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_multicall_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_multicall_entry_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_multicall_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_multicall_entry_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_multicall_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_multicall_entry_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_multicall_entry_t {
    pub p: *mut multicall_entry_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_multicall_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_multicall_entry_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_multicall_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_multicall_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_multicall_entry_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_multicall_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_multicall_entry_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_multicall_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_multicall_entry_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_multicall_entry_t {
    pub p: *const multicall_entry_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_multicall_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_multicall_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_multicall_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_multicall_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_multicall_entry_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_multicall_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_multicall_entry_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_multicall_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_multicall_entry_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_multicall_entry_t {
    pub p: *const multicall_entry_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_multicall_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_multicall_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_multicall_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_multicall_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_multicall_entry_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_multicall_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_multicall_entry_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_multicall_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_multicall_entry_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_time_info {
    pub version: u32,
    pub pad0: u32,
    pub tsc_timestamp: u64,
    pub system_time: u64,
    pub tsc_to_system_mul: u32,
    pub tsc_shift: i8,
    pub flags: u8,
    pub pad1: [u8; 2usize],
}
#[test]
fn bindgen_test_layout_vcpu_time_info() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_time_info>(),
        32usize,
        concat!("Size of: ", stringify!(vcpu_time_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_time_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_time_info))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_time_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_time_info),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_pad0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_time_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad0) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_time_info),
                "::",
                stringify!(pad0)
            )
        );
    }
    test_field_pad0();
    fn test_field_tsc_timestamp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_time_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tsc_timestamp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_time_info),
                "::",
                stringify!(tsc_timestamp)
            )
        );
    }
    test_field_tsc_timestamp();
    fn test_field_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_time_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_time_info),
                "::",
                stringify!(system_time)
            )
        );
    }
    test_field_system_time();
    fn test_field_tsc_to_system_mul() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_time_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tsc_to_system_mul) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_time_info),
                "::",
                stringify!(tsc_to_system_mul)
            )
        );
    }
    test_field_tsc_to_system_mul();
    fn test_field_tsc_shift() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_time_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tsc_shift) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_time_info),
                "::",
                stringify!(tsc_shift)
            )
        );
    }
    test_field_tsc_shift();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_time_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            29usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_time_info),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_time_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_time_info),
                "::",
                stringify!(pad1)
            )
        );
    }
    test_field_pad1();
}
pub type vcpu_time_info_t = vcpu_time_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_info {
    pub evtchn_upcall_pending: u8,
    pub pad0: u8,
    pub evtchn_pending_sel: xen_ulong_t,
    pub arch: arch_vcpu_info,
    pub time: vcpu_time_info_t,
}
#[test]
fn bindgen_test_layout_vcpu_info() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_info>(),
        48usize,
        concat!("Size of: ", stringify!(vcpu_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_info))
    );
    fn test_field_evtchn_upcall_pending() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).evtchn_upcall_pending) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_info),
                "::",
                stringify!(evtchn_upcall_pending)
            )
        );
    }
    test_field_evtchn_upcall_pending();
    fn test_field_pad0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad0) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_info),
                "::",
                stringify!(pad0)
            )
        );
    }
    test_field_pad0();
    fn test_field_evtchn_pending_sel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).evtchn_pending_sel) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_info),
                "::",
                stringify!(evtchn_pending_sel)
            )
        );
    }
    test_field_evtchn_pending_sel();
    fn test_field_arch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_info),
                "::",
                stringify!(arch)
            )
        );
    }
    test_field_arch();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_info),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
}
pub type vcpu_info_t = vcpu_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_info {
    pub vcpu_info: [vcpu_info; 1usize],
    pub evtchn_pending: [xen_ulong_t; 64usize],
    pub evtchn_mask: [xen_ulong_t; 64usize],
    pub wc_version: u32,
    pub wc_sec: u32,
    pub wc_nsec: u32,
    pub wc_sec_hi: u32,
    pub arch: arch_shared_info,
}
#[test]
fn bindgen_test_layout_shared_info() {
    assert_eq!(
        ::std::mem::size_of::<shared_info>(),
        1088usize,
        concat!("Size of: ", stringify!(shared_info))
    );
    assert_eq!(
        ::std::mem::align_of::<shared_info>(),
        8usize,
        concat!("Alignment of ", stringify!(shared_info))
    );
    fn test_field_vcpu_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_info),
                "::",
                stringify!(vcpu_info)
            )
        );
    }
    test_field_vcpu_info();
    fn test_field_evtchn_pending() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).evtchn_pending) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_info),
                "::",
                stringify!(evtchn_pending)
            )
        );
    }
    test_field_evtchn_pending();
    fn test_field_evtchn_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).evtchn_mask) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_info),
                "::",
                stringify!(evtchn_mask)
            )
        );
    }
    test_field_evtchn_mask();
    fn test_field_wc_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wc_version) as usize - ptr as usize
            },
            1072usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_info),
                "::",
                stringify!(wc_version)
            )
        );
    }
    test_field_wc_version();
    fn test_field_wc_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wc_sec) as usize - ptr as usize
            },
            1076usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_info),
                "::",
                stringify!(wc_sec)
            )
        );
    }
    test_field_wc_sec();
    fn test_field_wc_nsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wc_nsec) as usize - ptr as usize
            },
            1080usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_info),
                "::",
                stringify!(wc_nsec)
            )
        );
    }
    test_field_wc_nsec();
    fn test_field_wc_sec_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wc_sec_hi) as usize - ptr as usize
            },
            1084usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_info),
                "::",
                stringify!(wc_sec_hi)
            )
        );
    }
    test_field_wc_sec_hi();
    fn test_field_arch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize
            },
            1088usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_info),
                "::",
                stringify!(arch)
            )
        );
    }
    test_field_arch();
}
pub type shared_info_t = shared_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_multiboot_mod_list {
    pub mod_start: u32,
    pub mod_end: u32,
    pub cmdline: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_xen_multiboot_mod_list() {
    assert_eq!(
        ::std::mem::size_of::<xen_multiboot_mod_list>(),
        16usize,
        concat!("Size of: ", stringify!(xen_multiboot_mod_list))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_multiboot_mod_list>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_multiboot_mod_list))
    );
    fn test_field_mod_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_multiboot_mod_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mod_start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_multiboot_mod_list),
                "::",
                stringify!(mod_start)
            )
        );
    }
    test_field_mod_start();
    fn test_field_mod_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_multiboot_mod_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mod_end) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_multiboot_mod_list),
                "::",
                stringify!(mod_end)
            )
        );
    }
    test_field_mod_end();
    fn test_field_cmdline() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_multiboot_mod_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmdline) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_multiboot_mod_list),
                "::",
                stringify!(cmdline)
            )
        );
    }
    test_field_cmdline();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_multiboot_mod_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_multiboot_mod_list),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dom0_vga_console_info {
    pub video_type: u8,
    pub u: dom0_vga_console_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dom0_vga_console_info__bindgen_ty_1 {
    pub text_mode_3: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
    pub vesa_lfb: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1 {
    pub font_height: u16,
    pub cursor_x: u16,
    pub cursor_y: u16,
    pub rows: u16,
    pub columns: u16,
}
#[test]
fn bindgen_test_layout_dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>(),
        10usize,
        concat!(
            "Size of: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_font_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).font_height) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(font_height)
            )
        );
    }
    test_field_font_height();
    fn test_field_cursor_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cursor_x) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(cursor_x)
            )
        );
    }
    test_field_cursor_x();
    fn test_field_cursor_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cursor_y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(cursor_y)
            )
        );
    }
    test_field_cursor_y();
    fn test_field_rows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(rows)
            )
        );
    }
    test_field_rows();
    fn test_field_columns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).columns) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(columns)
            )
        );
    }
    test_field_columns();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2 {
    pub width: u16,
    pub height: u16,
    pub bytes_per_line: u16,
    pub bits_per_pixel: u16,
    pub lfb_base: u32,
    pub lfb_size: u32,
    pub red_pos: u8,
    pub red_size: u8,
    pub green_pos: u8,
    pub green_size: u8,
    pub blue_pos: u8,
    pub blue_size: u8,
    pub rsvd_pos: u8,
    pub rsvd_size: u8,
    pub gbl_caps: u32,
    pub mode_attrs: u16,
    pub pad: u16,
    pub ext_lfb_base: u32,
}
#[test]
fn bindgen_test_layout_dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(height)
            )
        );
    }
    test_field_height();
    fn test_field_bytes_per_line() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bytes_per_line) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(bytes_per_line)
            )
        );
    }
    test_field_bytes_per_line();
    fn test_field_bits_per_pixel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bits_per_pixel) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(bits_per_pixel)
            )
        );
    }
    test_field_bits_per_pixel();
    fn test_field_lfb_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lfb_base) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(lfb_base)
            )
        );
    }
    test_field_lfb_base();
    fn test_field_lfb_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lfb_size) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(lfb_size)
            )
        );
    }
    test_field_lfb_size();
    fn test_field_red_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).red_pos) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(red_pos)
            )
        );
    }
    test_field_red_pos();
    fn test_field_red_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).red_size) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(red_size)
            )
        );
    }
    test_field_red_size();
    fn test_field_green_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).green_pos) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(green_pos)
            )
        );
    }
    test_field_green_pos();
    fn test_field_green_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).green_size) as usize - ptr as usize
            },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(green_size)
            )
        );
    }
    test_field_green_size();
    fn test_field_blue_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blue_pos) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(blue_pos)
            )
        );
    }
    test_field_blue_pos();
    fn test_field_blue_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blue_size) as usize - ptr as usize
            },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(blue_size)
            )
        );
    }
    test_field_blue_size();
    fn test_field_rsvd_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsvd_pos) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(rsvd_pos)
            )
        );
    }
    test_field_rsvd_pos();
    fn test_field_rsvd_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsvd_size) as usize - ptr as usize
            },
            23usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(rsvd_size)
            )
        );
    }
    test_field_rsvd_size();
    fn test_field_gbl_caps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gbl_caps) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(gbl_caps)
            )
        );
    }
    test_field_gbl_caps();
    fn test_field_mode_attrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mode_attrs) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(mode_attrs)
            )
        );
    }
    test_field_mode_attrs();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_ext_lfb_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ext_lfb_base) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(ext_lfb_base)
            )
        );
    }
    test_field_ext_lfb_base();
}
#[test]
fn bindgen_test_layout_dom0_vga_console_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<dom0_vga_console_info__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(dom0_vga_console_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<dom0_vga_console_info__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(dom0_vga_console_info__bindgen_ty_1)
        )
    );
    fn test_field_text_mode_3() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<dom0_vga_console_info__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).text_mode_3) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1),
                "::",
                stringify!(text_mode_3)
            )
        );
    }
    test_field_text_mode_3();
    fn test_field_vesa_lfb() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<dom0_vga_console_info__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vesa_lfb) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info__bindgen_ty_1),
                "::",
                stringify!(vesa_lfb)
            )
        );
    }
    test_field_vesa_lfb();
}
#[test]
fn bindgen_test_layout_dom0_vga_console_info() {
    assert_eq!(
        ::std::mem::size_of::<dom0_vga_console_info>(),
        40usize,
        concat!("Size of: ", stringify!(dom0_vga_console_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dom0_vga_console_info>(),
        4usize,
        concat!("Alignment of ", stringify!(dom0_vga_console_info))
    );
    fn test_field_video_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dom0_vga_console_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).video_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info),
                "::",
                stringify!(video_type)
            )
        );
    }
    test_field_video_type();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dom0_vga_console_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dom0_vga_console_info),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type dom0_vga_console_info_t = dom0_vga_console_info;
pub type xen_domain_handle_t = [u8; 16usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint8 {
    pub p: *mut u8,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint8() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint8>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint8>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint8))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint8),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint8),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint8 {
    pub p: *mut u8,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint8() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint8>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint8>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint8))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint8),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint8),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint8 {
    pub p: *const u8,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint8() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint8>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint8>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint8))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint8),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint8),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint8 {
    pub p: *const u8,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint8() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint8>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint8>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint8))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint8),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint8),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint16 {
    pub p: *mut u16,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint16() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint16>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint16>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint16))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint16),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint16),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint16 {
    pub p: *mut u16,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint16() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint16>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint16>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint16))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint16),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint16),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint16 {
    pub p: *const u16,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint16() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint16>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint16>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint16))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint16),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint16),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint16 {
    pub p: *const u16,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint16() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint16>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint16>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint16))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint16),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint16),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint32 {
    pub p: *mut u32,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint32() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint32>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint32>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint32))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint32),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint32),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint32 {
    pub p: *mut u32,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint32() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint32>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint32>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint32))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint32),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint32),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint32 {
    pub p: *const u32,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint32() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint32>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint32>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint32))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint32),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint32),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint32 {
    pub p: *const u32,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint32() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint32>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint32>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint32))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint32),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint32),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint64 {
    pub p: *mut u64,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint64() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint64))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint64),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_uint64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_uint64),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint64 {
    pub p: *mut u64,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint64() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint64))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint64),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_uint64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_uint64),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint64 {
    pub p: *const u64,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint64() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint64))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint64),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_uint64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_uint64),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint64 {
    pub p: *const u64,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint64() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint64))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint64),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_const_uint64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_uint64),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_uuid_t {
    pub a: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_xen_uuid_t() {
    assert_eq!(
        ::std::mem::size_of::<xen_uuid_t>(),
        16usize,
        concat!("Size of: ", stringify!(xen_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_uuid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_uuid_t))
    );
    fn test_field_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_uuid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_uuid_t),
                "::",
                stringify!(a)
            )
        );
    }
    test_field_a();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenctl_bitmap {
    pub bitmap: __guest_handle_64_uint8,
    pub nr_bits: u32,
}
#[test]
fn bindgen_test_layout_xenctl_bitmap() {
    assert_eq!(
        ::std::mem::size_of::<xenctl_bitmap>(),
        16usize,
        concat!("Size of: ", stringify!(xenctl_bitmap))
    );
    assert_eq!(
        ::std::mem::align_of::<xenctl_bitmap>(),
        8usize,
        concat!("Alignment of ", stringify!(xenctl_bitmap))
    );
    fn test_field_bitmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenctl_bitmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bitmap) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenctl_bitmap),
                "::",
                stringify!(bitmap)
            )
        );
    }
    test_field_bitmap();
    fn test_field_nr_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenctl_bitmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_bits) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenctl_bitmap),
                "::",
                stringify!(nr_bits)
            )
        );
    }
    test_field_nr_bits();
}
pub type xenctl_bitmap_t = xenctl_bitmap;
pub type evtchn_port_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_evtchn_port_t {
    pub p: *mut evtchn_port_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_evtchn_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_evtchn_port_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_evtchn_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_evtchn_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_evtchn_port_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_evtchn_port_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_evtchn_port_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_evtchn_port_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_evtchn_port_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_evtchn_port_t {
    pub p: *mut evtchn_port_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_evtchn_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_evtchn_port_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_evtchn_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_evtchn_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_evtchn_port_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_evtchn_port_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_evtchn_port_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_evtchn_port_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_evtchn_port_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_evtchn_port_t {
    pub p: *const evtchn_port_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_evtchn_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_evtchn_port_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_evtchn_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_evtchn_port_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_evtchn_port_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_evtchn_port_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_evtchn_port_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_evtchn_port_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_evtchn_port_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_evtchn_port_t {
    pub p: *const evtchn_port_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_evtchn_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_evtchn_port_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_evtchn_port_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_evtchn_port_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_evtchn_port_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_evtchn_port_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_evtchn_port_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_evtchn_port_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_evtchn_port_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_alloc_unbound {
    pub dom: domid_t,
    pub remote_dom: domid_t,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_alloc_unbound() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_alloc_unbound>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_alloc_unbound))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_alloc_unbound>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_alloc_unbound))
    );
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_alloc_unbound>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_alloc_unbound),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
    fn test_field_remote_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_alloc_unbound>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remote_dom) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_alloc_unbound),
                "::",
                stringify!(remote_dom)
            )
        );
    }
    test_field_remote_dom();
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_alloc_unbound>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_alloc_unbound),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
pub type evtchn_alloc_unbound_t = evtchn_alloc_unbound;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_interdomain {
    pub remote_dom: domid_t,
    pub remote_port: evtchn_port_t,
    pub local_port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_bind_interdomain() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_interdomain>(),
        12usize,
        concat!("Size of: ", stringify!(evtchn_bind_interdomain))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_interdomain>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_interdomain))
    );
    fn test_field_remote_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_interdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remote_dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_interdomain),
                "::",
                stringify!(remote_dom)
            )
        );
    }
    test_field_remote_dom();
    fn test_field_remote_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_interdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remote_port) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_interdomain),
                "::",
                stringify!(remote_port)
            )
        );
    }
    test_field_remote_port();
    fn test_field_local_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_interdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).local_port) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_interdomain),
                "::",
                stringify!(local_port)
            )
        );
    }
    test_field_local_port();
}
pub type evtchn_bind_interdomain_t = evtchn_bind_interdomain;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_virq {
    pub virq: u32,
    pub vcpu: u32,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_bind_virq() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_virq>(),
        12usize,
        concat!("Size of: ", stringify!(evtchn_bind_virq))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_virq>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_virq))
    );
    fn test_field_virq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_virq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).virq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_virq),
                "::",
                stringify!(virq)
            )
        );
    }
    test_field_virq();
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_virq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_virq),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_virq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_virq),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
pub type evtchn_bind_virq_t = evtchn_bind_virq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_pirq {
    pub pirq: u32,
    pub flags: u32,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_bind_pirq() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_pirq>(),
        12usize,
        concat!("Size of: ", stringify!(evtchn_bind_pirq))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_pirq>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_pirq))
    );
    fn test_field_pirq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pirq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_pirq),
                "::",
                stringify!(pirq)
            )
        );
    }
    test_field_pirq();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_pirq),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_pirq),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
pub type evtchn_bind_pirq_t = evtchn_bind_pirq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_ipi {
    pub vcpu: u32,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_bind_ipi() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_ipi>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_bind_ipi))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_ipi>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_ipi))
    );
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_ipi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_ipi),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_ipi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_ipi),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
pub type evtchn_bind_ipi_t = evtchn_bind_ipi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_close {
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_close() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_close>(),
        4usize,
        concat!("Size of: ", stringify!(evtchn_close))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_close>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_close))
    );
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_close>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_close),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
pub type evtchn_close_t = evtchn_close;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_send {
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_send() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_send>(),
        4usize,
        concat!("Size of: ", stringify!(evtchn_send))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_send>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_send))
    );
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_send>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_send),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
pub type evtchn_send_t = evtchn_send;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evtchn_status {
    pub dom: domid_t,
    pub port: evtchn_port_t,
    pub status: u32,
    pub vcpu: u32,
    pub u: evtchn_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evtchn_status__bindgen_ty_1 {
    pub unbound: evtchn_status__bindgen_ty_1__bindgen_ty_1,
    pub interdomain: evtchn_status__bindgen_ty_1__bindgen_ty_2,
    pub pirq: u32,
    pub virq: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_status__bindgen_ty_1__bindgen_ty_1 {
    pub dom: domid_t,
}
#[test]
fn bindgen_test_layout_evtchn_status__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_status__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_status__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<evtchn_status__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_status__bindgen_ty_1__bindgen_ty_2 {
    pub dom: domid_t,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_status__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_status__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_status__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<evtchn_status__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<evtchn_status__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
#[test]
fn bindgen_test_layout_evtchn_status__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_status__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_status__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_status__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_status__bindgen_ty_1))
    );
    fn test_field_unbound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_status__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unbound) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status__bindgen_ty_1),
                "::",
                stringify!(unbound)
            )
        );
    }
    test_field_unbound();
    fn test_field_interdomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_status__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interdomain) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status__bindgen_ty_1),
                "::",
                stringify!(interdomain)
            )
        );
    }
    test_field_interdomain();
    fn test_field_pirq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_status__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pirq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status__bindgen_ty_1),
                "::",
                stringify!(pirq)
            )
        );
    }
    test_field_pirq();
    fn test_field_virq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_status__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).virq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status__bindgen_ty_1),
                "::",
                stringify!(virq)
            )
        );
    }
    test_field_virq();
}
#[test]
fn bindgen_test_layout_evtchn_status() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_status>(),
        24usize,
        concat!("Size of: ", stringify!(evtchn_status))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_status>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_status))
    );
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_status),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type evtchn_status_t = evtchn_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_vcpu {
    pub port: evtchn_port_t,
    pub vcpu: u32,
}
#[test]
fn bindgen_test_layout_evtchn_bind_vcpu() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_vcpu>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_bind_vcpu))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_vcpu>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_vcpu))
    );
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_vcpu>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_vcpu),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_bind_vcpu>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_bind_vcpu),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
}
pub type evtchn_bind_vcpu_t = evtchn_bind_vcpu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_unmask {
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_unmask() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_unmask>(),
        4usize,
        concat!("Size of: ", stringify!(evtchn_unmask))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_unmask>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_unmask))
    );
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_unmask>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_unmask),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
pub type evtchn_unmask_t = evtchn_unmask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_reset {
    pub dom: domid_t,
}
#[test]
fn bindgen_test_layout_evtchn_reset() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_reset>(),
        2usize,
        concat!("Size of: ", stringify!(evtchn_reset))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_reset>(),
        2usize,
        concat!("Alignment of ", stringify!(evtchn_reset))
    );
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_reset>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_reset),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
}
pub type evtchn_reset_t = evtchn_reset;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_init_control {
    pub control_gfn: u64,
    pub offset: u32,
    pub vcpu: u32,
    pub link_bits: u8,
    pub _pad: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_evtchn_init_control() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_init_control>(),
        24usize,
        concat!("Size of: ", stringify!(evtchn_init_control))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_init_control>(),
        8usize,
        concat!("Alignment of ", stringify!(evtchn_init_control))
    );
    fn test_field_control_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_init_control>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).control_gfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_init_control),
                "::",
                stringify!(control_gfn)
            )
        );
    }
    test_field_control_gfn();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_init_control>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_init_control),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_init_control>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_init_control),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
    fn test_field_link_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_init_control>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).link_bits) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_init_control),
                "::",
                stringify!(link_bits)
            )
        );
    }
    test_field_link_bits();
    fn test_field__pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_init_control>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_init_control),
                "::",
                stringify!(_pad)
            )
        );
    }
    test_field__pad();
}
pub type evtchn_init_control_t = evtchn_init_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_expand_array {
    pub array_gfn: u64,
}
#[test]
fn bindgen_test_layout_evtchn_expand_array() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_expand_array>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_expand_array))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_expand_array>(),
        8usize,
        concat!("Alignment of ", stringify!(evtchn_expand_array))
    );
    fn test_field_array_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_expand_array>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).array_gfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_expand_array),
                "::",
                stringify!(array_gfn)
            )
        );
    }
    test_field_array_gfn();
}
pub type evtchn_expand_array_t = evtchn_expand_array;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_set_priority {
    pub port: evtchn_port_t,
    pub priority: u32,
}
#[test]
fn bindgen_test_layout_evtchn_set_priority() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_set_priority>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_set_priority))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_set_priority>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_set_priority))
    );
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_set_priority>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_set_priority),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
    fn test_field_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_set_priority>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_set_priority),
                "::",
                stringify!(priority)
            )
        );
    }
    test_field_priority();
}
pub type evtchn_set_priority_t = evtchn_set_priority;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evtchn_op {
    pub cmd: u32,
    pub u: evtchn_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evtchn_op__bindgen_ty_1 {
    pub alloc_unbound: evtchn_alloc_unbound_t,
    pub bind_interdomain: evtchn_bind_interdomain_t,
    pub bind_virq: evtchn_bind_virq_t,
    pub bind_pirq: evtchn_bind_pirq_t,
    pub bind_ipi: evtchn_bind_ipi_t,
    pub close: evtchn_close_t,
    pub send: evtchn_send_t,
    pub status: evtchn_status_t,
    pub bind_vcpu: evtchn_bind_vcpu_t,
    pub unmask: evtchn_unmask_t,
}
#[test]
fn bindgen_test_layout_evtchn_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_op__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(evtchn_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_op__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_op__bindgen_ty_1))
    );
    fn test_field_alloc_unbound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).alloc_unbound) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(alloc_unbound)
            )
        );
    }
    test_field_alloc_unbound();
    fn test_field_bind_interdomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_interdomain) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(bind_interdomain)
            )
        );
    }
    test_field_bind_interdomain();
    fn test_field_bind_virq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_virq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(bind_virq)
            )
        );
    }
    test_field_bind_virq();
    fn test_field_bind_pirq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_pirq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(bind_pirq)
            )
        );
    }
    test_field_bind_pirq();
    fn test_field_bind_ipi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_ipi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(bind_ipi)
            )
        );
    }
    test_field_bind_ipi();
    fn test_field_close() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(close)
            )
        );
    }
    test_field_close();
    fn test_field_send() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).send) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(send)
            )
        );
    }
    test_field_send();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_bind_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_vcpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(bind_vcpu)
            )
        );
    }
    test_field_bind_vcpu();
    fn test_field_unmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unmask) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op__bindgen_ty_1),
                "::",
                stringify!(unmask)
            )
        );
    }
    test_field_unmask();
}
#[test]
fn bindgen_test_layout_evtchn_op() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_op>(),
        28usize,
        concat!("Size of: ", stringify!(evtchn_op))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_op>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type evtchn_op_t = evtchn_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_evtchn_op_t {
    pub p: *mut evtchn_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_evtchn_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_evtchn_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_evtchn_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_evtchn_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_evtchn_op_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_evtchn_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_evtchn_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_evtchn_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_evtchn_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_evtchn_op_t {
    pub p: *mut evtchn_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_evtchn_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_evtchn_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_evtchn_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_evtchn_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_evtchn_op_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_evtchn_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_evtchn_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_evtchn_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_evtchn_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_evtchn_op_t {
    pub p: *const evtchn_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_evtchn_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_evtchn_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_evtchn_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_evtchn_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_evtchn_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_evtchn_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_evtchn_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_evtchn_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_evtchn_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_evtchn_op_t {
    pub p: *const evtchn_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_evtchn_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_evtchn_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_evtchn_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_evtchn_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_evtchn_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_evtchn_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_evtchn_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_evtchn_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_evtchn_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
pub type event_word_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_fifo_control_block {
    pub ready: u32,
    pub _rsvd: u32,
    pub head: [u32; 16usize],
}
#[test]
fn bindgen_test_layout_evtchn_fifo_control_block() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_fifo_control_block>(),
        72usize,
        concat!("Size of: ", stringify!(evtchn_fifo_control_block))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_fifo_control_block>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_fifo_control_block))
    );
    fn test_field_ready() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_fifo_control_block>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ready) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_fifo_control_block),
                "::",
                stringify!(ready)
            )
        );
    }
    test_field_ready();
    fn test_field__rsvd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_fifo_control_block>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._rsvd) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_fifo_control_block),
                "::",
                stringify!(_rsvd)
            )
        );
    }
    test_field__rsvd();
    fn test_field_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<evtchn_fifo_control_block>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(evtchn_fifo_control_block),
                "::",
                stringify!(head)
            )
        );
    }
    test_field_head();
}
pub type evtchn_fifo_control_block_t = evtchn_fifo_control_block;
pub type grant_ref_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v1 {
    pub flags: u16,
    pub domid: domid_t,
    pub frame: u32,
}
#[test]
fn bindgen_test_layout_grant_entry_v1() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v1>(),
        8usize,
        concat!("Size of: ", stringify!(grant_entry_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(grant_entry_v1))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v1),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v1),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v1),
                "::",
                stringify!(frame)
            )
        );
    }
    test_field_frame();
}
pub type grant_entry_v1_t = grant_entry_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_header {
    pub flags: u16,
    pub domid: domid_t,
}
#[test]
fn bindgen_test_layout_grant_entry_header() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_header>(),
        4usize,
        concat!("Size of: ", stringify!(grant_entry_header))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_header>(),
        2usize,
        concat!("Alignment of ", stringify!(grant_entry_header))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_header>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_header),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_header>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_header),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
}
pub type grant_entry_header_t = grant_entry_header;
#[repr(C)]
#[derive(Copy, Clone)]
pub union grant_entry_v2 {
    pub hdr: grant_entry_header_t,
    pub full_page: grant_entry_v2__bindgen_ty_1,
    pub sub_page: grant_entry_v2__bindgen_ty_2,
    pub transitive: grant_entry_v2__bindgen_ty_3,
    pub __spacer: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_1 {
    pub hdr: grant_entry_header_t,
    pub pad0: u32,
    pub frame: u64,
}
#[test]
fn bindgen_test_layout_grant_entry_v2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(grant_entry_v2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(grant_entry_v2__bindgen_ty_1))
    );
    fn test_field_hdr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_1),
                "::",
                stringify!(hdr)
            )
        );
    }
    test_field_hdr();
    fn test_field_pad0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad0) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_1),
                "::",
                stringify!(pad0)
            )
        );
    }
    test_field_pad0();
    fn test_field_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_1),
                "::",
                stringify!(frame)
            )
        );
    }
    test_field_frame();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_2 {
    pub hdr: grant_entry_header_t,
    pub page_off: u16,
    pub length: u16,
    pub frame: u64,
}
#[test]
fn bindgen_test_layout_grant_entry_v2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v2__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(grant_entry_v2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v2__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(grant_entry_v2__bindgen_ty_2))
    );
    fn test_field_hdr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_2),
                "::",
                stringify!(hdr)
            )
        );
    }
    test_field_hdr();
    fn test_field_page_off() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).page_off) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_2),
                "::",
                stringify!(page_off)
            )
        );
    }
    test_field_page_off();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_2),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_2),
                "::",
                stringify!(frame)
            )
        );
    }
    test_field_frame();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_3 {
    pub hdr: grant_entry_header_t,
    pub trans_domid: domid_t,
    pub pad0: u16,
    pub gref: grant_ref_t,
}
#[test]
fn bindgen_test_layout_grant_entry_v2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v2__bindgen_ty_3>(),
        12usize,
        concat!("Size of: ", stringify!(grant_entry_v2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v2__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(grant_entry_v2__bindgen_ty_3))
    );
    fn test_field_hdr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_3),
                "::",
                stringify!(hdr)
            )
        );
    }
    test_field_hdr();
    fn test_field_trans_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trans_domid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_3),
                "::",
                stringify!(trans_domid)
            )
        );
    }
    test_field_trans_domid();
    fn test_field_pad0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad0) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_3),
                "::",
                stringify!(pad0)
            )
        );
    }
    test_field_pad0();
    fn test_field_gref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gref) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2__bindgen_ty_3),
                "::",
                stringify!(gref)
            )
        );
    }
    test_field_gref();
}
#[test]
fn bindgen_test_layout_grant_entry_v2() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v2>(),
        16usize,
        concat!("Size of: ", stringify!(grant_entry_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(grant_entry_v2))
    );
    fn test_field_hdr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2),
                "::",
                stringify!(hdr)
            )
        );
    }
    test_field_hdr();
    fn test_field_full_page() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).full_page) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2),
                "::",
                stringify!(full_page)
            )
        );
    }
    test_field_full_page();
    fn test_field_sub_page() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sub_page) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2),
                "::",
                stringify!(sub_page)
            )
        );
    }
    test_field_sub_page();
    fn test_field_transitive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transitive) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2),
                "::",
                stringify!(transitive)
            )
        );
    }
    test_field_transitive();
    fn test_field___spacer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<grant_entry_v2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(grant_entry_v2),
                "::",
                stringify!(__spacer)
            )
        );
    }
    test_field___spacer();
}
pub type grant_entry_v2_t = grant_entry_v2;
pub type grant_status_t = u16;
pub type grant_handle_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_map_grant_ref {
    pub host_addr: u64,
    pub flags: u32,
    pub ref_: grant_ref_t,
    pub dom: domid_t,
    pub status: i16,
    pub handle: grant_handle_t,
    pub dev_bus_addr: u64,
}
#[test]
fn bindgen_test_layout_gnttab_map_grant_ref() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_map_grant_ref>(),
        32usize,
        concat!("Size of: ", stringify!(gnttab_map_grant_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_map_grant_ref>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_map_grant_ref))
    );
    fn test_field_host_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_map_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).host_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_map_grant_ref),
                "::",
                stringify!(host_addr)
            )
        );
    }
    test_field_host_addr();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_map_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_map_grant_ref),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_map_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_map_grant_ref),
                "::",
                stringify!(ref_)
            )
        );
    }
    test_field_ref();
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_map_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_map_grant_ref),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_map_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_map_grant_ref),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_map_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_map_grant_ref),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_dev_bus_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_map_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dev_bus_addr) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_map_grant_ref),
                "::",
                stringify!(dev_bus_addr)
            )
        );
    }
    test_field_dev_bus_addr();
}
pub type gnttab_map_grant_ref_t = gnttab_map_grant_ref;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_map_grant_ref_t {
    pub p: *mut gnttab_map_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_map_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_map_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_map_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_map_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_map_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_map_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_map_grant_ref_t {
    pub p: *mut gnttab_map_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_map_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_map_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_map_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_map_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_map_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_map_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_map_grant_ref_t {
    pub p: *const gnttab_map_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_map_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_map_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_map_grant_ref_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_map_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_map_grant_ref_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_map_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_map_grant_ref_t {
    pub p: *const gnttab_map_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_map_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_map_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_map_grant_ref_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_map_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_map_grant_ref_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_map_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_unmap_grant_ref {
    pub host_addr: u64,
    pub dev_bus_addr: u64,
    pub handle: grant_handle_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_unmap_grant_ref() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_unmap_grant_ref>(),
        24usize,
        concat!("Size of: ", stringify!(gnttab_unmap_grant_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_unmap_grant_ref>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_unmap_grant_ref))
    );
    fn test_field_host_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_unmap_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).host_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_unmap_grant_ref),
                "::",
                stringify!(host_addr)
            )
        );
    }
    test_field_host_addr();
    fn test_field_dev_bus_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_unmap_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dev_bus_addr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_unmap_grant_ref),
                "::",
                stringify!(dev_bus_addr)
            )
        );
    }
    test_field_dev_bus_addr();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_unmap_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_unmap_grant_ref),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_unmap_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_unmap_grant_ref),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
pub type gnttab_unmap_grant_ref_t = gnttab_unmap_grant_ref;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_unmap_grant_ref_t {
    pub p: *mut gnttab_unmap_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_unmap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_unmap_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_unmap_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_unmap_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_unmap_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_unmap_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_unmap_grant_ref_t {
    pub p: *mut gnttab_unmap_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_unmap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_unmap_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_unmap_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_unmap_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_unmap_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_unmap_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_unmap_grant_ref_t {
    pub p: *const gnttab_unmap_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_unmap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_unmap_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_gnttab_unmap_grant_ref_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_unmap_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_gnttab_unmap_grant_ref_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_unmap_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_unmap_grant_ref_t {
    pub p: *const gnttab_unmap_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_unmap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_unmap_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_unmap_grant_ref_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_unmap_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_unmap_grant_ref_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_unmap_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_setup_table {
    pub dom: domid_t,
    pub nr_frames: u32,
    pub status: i16,
    pub frame_list: __guest_handle_64_xen_pfn_t,
}
#[test]
fn bindgen_test_layout_gnttab_setup_table() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_setup_table>(),
        24usize,
        concat!("Size of: ", stringify!(gnttab_setup_table))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_setup_table>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_setup_table))
    );
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_setup_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_setup_table),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
    fn test_field_nr_frames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_setup_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_frames) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_setup_table),
                "::",
                stringify!(nr_frames)
            )
        );
    }
    test_field_nr_frames();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_setup_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_setup_table),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_frame_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_setup_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame_list) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_setup_table),
                "::",
                stringify!(frame_list)
            )
        );
    }
    test_field_frame_list();
}
pub type gnttab_setup_table_t = gnttab_setup_table;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_setup_table_t {
    pub p: *mut gnttab_setup_table_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_setup_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_setup_table_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_setup_table_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_setup_table_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_setup_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_setup_table_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_setup_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_setup_table_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_setup_table_t {
    pub p: *mut gnttab_setup_table_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_setup_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_setup_table_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_setup_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_setup_table_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_setup_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_setup_table_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_setup_table_t {
    pub p: *const gnttab_setup_table_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_setup_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_setup_table_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_setup_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_setup_table_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_setup_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_setup_table_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_setup_table_t {
    pub p: *const gnttab_setup_table_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_setup_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_setup_table_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_setup_table_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_setup_table_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_setup_table_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_setup_table_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_dump_table {
    pub dom: domid_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_dump_table() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_dump_table>(),
        4usize,
        concat!("Size of: ", stringify!(gnttab_dump_table))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_dump_table>(),
        2usize,
        concat!("Alignment of ", stringify!(gnttab_dump_table))
    );
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_dump_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_dump_table),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_dump_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_dump_table),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
pub type gnttab_dump_table_t = gnttab_dump_table;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_dump_table_t {
    pub p: *mut gnttab_dump_table_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_dump_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_dump_table_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_dump_table_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_dump_table_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_dump_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_dump_table_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_dump_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_dump_table_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_dump_table_t {
    pub p: *mut gnttab_dump_table_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_dump_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_dump_table_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_dump_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_dump_table_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_dump_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_dump_table_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_dump_table_t {
    pub p: *const gnttab_dump_table_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_dump_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_dump_table_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_dump_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_dump_table_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_dump_table_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_dump_table_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_dump_table_t {
    pub p: *const gnttab_dump_table_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_dump_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_dump_table_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_dump_table_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_dump_table_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_dump_table_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_dump_table_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_transfer {
    pub mfn: xen_pfn_t,
    pub domid: domid_t,
    pub ref_: grant_ref_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_transfer() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_transfer>(),
        24usize,
        concat!("Size of: ", stringify!(gnttab_transfer))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_transfer>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_transfer))
    );
    fn test_field_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_transfer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_transfer),
                "::",
                stringify!(mfn)
            )
        );
    }
    test_field_mfn();
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_transfer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_transfer),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_transfer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_transfer),
                "::",
                stringify!(ref_)
            )
        );
    }
    test_field_ref();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_transfer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_transfer),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
pub type gnttab_transfer_t = gnttab_transfer;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_transfer_t {
    pub p: *mut gnttab_transfer_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_transfer_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_transfer_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_transfer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_transfer_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_gnttab_transfer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_transfer_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_gnttab_transfer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_transfer_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_transfer_t {
    pub p: *mut gnttab_transfer_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_transfer_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_transfer_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_gnttab_transfer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_transfer_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_transfer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_transfer_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_transfer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_transfer_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_transfer_t {
    pub p: *const gnttab_transfer_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_transfer_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_transfer_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_transfer_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_transfer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_transfer_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_transfer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_transfer_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_transfer_t {
    pub p: *const gnttab_transfer_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_transfer_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_transfer_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_transfer_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_transfer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_transfer_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_transfer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_transfer_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_copy {
    pub source: gnttab_copy_gnttab_copy_ptr,
    pub dest: gnttab_copy_gnttab_copy_ptr,
    pub len: u16,
    pub flags: u16,
    pub status: i16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_copy_gnttab_copy_ptr {
    pub u: gnttab_copy_gnttab_copy_ptr__bindgen_ty_1,
    pub domid: domid_t,
    pub offset: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gnttab_copy_gnttab_copy_ptr__bindgen_ty_1 {
    pub ref_: grant_ref_t,
    pub gmfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_gnttab_copy_gnttab_copy_ptr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1)
        )
    );
    fn test_field_ref() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1),
                "::",
                stringify!(ref_)
            )
        );
    }
    test_field_ref();
    fn test_field_gmfn() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gmfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1),
                "::",
                stringify!(gmfn)
            )
        );
    }
    test_field_gmfn();
}
#[test]
fn bindgen_test_layout_gnttab_copy_gnttab_copy_ptr() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_copy_gnttab_copy_ptr>(),
        16usize,
        concat!("Size of: ", stringify!(gnttab_copy_gnttab_copy_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_copy_gnttab_copy_ptr>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_copy_gnttab_copy_ptr))
    );
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_copy_gnttab_copy_ptr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy_gnttab_copy_ptr),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_copy_gnttab_copy_ptr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy_gnttab_copy_ptr),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_copy_gnttab_copy_ptr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy_gnttab_copy_ptr),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
}
#[test]
fn bindgen_test_layout_gnttab_copy() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_copy>(),
        40usize,
        concat!("Size of: ", stringify!(gnttab_copy))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_copy>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_copy))
    );
    fn test_field_source() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_copy>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy),
                "::",
                stringify!(source)
            )
        );
    }
    test_field_source();
    fn test_field_dest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_copy>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy),
                "::",
                stringify!(dest)
            )
        );
    }
    test_field_dest();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_copy>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_copy>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_copy>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_copy),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
pub type gnttab_copy_t = gnttab_copy;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_copy_t {
    pub p: *mut gnttab_copy_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_copy_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_copy_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_gnttab_copy_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_gnttab_copy_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_copy_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_gnttab_copy_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_copy_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_copy_t {
    pub p: *mut gnttab_copy_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_copy_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_gnttab_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_copy_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_gnttab_copy_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_copy_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_copy_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_copy_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_copy_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_copy_t {
    pub p: *const gnttab_copy_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_copy_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_gnttab_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_copy_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_copy_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_copy_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_copy_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_copy_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_copy_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_copy_t {
    pub p: *const gnttab_copy_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_copy_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_copy_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_copy_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_copy_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_copy_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_copy_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_copy_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_copy_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_query_size {
    pub dom: domid_t,
    pub nr_frames: u32,
    pub max_nr_frames: u32,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_query_size() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_query_size>(),
        16usize,
        concat!("Size of: ", stringify!(gnttab_query_size))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_query_size>(),
        4usize,
        concat!("Alignment of ", stringify!(gnttab_query_size))
    );
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_query_size>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_query_size),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
    fn test_field_nr_frames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_query_size>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_frames) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_query_size),
                "::",
                stringify!(nr_frames)
            )
        );
    }
    test_field_nr_frames();
    fn test_field_max_nr_frames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_query_size>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_nr_frames) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_query_size),
                "::",
                stringify!(max_nr_frames)
            )
        );
    }
    test_field_max_nr_frames();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_query_size>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_query_size),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
pub type gnttab_query_size_t = gnttab_query_size;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_query_size_t {
    pub p: *mut gnttab_query_size_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_query_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_query_size_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_query_size_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_query_size_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_query_size_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_query_size_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_query_size_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_query_size_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_query_size_t {
    pub p: *mut gnttab_query_size_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_query_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_query_size_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_query_size_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_query_size_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_query_size_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_query_size_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_query_size_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_query_size_t {
    pub p: *const gnttab_query_size_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_query_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_query_size_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_query_size_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_query_size_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_query_size_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_query_size_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_query_size_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_query_size_t {
    pub p: *const gnttab_query_size_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_query_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_query_size_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_query_size_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_query_size_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_query_size_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_query_size_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_query_size_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_unmap_and_replace {
    pub host_addr: u64,
    pub new_addr: u64,
    pub handle: grant_handle_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_unmap_and_replace() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_unmap_and_replace>(),
        24usize,
        concat!("Size of: ", stringify!(gnttab_unmap_and_replace))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_unmap_and_replace>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_unmap_and_replace))
    );
    fn test_field_host_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_unmap_and_replace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).host_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_unmap_and_replace),
                "::",
                stringify!(host_addr)
            )
        );
    }
    test_field_host_addr();
    fn test_field_new_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_unmap_and_replace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).new_addr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_unmap_and_replace),
                "::",
                stringify!(new_addr)
            )
        );
    }
    test_field_new_addr();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_unmap_and_replace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_unmap_and_replace),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_unmap_and_replace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_unmap_and_replace),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
pub type gnttab_unmap_and_replace_t = gnttab_unmap_and_replace;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_unmap_and_replace_t {
    pub p: *mut gnttab_unmap_and_replace_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_unmap_and_replace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_unmap_and_replace_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_unmap_and_replace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_unmap_and_replace_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_unmap_and_replace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_unmap_and_replace_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_unmap_and_replace_t {
    pub p: *mut gnttab_unmap_and_replace_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_unmap_and_replace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_unmap_and_replace_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_unmap_and_replace_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_unmap_and_replace_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_unmap_and_replace_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_unmap_and_replace_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_unmap_and_replace_t {
    pub p: *const gnttab_unmap_and_replace_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_unmap_and_replace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_unmap_and_replace_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_gnttab_unmap_and_replace_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_unmap_and_replace_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_gnttab_unmap_and_replace_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_unmap_and_replace_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_unmap_and_replace_t {
    pub p: *const gnttab_unmap_and_replace_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_unmap_and_replace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_unmap_and_replace_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_unmap_and_replace_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_unmap_and_replace_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_unmap_and_replace_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_unmap_and_replace_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_set_version {
    pub version: u32,
}
#[test]
fn bindgen_test_layout_gnttab_set_version() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_set_version>(),
        4usize,
        concat!("Size of: ", stringify!(gnttab_set_version))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_set_version>(),
        4usize,
        concat!("Alignment of ", stringify!(gnttab_set_version))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_set_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_set_version),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
}
pub type gnttab_set_version_t = gnttab_set_version;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_set_version_t {
    pub p: *mut gnttab_set_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_set_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_set_version_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_set_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_set_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_set_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_set_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_set_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_set_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_set_version_t {
    pub p: *mut gnttab_set_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_set_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_set_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_set_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_set_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_set_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_set_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_set_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_set_version_t {
    pub p: *const gnttab_set_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_set_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_set_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_set_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_set_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_set_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_set_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_set_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_set_version_t {
    pub p: *const gnttab_set_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_set_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_set_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_set_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_set_version_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_set_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_set_version_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_set_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_get_status_frames {
    pub nr_frames: u32,
    pub dom: domid_t,
    pub status: i16,
    pub frame_list: __guest_handle_64_uint64_t,
}
#[test]
fn bindgen_test_layout_gnttab_get_status_frames() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_get_status_frames>(),
        16usize,
        concat!("Size of: ", stringify!(gnttab_get_status_frames))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_get_status_frames>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_get_status_frames))
    );
    fn test_field_nr_frames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_get_status_frames>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_frames) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_get_status_frames),
                "::",
                stringify!(nr_frames)
            )
        );
    }
    test_field_nr_frames();
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_get_status_frames>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_get_status_frames),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_get_status_frames>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_get_status_frames),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_frame_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_get_status_frames>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame_list) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_get_status_frames),
                "::",
                stringify!(frame_list)
            )
        );
    }
    test_field_frame_list();
}
pub type gnttab_get_status_frames_t = gnttab_get_status_frames;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_get_status_frames_t {
    pub p: *mut gnttab_get_status_frames_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_get_status_frames_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_get_status_frames_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_get_status_frames_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_get_status_frames_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_get_status_frames_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_get_status_frames_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_get_status_frames_t {
    pub p: *mut gnttab_get_status_frames_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_get_status_frames_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_get_status_frames_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_get_status_frames_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_get_status_frames_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_get_status_frames_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_get_status_frames_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_get_status_frames_t {
    pub p: *const gnttab_get_status_frames_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_get_status_frames_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_get_status_frames_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_gnttab_get_status_frames_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_get_status_frames_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_gnttab_get_status_frames_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_get_status_frames_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_get_status_frames_t {
    pub p: *const gnttab_get_status_frames_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_get_status_frames_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_get_status_frames_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_get_status_frames_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_get_status_frames_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_get_status_frames_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_get_status_frames_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_get_version {
    pub dom: domid_t,
    pub pad: u16,
    pub version: u32,
}
#[test]
fn bindgen_test_layout_gnttab_get_version() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_get_version>(),
        8usize,
        concat!("Size of: ", stringify!(gnttab_get_version))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_get_version>(),
        4usize,
        concat!("Alignment of ", stringify!(gnttab_get_version))
    );
    fn test_field_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_get_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_get_version),
                "::",
                stringify!(dom)
            )
        );
    }
    test_field_dom();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_get_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_get_version),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_get_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_get_version),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
}
pub type gnttab_get_version_t = gnttab_get_version;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_get_version_t {
    pub p: *mut gnttab_get_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_get_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_get_version_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_get_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_get_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_get_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_get_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_get_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_get_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_get_version_t {
    pub p: *mut gnttab_get_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_get_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_get_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_get_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_get_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_get_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_get_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_get_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_get_version_t {
    pub p: *const gnttab_get_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_get_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_get_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_get_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_get_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_get_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_get_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_get_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_get_version_t {
    pub p: *const gnttab_get_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_get_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_get_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_get_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_get_version_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_get_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_get_version_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_get_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_swap_grant_ref {
    pub ref_a: grant_ref_t,
    pub ref_b: grant_ref_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_swap_grant_ref() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_swap_grant_ref>(),
        12usize,
        concat!("Size of: ", stringify!(gnttab_swap_grant_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_swap_grant_ref>(),
        4usize,
        concat!("Alignment of ", stringify!(gnttab_swap_grant_ref))
    );
    fn test_field_ref_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_swap_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_a) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_swap_grant_ref),
                "::",
                stringify!(ref_a)
            )
        );
    }
    test_field_ref_a();
    fn test_field_ref_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_swap_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_b) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_swap_grant_ref),
                "::",
                stringify!(ref_b)
            )
        );
    }
    test_field_ref_b();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_swap_grant_ref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_swap_grant_ref),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
pub type gnttab_swap_grant_ref_t = gnttab_swap_grant_ref;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_swap_grant_ref_t {
    pub p: *mut gnttab_swap_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_swap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_swap_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_swap_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_swap_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_swap_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_swap_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_swap_grant_ref_t {
    pub p: *mut gnttab_swap_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_swap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_swap_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_swap_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_swap_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_swap_grant_ref_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_swap_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_swap_grant_ref_t {
    pub p: *const gnttab_swap_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_swap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_swap_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_swap_grant_ref_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_swap_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_swap_grant_ref_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_swap_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_swap_grant_ref_t {
    pub p: *const gnttab_swap_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_swap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_swap_grant_ref_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_swap_grant_ref_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_swap_grant_ref_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_gnttab_swap_grant_ref_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_swap_grant_ref_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_cache_flush {
    pub a: gnttab_cache_flush__bindgen_ty_1,
    pub offset: u16,
    pub length: u16,
    pub op: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gnttab_cache_flush__bindgen_ty_1 {
    pub dev_bus_addr: u64,
    pub ref_: grant_ref_t,
}
#[test]
fn bindgen_test_layout_gnttab_cache_flush__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_cache_flush__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(gnttab_cache_flush__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_cache_flush__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gnttab_cache_flush__bindgen_ty_1)
        )
    );
    fn test_field_dev_bus_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_cache_flush__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dev_bus_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_cache_flush__bindgen_ty_1),
                "::",
                stringify!(dev_bus_addr)
            )
        );
    }
    test_field_dev_bus_addr();
    fn test_field_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_cache_flush__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_cache_flush__bindgen_ty_1),
                "::",
                stringify!(ref_)
            )
        );
    }
    test_field_ref();
}
#[test]
fn bindgen_test_layout_gnttab_cache_flush() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_cache_flush>(),
        16usize,
        concat!("Size of: ", stringify!(gnttab_cache_flush))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_cache_flush>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_cache_flush))
    );
    fn test_field_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_cache_flush>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_cache_flush),
                "::",
                stringify!(a)
            )
        );
    }
    test_field_a();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_cache_flush>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_cache_flush),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_cache_flush>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_cache_flush),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<gnttab_cache_flush>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(gnttab_cache_flush),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
}
pub type gnttab_cache_flush_t = gnttab_cache_flush;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_cache_flush_t {
    pub p: *mut gnttab_cache_flush_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_cache_flush_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_cache_flush_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_cache_flush_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_cache_flush_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_cache_flush_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_cache_flush_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_gnttab_cache_flush_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_gnttab_cache_flush_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_cache_flush_t {
    pub p: *mut gnttab_cache_flush_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_cache_flush_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_cache_flush_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_cache_flush_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_cache_flush_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_gnttab_cache_flush_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_gnttab_cache_flush_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_cache_flush_t {
    pub p: *const gnttab_cache_flush_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_cache_flush_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_cache_flush_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_cache_flush_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_cache_flush_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_gnttab_cache_flush_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_gnttab_cache_flush_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_cache_flush_t {
    pub p: *const gnttab_cache_flush_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_cache_flush_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_cache_flush_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_cache_flush_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_cache_flush_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_gnttab_cache_flush_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_gnttab_cache_flush_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_save_descriptor {
    pub typecode: u16,
    pub instance: u16,
    pub length: u32,
}
#[test]
fn bindgen_test_layout_hvm_save_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<hvm_save_descriptor>(),
        8usize,
        concat!("Size of: ", stringify!(hvm_save_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<hvm_save_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(hvm_save_descriptor))
    );
    fn test_field_typecode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<hvm_save_descriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).typecode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(hvm_save_descriptor),
                "::",
                stringify!(typecode)
            )
        );
    }
    test_field_typecode();
    fn test_field_instance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<hvm_save_descriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(hvm_save_descriptor),
                "::",
                stringify!(instance)
            )
        );
    }
    test_field_instance();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<hvm_save_descriptor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(hvm_save_descriptor),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_save_end {}
#[test]
fn bindgen_test_layout_hvm_save_end() {
    assert_eq!(
        ::std::mem::size_of::<hvm_save_end>(),
        0usize,
        concat!("Size of: ", stringify!(hvm_save_end))
    );
    assert_eq!(
        ::std::mem::align_of::<hvm_save_end>(),
        1usize,
        concat!("Alignment of ", stringify!(hvm_save_end))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __HVM_SAVE_TYPE_END {
    pub t: hvm_save_end,
    pub c: __IncompleteArrayField<::std::os::raw::c_char>,
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout___HVM_SAVE_TYPE_END() {
    assert_eq!(
        ::std::mem::size_of::<__HVM_SAVE_TYPE_END>(),
        1usize,
        concat!("Size of: ", stringify!(__HVM_SAVE_TYPE_END))
    );
    assert_eq!(
        ::std::mem::align_of::<__HVM_SAVE_TYPE_END>(),
        1usize,
        concat!("Alignment of ", stringify!(__HVM_SAVE_TYPE_END))
    );
    fn test_field_t() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__HVM_SAVE_TYPE_END>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).t) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__HVM_SAVE_TYPE_END),
                "::",
                stringify!(t)
            )
        );
    }
    test_field_t();
    fn test_field_c() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__HVM_SAVE_TYPE_END>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__HVM_SAVE_TYPE_END),
                "::",
                stringify!(c)
            )
        );
    }
    test_field_c();
    fn test_field_cpt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__HVM_SAVE_TYPE_END>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpt) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__HVM_SAVE_TYPE_END),
                "::",
                stringify!(cpt)
            )
        );
    }
    test_field_cpt();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_eoi {
    pub irq: u32,
}
#[test]
fn bindgen_test_layout_physdev_eoi() {
    assert_eq!(
        ::std::mem::size_of::<physdev_eoi>(),
        4usize,
        concat!("Size of: ", stringify!(physdev_eoi))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_eoi>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_eoi))
    );
    fn test_field_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_eoi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_eoi),
                "::",
                stringify!(irq)
            )
        );
    }
    test_field_irq();
}
pub type physdev_eoi_t = physdev_eoi;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_eoi_t {
    pub p: *mut physdev_eoi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_eoi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_eoi_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_eoi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_eoi_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_physdev_eoi_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_eoi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_eoi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_eoi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_eoi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_eoi_t {
    pub p: *mut physdev_eoi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_eoi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_eoi_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_eoi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_eoi_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_physdev_eoi_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_physdev_eoi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_eoi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_physdev_eoi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_eoi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_eoi_t {
    pub p: *const physdev_eoi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_eoi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_eoi_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_physdev_eoi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_eoi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_eoi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_eoi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_eoi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_eoi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_eoi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_eoi_t {
    pub p: *const physdev_eoi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_eoi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_eoi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_eoi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_eoi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_eoi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_eoi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_eoi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_eoi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_eoi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pirq_eoi_gmfn {
    pub gmfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_physdev_pirq_eoi_gmfn() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pirq_eoi_gmfn>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_pirq_eoi_gmfn))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pirq_eoi_gmfn>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_pirq_eoi_gmfn))
    );
    fn test_field_gmfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pirq_eoi_gmfn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gmfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pirq_eoi_gmfn),
                "::",
                stringify!(gmfn)
            )
        );
    }
    test_field_gmfn();
}
pub type physdev_pirq_eoi_gmfn_t = physdev_pirq_eoi_gmfn;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_pirq_eoi_gmfn_t {
    pub p: *mut physdev_pirq_eoi_gmfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_pirq_eoi_gmfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_pirq_eoi_gmfn_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_pirq_eoi_gmfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_pirq_eoi_gmfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_pirq_eoi_gmfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_pirq_eoi_gmfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_pirq_eoi_gmfn_t {
    pub p: *mut physdev_pirq_eoi_gmfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_pirq_eoi_gmfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_pirq_eoi_gmfn_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_pirq_eoi_gmfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_pirq_eoi_gmfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_pirq_eoi_gmfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_pirq_eoi_gmfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_pirq_eoi_gmfn_t {
    pub p: *const physdev_pirq_eoi_gmfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_pirq_eoi_gmfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_pirq_eoi_gmfn_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_pirq_eoi_gmfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_pirq_eoi_gmfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_pirq_eoi_gmfn_t {
    pub p: *const physdev_pirq_eoi_gmfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_pirq_eoi_gmfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_pirq_eoi_gmfn_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_pirq_eoi_gmfn_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_pirq_eoi_gmfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_pirq_eoi_gmfn_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_pirq_eoi_gmfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_irq_status_query {
    pub irq: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_physdev_irq_status_query() {
    assert_eq!(
        ::std::mem::size_of::<physdev_irq_status_query>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_irq_status_query))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_irq_status_query>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_irq_status_query))
    );
    fn test_field_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_irq_status_query>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_irq_status_query),
                "::",
                stringify!(irq)
            )
        );
    }
    test_field_irq();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_irq_status_query>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_irq_status_query),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
pub type physdev_irq_status_query_t = physdev_irq_status_query;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_irq_status_query_t {
    pub p: *mut physdev_irq_status_query_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_irq_status_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_irq_status_query_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_irq_status_query_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_irq_status_query_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_irq_status_query_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_irq_status_query_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_irq_status_query_t {
    pub p: *mut physdev_irq_status_query_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_irq_status_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_irq_status_query_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_irq_status_query_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_irq_status_query_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_irq_status_query_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_irq_status_query_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_irq_status_query_t {
    pub p: *const physdev_irq_status_query_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_irq_status_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_irq_status_query_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_physdev_irq_status_query_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_irq_status_query_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_physdev_irq_status_query_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_irq_status_query_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_irq_status_query_t {
    pub p: *const physdev_irq_status_query_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_irq_status_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_irq_status_query_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_irq_status_query_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_irq_status_query_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_irq_status_query_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_irq_status_query_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_set_iopl {
    pub iopl: u32,
}
#[test]
fn bindgen_test_layout_physdev_set_iopl() {
    assert_eq!(
        ::std::mem::size_of::<physdev_set_iopl>(),
        4usize,
        concat!("Size of: ", stringify!(physdev_set_iopl))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_set_iopl>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_set_iopl))
    );
    fn test_field_iopl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_set_iopl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iopl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_set_iopl),
                "::",
                stringify!(iopl)
            )
        );
    }
    test_field_iopl();
}
pub type physdev_set_iopl_t = physdev_set_iopl;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_set_iopl_t {
    pub p: *mut physdev_set_iopl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_set_iopl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_set_iopl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_set_iopl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_set_iopl_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_set_iopl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_set_iopl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_set_iopl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_set_iopl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_set_iopl_t {
    pub p: *mut physdev_set_iopl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_set_iopl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_set_iopl_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_set_iopl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_set_iopl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_set_iopl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_set_iopl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_set_iopl_t {
    pub p: *const physdev_set_iopl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_set_iopl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_set_iopl_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_set_iopl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_set_iopl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_set_iopl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_set_iopl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_set_iopl_t {
    pub p: *const physdev_set_iopl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_set_iopl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_set_iopl_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_set_iopl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_set_iopl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_set_iopl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_set_iopl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_set_iobitmap {
    pub bitmap: __guest_handle_64_uint8,
    pub nr_ports: u32,
}
#[test]
fn bindgen_test_layout_physdev_set_iobitmap() {
    assert_eq!(
        ::std::mem::size_of::<physdev_set_iobitmap>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_set_iobitmap))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_set_iobitmap>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_set_iobitmap))
    );
    fn test_field_bitmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_set_iobitmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bitmap) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_set_iobitmap),
                "::",
                stringify!(bitmap)
            )
        );
    }
    test_field_bitmap();
    fn test_field_nr_ports() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_set_iobitmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_ports) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_set_iobitmap),
                "::",
                stringify!(nr_ports)
            )
        );
    }
    test_field_nr_ports();
}
pub type physdev_set_iobitmap_t = physdev_set_iobitmap;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_set_iobitmap_t {
    pub p: *mut physdev_set_iobitmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_set_iobitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_set_iobitmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_set_iobitmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_set_iobitmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_set_iobitmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_set_iobitmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_set_iobitmap_t {
    pub p: *mut physdev_set_iobitmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_set_iobitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_set_iobitmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_set_iobitmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_set_iobitmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_set_iobitmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_set_iobitmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_set_iobitmap_t {
    pub p: *const physdev_set_iobitmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_set_iobitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_set_iobitmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_set_iobitmap_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_set_iobitmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_set_iobitmap_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_set_iobitmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_set_iobitmap_t {
    pub p: *const physdev_set_iobitmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_set_iobitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_set_iobitmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_set_iobitmap_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_set_iobitmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_set_iobitmap_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_set_iobitmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_apic {
    pub apic_physbase: ::std::os::raw::c_ulong,
    pub reg: u32,
    pub value: u32,
}
#[test]
fn bindgen_test_layout_physdev_apic() {
    assert_eq!(
        ::std::mem::size_of::<physdev_apic>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_apic))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_apic>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_apic))
    );
    fn test_field_apic_physbase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_apic>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).apic_physbase) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_apic),
                "::",
                stringify!(apic_physbase)
            )
        );
    }
    test_field_apic_physbase();
    fn test_field_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_apic>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_apic),
                "::",
                stringify!(reg)
            )
        );
    }
    test_field_reg();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_apic>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_apic),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
pub type physdev_apic_t = physdev_apic;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_apic_t {
    pub p: *mut physdev_apic_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_apic_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_apic_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_apic_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_apic_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_physdev_apic_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_apic_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_apic_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_apic_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_apic_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_apic_t {
    pub p: *mut physdev_apic_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_apic_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_apic_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_apic_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_apic_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_apic_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_physdev_apic_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_apic_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_physdev_apic_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_apic_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_apic_t {
    pub p: *const physdev_apic_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_apic_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_apic_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_physdev_apic_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_apic_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_apic_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_apic_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_apic_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_apic_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_apic_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_apic_t {
    pub p: *const physdev_apic_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_apic_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_apic_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_apic_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_apic_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_apic_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_apic_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_apic_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_apic_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_apic_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_irq {
    pub irq: u32,
    pub vector: u32,
}
#[test]
fn bindgen_test_layout_physdev_irq() {
    assert_eq!(
        ::std::mem::size_of::<physdev_irq>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_irq))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_irq>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_irq))
    );
    fn test_field_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_irq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_irq),
                "::",
                stringify!(irq)
            )
        );
    }
    test_field_irq();
    fn test_field_vector() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_irq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_irq),
                "::",
                stringify!(vector)
            )
        );
    }
    test_field_vector();
}
pub type physdev_irq_t = physdev_irq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_irq_t {
    pub p: *mut physdev_irq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_irq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_irq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_irq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_irq_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_physdev_irq_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_irq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_irq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_irq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_irq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_irq_t {
    pub p: *mut physdev_irq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_irq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_irq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_irq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_irq_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_physdev_irq_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_physdev_irq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_irq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_physdev_irq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_irq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_irq_t {
    pub p: *const physdev_irq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_irq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_irq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_physdev_irq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_irq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_irq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_irq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_irq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_irq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_irq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_irq_t {
    pub p: *const physdev_irq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_irq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_irq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_irq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_irq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_irq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_irq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_irq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_irq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_irq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_map_pirq {
    pub domid: domid_t,
    pub type_: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub pirq: ::std::os::raw::c_int,
    pub bus: ::std::os::raw::c_int,
    pub devfn: ::std::os::raw::c_int,
    pub entry_nr: ::std::os::raw::c_int,
    pub table_base: u64,
}
#[test]
fn bindgen_test_layout_physdev_map_pirq() {
    assert_eq!(
        ::std::mem::size_of::<physdev_map_pirq>(),
        40usize,
        concat!("Size of: ", stringify!(physdev_map_pirq))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_map_pirq>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_map_pirq))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_map_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_map_pirq),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_map_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_map_pirq),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_map_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_map_pirq),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_pirq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_map_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pirq) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_map_pirq),
                "::",
                stringify!(pirq)
            )
        );
    }
    test_field_pirq();
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_map_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_map_pirq),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_devfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_map_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devfn) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_map_pirq),
                "::",
                stringify!(devfn)
            )
        );
    }
    test_field_devfn();
    fn test_field_entry_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_map_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).entry_nr) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_map_pirq),
                "::",
                stringify!(entry_nr)
            )
        );
    }
    test_field_entry_nr();
    fn test_field_table_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_map_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).table_base) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_map_pirq),
                "::",
                stringify!(table_base)
            )
        );
    }
    test_field_table_base();
}
pub type physdev_map_pirq_t = physdev_map_pirq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_map_pirq_t {
    pub p: *mut physdev_map_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_map_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_map_pirq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_map_pirq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_map_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_map_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_map_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_map_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_map_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_map_pirq_t {
    pub p: *mut physdev_map_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_map_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_map_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_map_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_map_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_map_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_map_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_map_pirq_t {
    pub p: *const physdev_map_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_map_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_map_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_map_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_map_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_map_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_map_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_map_pirq_t {
    pub p: *const physdev_map_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_map_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_map_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_map_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_map_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_map_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_map_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_unmap_pirq {
    pub domid: domid_t,
    pub pirq: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_physdev_unmap_pirq() {
    assert_eq!(
        ::std::mem::size_of::<physdev_unmap_pirq>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_unmap_pirq))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_unmap_pirq>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_unmap_pirq))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_unmap_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_unmap_pirq),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_pirq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_unmap_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pirq) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_unmap_pirq),
                "::",
                stringify!(pirq)
            )
        );
    }
    test_field_pirq();
}
pub type physdev_unmap_pirq_t = physdev_unmap_pirq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_unmap_pirq_t {
    pub p: *mut physdev_unmap_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_unmap_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_unmap_pirq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_unmap_pirq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_unmap_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_unmap_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_unmap_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_unmap_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_unmap_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_unmap_pirq_t {
    pub p: *mut physdev_unmap_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_unmap_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_unmap_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_unmap_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_unmap_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_unmap_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_unmap_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_unmap_pirq_t {
    pub p: *const physdev_unmap_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_unmap_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_unmap_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_unmap_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_unmap_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_unmap_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_unmap_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_unmap_pirq_t {
    pub p: *const physdev_unmap_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_unmap_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_unmap_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_unmap_pirq_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_unmap_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_unmap_pirq_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_unmap_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_manage_pci {
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_manage_pci() {
    assert_eq!(
        ::std::mem::size_of::<physdev_manage_pci>(),
        2usize,
        concat!("Size of: ", stringify!(physdev_manage_pci))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_manage_pci>(),
        1usize,
        concat!("Alignment of ", stringify!(physdev_manage_pci))
    );
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_manage_pci>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_manage_pci),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_devfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_manage_pci>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devfn) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_manage_pci),
                "::",
                stringify!(devfn)
            )
        );
    }
    test_field_devfn();
}
pub type physdev_manage_pci_t = physdev_manage_pci;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_manage_pci_t {
    pub p: *mut physdev_manage_pci_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_manage_pci_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_manage_pci_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_manage_pci_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_manage_pci_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_manage_pci_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_manage_pci_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_manage_pci_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_manage_pci_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_manage_pci_t {
    pub p: *mut physdev_manage_pci_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_manage_pci_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_manage_pci_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_manage_pci_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_manage_pci_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_manage_pci_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_manage_pci_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_manage_pci_t {
    pub p: *const physdev_manage_pci_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_manage_pci_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_manage_pci_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_manage_pci_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_manage_pci_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_manage_pci_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_manage_pci_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_manage_pci_t {
    pub p: *const physdev_manage_pci_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_manage_pci_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_manage_pci_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_manage_pci_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_manage_pci_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_manage_pci_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_restore_msi {
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_restore_msi() {
    assert_eq!(
        ::std::mem::size_of::<physdev_restore_msi>(),
        2usize,
        concat!("Size of: ", stringify!(physdev_restore_msi))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_restore_msi>(),
        1usize,
        concat!("Alignment of ", stringify!(physdev_restore_msi))
    );
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_restore_msi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_restore_msi),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_devfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_restore_msi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devfn) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_restore_msi),
                "::",
                stringify!(devfn)
            )
        );
    }
    test_field_devfn();
}
pub type physdev_restore_msi_t = physdev_restore_msi;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_restore_msi_t {
    pub p: *mut physdev_restore_msi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_restore_msi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_restore_msi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_restore_msi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_restore_msi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_restore_msi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_restore_msi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_restore_msi_t {
    pub p: *mut physdev_restore_msi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_restore_msi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_restore_msi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_restore_msi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_restore_msi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_restore_msi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_restore_msi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_restore_msi_t {
    pub p: *const physdev_restore_msi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_restore_msi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_restore_msi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_restore_msi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_restore_msi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_restore_msi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_restore_msi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_restore_msi_t {
    pub p: *const physdev_restore_msi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_restore_msi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_restore_msi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_const_physdev_restore_msi_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_restore_msi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_const_physdev_restore_msi_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_restore_msi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_manage_pci_ext {
    pub bus: u8,
    pub devfn: u8,
    pub is_extfn: u32,
    pub is_virtfn: u32,
    pub physfn: physdev_manage_pci_ext__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_manage_pci_ext__bindgen_ty_1 {
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_manage_pci_ext__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<physdev_manage_pci_ext__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(physdev_manage_pci_ext__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_manage_pci_ext__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(physdev_manage_pci_ext__bindgen_ty_1)
        )
    );
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<physdev_manage_pci_ext__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_manage_pci_ext__bindgen_ty_1),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_devfn() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<physdev_manage_pci_ext__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devfn) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_manage_pci_ext__bindgen_ty_1),
                "::",
                stringify!(devfn)
            )
        );
    }
    test_field_devfn();
}
#[test]
fn bindgen_test_layout_physdev_manage_pci_ext() {
    assert_eq!(
        ::std::mem::size_of::<physdev_manage_pci_ext>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_manage_pci_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_manage_pci_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_manage_pci_ext))
    );
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_manage_pci_ext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_manage_pci_ext),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_devfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_manage_pci_ext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devfn) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_manage_pci_ext),
                "::",
                stringify!(devfn)
            )
        );
    }
    test_field_devfn();
    fn test_field_is_extfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_manage_pci_ext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_extfn) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_manage_pci_ext),
                "::",
                stringify!(is_extfn)
            )
        );
    }
    test_field_is_extfn();
    fn test_field_is_virtfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_manage_pci_ext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_virtfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_manage_pci_ext),
                "::",
                stringify!(is_virtfn)
            )
        );
    }
    test_field_is_virtfn();
    fn test_field_physfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_manage_pci_ext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).physfn) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_manage_pci_ext),
                "::",
                stringify!(physfn)
            )
        );
    }
    test_field_physfn();
}
pub type physdev_manage_pci_ext_t = physdev_manage_pci_ext;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_manage_pci_ext_t {
    pub p: *mut physdev_manage_pci_ext_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_manage_pci_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_manage_pci_ext_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_manage_pci_ext_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_manage_pci_ext_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_manage_pci_ext_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_manage_pci_ext_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_manage_pci_ext_t {
    pub p: *mut physdev_manage_pci_ext_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_manage_pci_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_manage_pci_ext_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_manage_pci_ext_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_manage_pci_ext_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_manage_pci_ext_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_manage_pci_ext_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_manage_pci_ext_t {
    pub p: *const physdev_manage_pci_ext_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_manage_pci_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_manage_pci_ext_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_physdev_manage_pci_ext_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_manage_pci_ext_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_physdev_manage_pci_ext_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_manage_pci_ext_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_manage_pci_ext_t {
    pub p: *const physdev_manage_pci_ext_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_manage_pci_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_ext_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_manage_pci_ext_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_manage_pci_ext_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_manage_pci_ext_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_manage_pci_ext_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_op {
    pub cmd: u32,
    pub u: physdev_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union physdev_op__bindgen_ty_1 {
    pub irq_status_query: physdev_irq_status_query_t,
    pub set_iopl: physdev_set_iopl_t,
    pub set_iobitmap: physdev_set_iobitmap_t,
    pub apic_op: physdev_apic_t,
    pub irq_op: physdev_irq_t,
}
#[test]
fn bindgen_test_layout_physdev_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<physdev_op__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_op__bindgen_ty_1))
    );
    fn test_field_irq_status_query() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).irq_status_query) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_op__bindgen_ty_1),
                "::",
                stringify!(irq_status_query)
            )
        );
    }
    test_field_irq_status_query();
    fn test_field_set_iopl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_iopl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_op__bindgen_ty_1),
                "::",
                stringify!(set_iopl)
            )
        );
    }
    test_field_set_iopl();
    fn test_field_set_iobitmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_iobitmap) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_op__bindgen_ty_1),
                "::",
                stringify!(set_iobitmap)
            )
        );
    }
    test_field_set_iobitmap();
    fn test_field_apic_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).apic_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_op__bindgen_ty_1),
                "::",
                stringify!(apic_op)
            )
        );
    }
    test_field_apic_op();
    fn test_field_irq_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).irq_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_op__bindgen_ty_1),
                "::",
                stringify!(irq_op)
            )
        );
    }
    test_field_irq_op();
}
#[test]
fn bindgen_test_layout_physdev_op() {
    assert_eq!(
        ::std::mem::size_of::<physdev_op>(),
        24usize,
        concat!("Size of: ", stringify!(physdev_op))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_op>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type physdev_op_t = physdev_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_op_t {
    pub p: *mut physdev_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_physdev_op_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_op_t {
    pub p: *mut physdev_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_physdev_op_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_physdev_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_physdev_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_op_t {
    pub p: *const physdev_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_physdev_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_physdev_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_physdev_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_op_t {
    pub p: *const physdev_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_setup_gsi {
    pub gsi: ::std::os::raw::c_int,
    pub triggering: u8,
    pub polarity: u8,
}
#[test]
fn bindgen_test_layout_physdev_setup_gsi() {
    assert_eq!(
        ::std::mem::size_of::<physdev_setup_gsi>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_setup_gsi))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_setup_gsi>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_setup_gsi))
    );
    fn test_field_gsi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_setup_gsi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gsi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_setup_gsi),
                "::",
                stringify!(gsi)
            )
        );
    }
    test_field_gsi();
    fn test_field_triggering() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_setup_gsi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).triggering) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_setup_gsi),
                "::",
                stringify!(triggering)
            )
        );
    }
    test_field_triggering();
    fn test_field_polarity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_setup_gsi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).polarity) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_setup_gsi),
                "::",
                stringify!(polarity)
            )
        );
    }
    test_field_polarity();
}
pub type physdev_setup_gsi_t = physdev_setup_gsi;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_setup_gsi_t {
    pub p: *mut physdev_setup_gsi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_setup_gsi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_setup_gsi_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_setup_gsi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_setup_gsi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_setup_gsi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_setup_gsi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_setup_gsi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_setup_gsi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_setup_gsi_t {
    pub p: *mut physdev_setup_gsi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_setup_gsi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_setup_gsi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_setup_gsi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_setup_gsi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_setup_gsi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_setup_gsi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_setup_gsi_t {
    pub p: *const physdev_setup_gsi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_setup_gsi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_setup_gsi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_setup_gsi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_setup_gsi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_setup_gsi_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_setup_gsi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_setup_gsi_t {
    pub p: *const physdev_setup_gsi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_setup_gsi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_setup_gsi_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_setup_gsi_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_setup_gsi_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_setup_gsi_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_setup_gsi_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_get_free_pirq {
    pub type_: ::std::os::raw::c_int,
    pub pirq: u32,
}
#[test]
fn bindgen_test_layout_physdev_get_free_pirq() {
    assert_eq!(
        ::std::mem::size_of::<physdev_get_free_pirq>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_get_free_pirq))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_get_free_pirq>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_get_free_pirq))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_get_free_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_get_free_pirq),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_pirq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_get_free_pirq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pirq) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_get_free_pirq),
                "::",
                stringify!(pirq)
            )
        );
    }
    test_field_pirq();
}
pub type physdev_get_free_pirq_t = physdev_get_free_pirq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_get_free_pirq_t {
    pub p: *mut physdev_get_free_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_get_free_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_get_free_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_get_free_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_get_free_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_get_free_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_get_free_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_get_free_pirq_t {
    pub p: *mut physdev_get_free_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_get_free_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_get_free_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_get_free_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_get_free_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_get_free_pirq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_get_free_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_get_free_pirq_t {
    pub p: *const physdev_get_free_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_get_free_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_get_free_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_get_free_pirq_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_get_free_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_get_free_pirq_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_get_free_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_get_free_pirq_t {
    pub p: *const physdev_get_free_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_get_free_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_get_free_pirq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_get_free_pirq_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_get_free_pirq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_get_free_pirq_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_get_free_pirq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pci_mmcfg_reserved {
    pub address: u64,
    pub segment: u16,
    pub start_bus: u8,
    pub end_bus: u8,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_physdev_pci_mmcfg_reserved() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pci_mmcfg_reserved>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_pci_mmcfg_reserved))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pci_mmcfg_reserved>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_pci_mmcfg_reserved))
    );
    fn test_field_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_mmcfg_reserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_mmcfg_reserved),
                "::",
                stringify!(address)
            )
        );
    }
    test_field_address();
    fn test_field_segment() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_mmcfg_reserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).segment) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_mmcfg_reserved),
                "::",
                stringify!(segment)
            )
        );
    }
    test_field_segment();
    fn test_field_start_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_mmcfg_reserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_bus) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_mmcfg_reserved),
                "::",
                stringify!(start_bus)
            )
        );
    }
    test_field_start_bus();
    fn test_field_end_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_mmcfg_reserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end_bus) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_mmcfg_reserved),
                "::",
                stringify!(end_bus)
            )
        );
    }
    test_field_end_bus();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_mmcfg_reserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_mmcfg_reserved),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
pub type physdev_pci_mmcfg_reserved_t = physdev_pci_mmcfg_reserved;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_pci_mmcfg_reserved_t {
    pub p: *mut physdev_pci_mmcfg_reserved_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_pci_mmcfg_reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_pci_mmcfg_reserved_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_pci_mmcfg_reserved_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_pci_mmcfg_reserved_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_pci_mmcfg_reserved_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_pci_mmcfg_reserved_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_pci_mmcfg_reserved_t {
    pub p: *mut physdev_pci_mmcfg_reserved_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_pci_mmcfg_reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_pci_mmcfg_reserved_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_physdev_pci_mmcfg_reserved_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_pci_mmcfg_reserved_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_physdev_pci_mmcfg_reserved_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_pci_mmcfg_reserved_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_pci_mmcfg_reserved_t {
    pub p: *const physdev_pci_mmcfg_reserved_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_pci_mmcfg_reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_pci_mmcfg_reserved_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_physdev_pci_mmcfg_reserved_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_pci_mmcfg_reserved_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_physdev_pci_mmcfg_reserved_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_pci_mmcfg_reserved_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_pci_mmcfg_reserved_t {
    pub p: *const physdev_pci_mmcfg_reserved_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_pci_mmcfg_reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_pci_mmcfg_reserved_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_pci_mmcfg_reserved_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_pci_mmcfg_reserved_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_pci_mmcfg_reserved_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_pci_mmcfg_reserved_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug)]
pub struct physdev_pci_device_add {
    pub seg: u16,
    pub bus: u8,
    pub devfn: u8,
    pub flags: u32,
    pub physfn: physdev_pci_device_add__bindgen_ty_1,
    pub optarr: __IncompleteArrayField<u32>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pci_device_add__bindgen_ty_1 {
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_pci_device_add__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pci_device_add__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(physdev_pci_device_add__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pci_device_add__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(physdev_pci_device_add__bindgen_ty_1)
        )
    );
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<physdev_pci_device_add__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device_add__bindgen_ty_1),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_devfn() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<physdev_pci_device_add__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devfn) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device_add__bindgen_ty_1),
                "::",
                stringify!(devfn)
            )
        );
    }
    test_field_devfn();
}
#[test]
fn bindgen_test_layout_physdev_pci_device_add() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pci_device_add>(),
        12usize,
        concat!("Size of: ", stringify!(physdev_pci_device_add))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pci_device_add>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_pci_device_add))
    );
    fn test_field_seg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_device_add>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device_add),
                "::",
                stringify!(seg)
            )
        );
    }
    test_field_seg();
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_device_add>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device_add),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_devfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_device_add>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devfn) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device_add),
                "::",
                stringify!(devfn)
            )
        );
    }
    test_field_devfn();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_device_add>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device_add),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_physfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_device_add>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).physfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device_add),
                "::",
                stringify!(physfn)
            )
        );
    }
    test_field_physfn();
    fn test_field_optarr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_device_add>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).optarr) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device_add),
                "::",
                stringify!(optarr)
            )
        );
    }
    test_field_optarr();
}
pub type physdev_pci_device_add_t = physdev_pci_device_add;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_pci_device_add_t {
    pub p: *mut physdev_pci_device_add_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_pci_device_add_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_pci_device_add_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_pci_device_add_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_pci_device_add_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_pci_device_add_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_pci_device_add_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_pci_device_add_t {
    pub p: *mut physdev_pci_device_add_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_pci_device_add_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_pci_device_add_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_pci_device_add_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_pci_device_add_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_pci_device_add_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_pci_device_add_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_pci_device_add_t {
    pub p: *const physdev_pci_device_add_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_pci_device_add_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_pci_device_add_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_physdev_pci_device_add_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_pci_device_add_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_physdev_pci_device_add_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_pci_device_add_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_pci_device_add_t {
    pub p: *const physdev_pci_device_add_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_pci_device_add_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_pci_device_add_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_pci_device_add_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_pci_device_add_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_physdev_pci_device_add_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_pci_device_add_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pci_device {
    pub seg: u16,
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_pci_device() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pci_device>(),
        4usize,
        concat!("Size of: ", stringify!(physdev_pci_device))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pci_device>(),
        2usize,
        concat!("Alignment of ", stringify!(physdev_pci_device))
    );
    fn test_field_seg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_device>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device),
                "::",
                stringify!(seg)
            )
        );
    }
    test_field_seg();
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_device>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_devfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_pci_device>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devfn) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_pci_device),
                "::",
                stringify!(devfn)
            )
        );
    }
    test_field_devfn();
}
pub type physdev_pci_device_t = physdev_pci_device;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_pci_device_t {
    pub p: *mut physdev_pci_device_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_pci_device_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_pci_device_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_pci_device_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_pci_device_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_pci_device_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_pci_device_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_physdev_pci_device_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_pci_device_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_pci_device_t {
    pub p: *mut physdev_pci_device_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_pci_device_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_pci_device_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_pci_device_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_pci_device_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_pci_device_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_pci_device_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_pci_device_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_pci_device_t {
    pub p: *const physdev_pci_device_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_pci_device_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_pci_device_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_pci_device_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_pci_device_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_pci_device_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_pci_device_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_pci_device_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_pci_device_t {
    pub p: *const physdev_pci_device_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_pci_device_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_pci_device_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_pci_device_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_pci_device_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_pci_device_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_pci_device_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_pci_device_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_dbgp_op {
    pub op: u8,
    pub bus: u8,
    pub u: physdev_dbgp_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union physdev_dbgp_op__bindgen_ty_1 {
    pub pci: physdev_pci_device_t,
}
#[test]
fn bindgen_test_layout_physdev_dbgp_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<physdev_dbgp_op__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(physdev_dbgp_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_dbgp_op__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(physdev_dbgp_op__bindgen_ty_1))
    );
    fn test_field_pci() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_dbgp_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pci) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_dbgp_op__bindgen_ty_1),
                "::",
                stringify!(pci)
            )
        );
    }
    test_field_pci();
}
#[test]
fn bindgen_test_layout_physdev_dbgp_op() {
    assert_eq!(
        ::std::mem::size_of::<physdev_dbgp_op>(),
        6usize,
        concat!("Size of: ", stringify!(physdev_dbgp_op))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_dbgp_op>(),
        2usize,
        concat!("Alignment of ", stringify!(physdev_dbgp_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_dbgp_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_dbgp_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_dbgp_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_dbgp_op),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<physdev_dbgp_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(physdev_dbgp_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type physdev_dbgp_op_t = physdev_dbgp_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_dbgp_op_t {
    pub p: *mut physdev_dbgp_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_dbgp_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_dbgp_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_dbgp_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_dbgp_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_dbgp_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_dbgp_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_physdev_dbgp_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_physdev_dbgp_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_dbgp_op_t {
    pub p: *mut physdev_dbgp_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_dbgp_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_dbgp_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_dbgp_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_dbgp_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_dbgp_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_dbgp_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_physdev_dbgp_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_physdev_dbgp_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_dbgp_op_t {
    pub p: *const physdev_dbgp_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_dbgp_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_dbgp_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_dbgp_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_dbgp_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_dbgp_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_physdev_dbgp_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_physdev_dbgp_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_dbgp_op_t {
    pub p: *const physdev_dbgp_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_dbgp_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_dbgp_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_dbgp_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_dbgp_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_dbgp_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_physdev_dbgp_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_physdev_dbgp_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_memory_reservation {
    pub extent_start: __guest_handle_64_xen_pfn_t,
    pub nr_extents: xen_ulong_t,
    pub extent_order: ::std::os::raw::c_uint,
    pub mem_flags: ::std::os::raw::c_uint,
    pub domid: domid_t,
}
#[test]
fn bindgen_test_layout_xen_memory_reservation() {
    assert_eq!(
        ::std::mem::size_of::<xen_memory_reservation>(),
        32usize,
        concat!("Size of: ", stringify!(xen_memory_reservation))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_memory_reservation>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_memory_reservation))
    );
    fn test_field_extent_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_reservation>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extent_start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_reservation),
                "::",
                stringify!(extent_start)
            )
        );
    }
    test_field_extent_start();
    fn test_field_nr_extents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_reservation>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_extents) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_reservation),
                "::",
                stringify!(nr_extents)
            )
        );
    }
    test_field_nr_extents();
    fn test_field_extent_order() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_reservation>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extent_order) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_reservation),
                "::",
                stringify!(extent_order)
            )
        );
    }
    test_field_extent_order();
    fn test_field_mem_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_reservation>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_flags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_reservation),
                "::",
                stringify!(mem_flags)
            )
        );
    }
    test_field_mem_flags();
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_reservation>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_reservation),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
}
pub type xen_memory_reservation_t = xen_memory_reservation;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_memory_reservation_t {
    pub p: *mut xen_memory_reservation_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_memory_reservation_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_memory_reservation_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_memory_reservation_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_memory_reservation_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_memory_reservation_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_memory_reservation_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_memory_reservation_t {
    pub p: *mut xen_memory_reservation_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_memory_reservation_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_memory_reservation_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_memory_reservation_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_memory_reservation_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_memory_reservation_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_memory_reservation_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_memory_reservation_t {
    pub p: *const xen_memory_reservation_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_memory_reservation_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_memory_reservation_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xen_memory_reservation_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_memory_reservation_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xen_memory_reservation_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_memory_reservation_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_memory_reservation_t {
    pub p: *const xen_memory_reservation_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_memory_reservation_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_memory_reservation_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_memory_reservation_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_memory_reservation_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_memory_reservation_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_memory_reservation_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_memory_exchange {
    pub in_: xen_memory_reservation,
    pub out: xen_memory_reservation,
    pub nr_exchanged: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_memory_exchange() {
    assert_eq!(
        ::std::mem::size_of::<xen_memory_exchange>(),
        72usize,
        concat!("Size of: ", stringify!(xen_memory_exchange))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_memory_exchange>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_memory_exchange))
    );
    fn test_field_in() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_exchange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_exchange),
                "::",
                stringify!(in_)
            )
        );
    }
    test_field_in();
    fn test_field_out() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_exchange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_exchange),
                "::",
                stringify!(out)
            )
        );
    }
    test_field_out();
    fn test_field_nr_exchanged() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_exchange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_exchanged) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_exchange),
                "::",
                stringify!(nr_exchanged)
            )
        );
    }
    test_field_nr_exchanged();
}
pub type xen_memory_exchange_t = xen_memory_exchange;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_memory_exchange_t {
    pub p: *mut xen_memory_exchange_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_memory_exchange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_memory_exchange_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_memory_exchange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_memory_exchange_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_memory_exchange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_memory_exchange_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_memory_exchange_t {
    pub p: *mut xen_memory_exchange_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_memory_exchange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_memory_exchange_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_memory_exchange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_memory_exchange_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_memory_exchange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_memory_exchange_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_memory_exchange_t {
    pub p: *const xen_memory_exchange_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_memory_exchange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_memory_exchange_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_memory_exchange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_memory_exchange_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_memory_exchange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_memory_exchange_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_memory_exchange_t {
    pub p: *const xen_memory_exchange_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_memory_exchange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_memory_exchange_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_const_xen_memory_exchange_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_memory_exchange_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_const_xen_memory_exchange_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_memory_exchange_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_memory_domain {
    pub domid: domid_t,
}
#[test]
fn bindgen_test_layout_xen_memory_domain() {
    assert_eq!(
        ::std::mem::size_of::<xen_memory_domain>(),
        2usize,
        concat!("Size of: ", stringify!(xen_memory_domain))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_memory_domain>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_memory_domain))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_domain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_domain),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_machphys_mfn_list {
    pub max_extents: ::std::os::raw::c_uint,
    pub extent_start: __guest_handle_64_xen_pfn_t,
    pub nr_extents: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xen_machphys_mfn_list() {
    assert_eq!(
        ::std::mem::size_of::<xen_machphys_mfn_list>(),
        24usize,
        concat!("Size of: ", stringify!(xen_machphys_mfn_list))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_machphys_mfn_list>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_machphys_mfn_list))
    );
    fn test_field_max_extents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_machphys_mfn_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_extents) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_machphys_mfn_list),
                "::",
                stringify!(max_extents)
            )
        );
    }
    test_field_max_extents();
    fn test_field_extent_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_machphys_mfn_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extent_start) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_machphys_mfn_list),
                "::",
                stringify!(extent_start)
            )
        );
    }
    test_field_extent_start();
    fn test_field_nr_extents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_machphys_mfn_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_extents) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_machphys_mfn_list),
                "::",
                stringify!(nr_extents)
            )
        );
    }
    test_field_nr_extents();
}
pub type xen_machphys_mfn_list_t = xen_machphys_mfn_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_machphys_mfn_list_t {
    pub p: *mut xen_machphys_mfn_list_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_machphys_mfn_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_machphys_mfn_list_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_machphys_mfn_list_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_machphys_mfn_list_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_machphys_mfn_list_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_machphys_mfn_list_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_machphys_mfn_list_t {
    pub p: *mut xen_machphys_mfn_list_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_machphys_mfn_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_machphys_mfn_list_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_machphys_mfn_list_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_machphys_mfn_list_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_machphys_mfn_list_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_machphys_mfn_list_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_machphys_mfn_list_t {
    pub p: *const xen_machphys_mfn_list_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_machphys_mfn_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_machphys_mfn_list_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_machphys_mfn_list_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_machphys_mfn_list_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_machphys_mfn_list_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_machphys_mfn_list_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_machphys_mfn_list_t {
    pub p: *const xen_machphys_mfn_list_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_machphys_mfn_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_machphys_mfn_list_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_machphys_mfn_list_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_machphys_mfn_list_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_machphys_mfn_list_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_machphys_mfn_list_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_machphys_mapping {
    pub v_start: xen_ulong_t,
    pub v_end: xen_ulong_t,
    pub max_mfn: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_machphys_mapping() {
    assert_eq!(
        ::std::mem::size_of::<xen_machphys_mapping>(),
        24usize,
        concat!("Size of: ", stringify!(xen_machphys_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_machphys_mapping>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_machphys_mapping))
    );
    fn test_field_v_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_machphys_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v_start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_machphys_mapping),
                "::",
                stringify!(v_start)
            )
        );
    }
    test_field_v_start();
    fn test_field_v_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_machphys_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v_end) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_machphys_mapping),
                "::",
                stringify!(v_end)
            )
        );
    }
    test_field_v_end();
    fn test_field_max_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_machphys_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_mfn) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_machphys_mapping),
                "::",
                stringify!(max_mfn)
            )
        );
    }
    test_field_max_mfn();
}
pub type xen_machphys_mapping_t = xen_machphys_mapping;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_machphys_mapping_t {
    pub p: *mut xen_machphys_mapping_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_machphys_mapping_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_machphys_mapping_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_machphys_mapping_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_machphys_mapping_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_machphys_mapping_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_machphys_mapping_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_machphys_mapping_t {
    pub p: *mut xen_machphys_mapping_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_machphys_mapping_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_machphys_mapping_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_machphys_mapping_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_machphys_mapping_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_machphys_mapping_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_machphys_mapping_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_machphys_mapping_t {
    pub p: *const xen_machphys_mapping_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_machphys_mapping_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_machphys_mapping_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_machphys_mapping_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_machphys_mapping_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_machphys_mapping_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_machphys_mapping_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_machphys_mapping_t {
    pub p: *const xen_machphys_mapping_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_machphys_mapping_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_machphys_mapping_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_machphys_mapping_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_machphys_mapping_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_machphys_mapping_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_machphys_mapping_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_add_to_physmap {
    pub domid: domid_t,
    pub size: u16,
    pub space: ::std::os::raw::c_uint,
    pub idx: xen_ulong_t,
    pub gpfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_add_to_physmap() {
    assert_eq!(
        ::std::mem::size_of::<xen_add_to_physmap>(),
        24usize,
        concat!("Size of: ", stringify!(xen_add_to_physmap))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_add_to_physmap>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_add_to_physmap))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_space() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap),
                "::",
                stringify!(space)
            )
        );
    }
    test_field_space();
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
    fn test_field_gpfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpfn) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap),
                "::",
                stringify!(gpfn)
            )
        );
    }
    test_field_gpfn();
}
pub type xen_add_to_physmap_t = xen_add_to_physmap;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_add_to_physmap_t {
    pub p: *mut xen_add_to_physmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_add_to_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_add_to_physmap_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_add_to_physmap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_add_to_physmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_add_to_physmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_add_to_physmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_add_to_physmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_add_to_physmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_add_to_physmap_t {
    pub p: *mut xen_add_to_physmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_add_to_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_add_to_physmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_add_to_physmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_add_to_physmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_add_to_physmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_add_to_physmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_add_to_physmap_t {
    pub p: *const xen_add_to_physmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_add_to_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_add_to_physmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_add_to_physmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_add_to_physmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_add_to_physmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_add_to_physmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_add_to_physmap_t {
    pub p: *const xen_add_to_physmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_add_to_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_add_to_physmap_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_add_to_physmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_add_to_physmap_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_add_to_physmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_add_to_physmap_batch {
    pub domid: domid_t,
    pub space: u16,
    pub size: u16,
    pub u: xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra,
    pub idxs: __guest_handle_64_xen_ulong_t,
    pub gpfns: __guest_handle_64_xen_pfn_t,
    pub errs: __guest_handle_64_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra {
    pub foreign_domid: domid_t,
    pub res0: u16,
}
#[test]
fn bindgen_test_layout_xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra() {
    assert_eq!(
        ::std::mem::size_of::<xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra)
        )
    );
    fn test_field_foreign_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).foreign_domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra),
                "::",
                stringify!(foreign_domid)
            )
        );
    }
    test_field_foreign_domid();
    fn test_field_res0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).res0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra),
                "::",
                stringify!(res0)
            )
        );
    }
    test_field_res0();
}
#[test]
fn bindgen_test_layout_xen_add_to_physmap_batch() {
    assert_eq!(
        ::std::mem::size_of::<xen_add_to_physmap_batch>(),
        32usize,
        concat!("Size of: ", stringify!(xen_add_to_physmap_batch))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_add_to_physmap_batch>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_add_to_physmap_batch))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap_batch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap_batch),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_space() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap_batch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap_batch),
                "::",
                stringify!(space)
            )
        );
    }
    test_field_space();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap_batch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap_batch),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap_batch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap_batch),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_idxs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap_batch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idxs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap_batch),
                "::",
                stringify!(idxs)
            )
        );
    }
    test_field_idxs();
    fn test_field_gpfns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap_batch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpfns) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap_batch),
                "::",
                stringify!(gpfns)
            )
        );
    }
    test_field_gpfns();
    fn test_field_errs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_add_to_physmap_batch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errs) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_add_to_physmap_batch),
                "::",
                stringify!(errs)
            )
        );
    }
    test_field_errs();
}
pub type xen_add_to_physmap_batch_t = xen_add_to_physmap_batch;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_add_to_physmap_batch_t {
    pub p: *mut xen_add_to_physmap_batch_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_add_to_physmap_batch_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_add_to_physmap_batch_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_add_to_physmap_batch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_add_to_physmap_batch_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_add_to_physmap_batch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_add_to_physmap_batch_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_add_to_physmap_batch_t {
    pub p: *mut xen_add_to_physmap_batch_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_add_to_physmap_batch_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_add_to_physmap_batch_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_add_to_physmap_batch_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_add_to_physmap_batch_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_add_to_physmap_batch_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_add_to_physmap_batch_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_add_to_physmap_batch_t {
    pub p: *const xen_add_to_physmap_batch_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_add_to_physmap_batch_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_add_to_physmap_batch_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_add_to_physmap_batch_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_add_to_physmap_batch_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_add_to_physmap_batch_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_add_to_physmap_batch_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_add_to_physmap_batch_t {
    pub p: *const xen_add_to_physmap_batch_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_add_to_physmap_batch_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_batch_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_add_to_physmap_batch_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_add_to_physmap_batch_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_add_to_physmap_batch_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_add_to_physmap_batch_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_remove_from_physmap {
    pub domid: domid_t,
    pub gpfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_remove_from_physmap() {
    assert_eq!(
        ::std::mem::size_of::<xen_remove_from_physmap>(),
        16usize,
        concat!("Size of: ", stringify!(xen_remove_from_physmap))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_remove_from_physmap>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_remove_from_physmap))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_remove_from_physmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_remove_from_physmap),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_gpfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_remove_from_physmap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_remove_from_physmap),
                "::",
                stringify!(gpfn)
            )
        );
    }
    test_field_gpfn();
}
pub type xen_remove_from_physmap_t = xen_remove_from_physmap;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_remove_from_physmap_t {
    pub p: *mut xen_remove_from_physmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_remove_from_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_remove_from_physmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_remove_from_physmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_remove_from_physmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_remove_from_physmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_remove_from_physmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_remove_from_physmap_t {
    pub p: *mut xen_remove_from_physmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_remove_from_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_remove_from_physmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_remove_from_physmap_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_remove_from_physmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_remove_from_physmap_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_remove_from_physmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_remove_from_physmap_t {
    pub p: *const xen_remove_from_physmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_remove_from_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_remove_from_physmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_remove_from_physmap_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_remove_from_physmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_remove_from_physmap_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_remove_from_physmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_remove_from_physmap_t {
    pub p: *const xen_remove_from_physmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_remove_from_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_remove_from_physmap_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_remove_from_physmap_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_remove_from_physmap_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_remove_from_physmap_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_remove_from_physmap_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_memory_map {
    pub nr_entries: ::std::os::raw::c_uint,
    pub buffer: __guest_handle_64_void,
}
#[test]
fn bindgen_test_layout_xen_memory_map() {
    assert_eq!(
        ::std::mem::size_of::<xen_memory_map>(),
        16usize,
        concat!("Size of: ", stringify!(xen_memory_map))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_memory_map>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_memory_map))
    );
    fn test_field_nr_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_entries) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_map),
                "::",
                stringify!(nr_entries)
            )
        );
    }
    test_field_nr_entries();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_memory_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_memory_map),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
}
pub type xen_memory_map_t = xen_memory_map;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_memory_map_t {
    pub p: *mut xen_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_memory_map_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_memory_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_memory_map_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_memory_map_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_memory_map_t {
    pub p: *mut xen_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_memory_map_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_memory_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_memory_map_t {
    pub p: *const xen_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_memory_map_t {
    pub p: *const xen_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_foreign_memory_map {
    pub domid: domid_t,
    pub map: xen_memory_map,
}
#[test]
fn bindgen_test_layout_xen_foreign_memory_map() {
    assert_eq!(
        ::std::mem::size_of::<xen_foreign_memory_map>(),
        24usize,
        concat!("Size of: ", stringify!(xen_foreign_memory_map))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_foreign_memory_map>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_foreign_memory_map))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_foreign_memory_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_foreign_memory_map),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_foreign_memory_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_foreign_memory_map),
                "::",
                stringify!(map)
            )
        );
    }
    test_field_map();
}
pub type xen_foreign_memory_map_t = xen_foreign_memory_map;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_foreign_memory_map_t {
    pub p: *mut xen_foreign_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_foreign_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_foreign_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_foreign_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_foreign_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_foreign_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_foreign_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_foreign_memory_map_t {
    pub p: *mut xen_foreign_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_foreign_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_foreign_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_foreign_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_foreign_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_foreign_memory_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_foreign_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_foreign_memory_map_t {
    pub p: *const xen_foreign_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_foreign_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_foreign_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xen_foreign_memory_map_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_foreign_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xen_foreign_memory_map_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_foreign_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_foreign_memory_map_t {
    pub p: *const xen_foreign_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_foreign_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_foreign_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_foreign_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_foreign_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_foreign_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_foreign_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_pod_target {
    pub target_pages: u64,
    pub tot_pages: u64,
    pub pod_cache_pages: u64,
    pub pod_entries: u64,
    pub domid: domid_t,
}
#[test]
fn bindgen_test_layout_xen_pod_target() {
    assert_eq!(
        ::std::mem::size_of::<xen_pod_target>(),
        40usize,
        concat!("Size of: ", stringify!(xen_pod_target))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_pod_target>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_pod_target))
    );
    fn test_field_target_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pod_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target_pages) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pod_target),
                "::",
                stringify!(target_pages)
            )
        );
    }
    test_field_target_pages();
    fn test_field_tot_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pod_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tot_pages) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pod_target),
                "::",
                stringify!(tot_pages)
            )
        );
    }
    test_field_tot_pages();
    fn test_field_pod_cache_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pod_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pod_cache_pages) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pod_target),
                "::",
                stringify!(pod_cache_pages)
            )
        );
    }
    test_field_pod_cache_pages();
    fn test_field_pod_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pod_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pod_entries) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pod_target),
                "::",
                stringify!(pod_entries)
            )
        );
    }
    test_field_pod_entries();
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pod_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pod_target),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
}
pub type xen_pod_target_t = xen_pod_target;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_paging_op {
    pub op: u8,
    pub domain: domid_t,
    pub buffer: __guest_handle_64_const_uint8,
    pub gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_mem_paging_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_paging_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_mem_paging_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_paging_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_mem_paging_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_paging_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_paging_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_paging_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_paging_op),
                "::",
                stringify!(domain)
            )
        );
    }
    test_field_domain();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_paging_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_paging_op),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_paging_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gfn) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_paging_op),
                "::",
                stringify!(gfn)
            )
        );
    }
    test_field_gfn();
}
pub type xen_mem_paging_op_t = xen_mem_paging_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_mem_paging_op_t {
    pub p: *mut xen_mem_paging_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_mem_paging_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_mem_paging_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_mem_paging_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_mem_paging_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_mem_paging_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_mem_paging_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_mem_paging_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_mem_paging_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_mem_paging_op_t {
    pub p: *mut xen_mem_paging_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_mem_paging_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_mem_paging_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_mem_paging_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_mem_paging_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_mem_paging_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_mem_paging_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_mem_paging_op_t {
    pub p: *const xen_mem_paging_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_mem_paging_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_mem_paging_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_mem_paging_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_mem_paging_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_mem_paging_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_mem_paging_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_mem_paging_op_t {
    pub p: *const xen_mem_paging_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_mem_paging_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_mem_paging_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_mem_paging_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_mem_paging_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_mem_paging_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_mem_paging_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
pub const xenmem_access_t_XENMEM_access_n: xenmem_access_t = 0;
pub const xenmem_access_t_XENMEM_access_r: xenmem_access_t = 1;
pub const xenmem_access_t_XENMEM_access_w: xenmem_access_t = 2;
pub const xenmem_access_t_XENMEM_access_rw: xenmem_access_t = 3;
pub const xenmem_access_t_XENMEM_access_x: xenmem_access_t = 4;
pub const xenmem_access_t_XENMEM_access_rx: xenmem_access_t = 5;
pub const xenmem_access_t_XENMEM_access_wx: xenmem_access_t = 6;
pub const xenmem_access_t_XENMEM_access_rwx: xenmem_access_t = 7;
pub const xenmem_access_t_XENMEM_access_rx2rw: xenmem_access_t = 8;
pub const xenmem_access_t_XENMEM_access_n2rwx: xenmem_access_t = 9;
pub const xenmem_access_t_XENMEM_access_default: xenmem_access_t = 10;
pub type xenmem_access_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_access_op {
    pub op: u8,
    pub access: u8,
    pub domid: domid_t,
    pub nr: u32,
    pub pfn: u64,
    pub pfn_list: __guest_handle_64_const_uint64,
    pub access_list: __guest_handle_64_const_uint8,
}
#[test]
fn bindgen_test_layout_xen_mem_access_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_access_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_mem_access_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_access_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_mem_access_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_access_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_access_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_access() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_access_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_access_op),
                "::",
                stringify!(access)
            )
        );
    }
    test_field_access();
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_access_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_access_op),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_access_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_access_op),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_pfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_access_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_access_op),
                "::",
                stringify!(pfn)
            )
        );
    }
    test_field_pfn();
    fn test_field_pfn_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_access_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pfn_list) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_access_op),
                "::",
                stringify!(pfn_list)
            )
        );
    }
    test_field_pfn_list();
    fn test_field_access_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_access_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).access_list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_access_op),
                "::",
                stringify!(access_list)
            )
        );
    }
    test_field_access_list();
}
pub type xen_mem_access_op_t = xen_mem_access_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_mem_access_op_t {
    pub p: *mut xen_mem_access_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_mem_access_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_mem_access_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_mem_access_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_mem_access_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_mem_access_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_mem_access_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_mem_access_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_mem_access_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_mem_access_op_t {
    pub p: *mut xen_mem_access_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_mem_access_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_mem_access_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_mem_access_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_mem_access_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_mem_access_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_mem_access_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_mem_access_op_t {
    pub p: *const xen_mem_access_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_mem_access_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_mem_access_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_mem_access_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_mem_access_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_mem_access_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_mem_access_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_mem_access_op_t {
    pub p: *const xen_mem_access_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_mem_access_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_mem_access_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_mem_access_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_mem_access_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_mem_access_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_mem_access_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op {
    pub op: u8,
    pub domain: domid_t,
    pub u: xen_mem_sharing_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1 {
    pub nominate: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
    pub share: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
    pub range: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
    pub debug: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug,
    pub fork: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate {
    pub u: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
    pub handle: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1 {
    pub gfn: u64,
    pub grant_ref: u32,
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1)
        )
    );
    fn test_field_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1),
                "::",
                stringify!(gfn)
            )
        );
    }
    test_field_gfn();
    fn test_field_grant_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).grant_ref) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1),
                "::",
                stringify!(grant_ref)
            )
        );
    }
    test_field_grant_ref();
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate)
        )
    );
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share {
    pub source_gfn: u64,
    pub source_handle: u64,
    pub client_gfn: u64,
    pub client_handle: u64,
    pub client_domain: domid_t,
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share)
        )
    );
    fn test_field_source_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).source_gfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
                "::",
                stringify!(source_gfn)
            )
        );
    }
    test_field_source_gfn();
    fn test_field_source_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).source_handle) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
                "::",
                stringify!(source_handle)
            )
        );
    }
    test_field_source_handle();
    fn test_field_client_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).client_gfn) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
                "::",
                stringify!(client_gfn)
            )
        );
    }
    test_field_client_gfn();
    fn test_field_client_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).client_handle) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
                "::",
                stringify!(client_handle)
            )
        );
    }
    test_field_client_handle();
    fn test_field_client_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).client_domain) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
                "::",
                stringify!(client_domain)
            )
        );
    }
    test_field_client_domain();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range {
    pub first_gfn: u64,
    pub last_gfn: u64,
    pub opaque: u64,
    pub client_domain: domid_t,
    pub _pad: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range)
        )
    );
    fn test_field_first_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_gfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
                "::",
                stringify!(first_gfn)
            )
        );
    }
    test_field_first_gfn();
    fn test_field_last_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_gfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
                "::",
                stringify!(last_gfn)
            )
        );
    }
    test_field_last_gfn();
    fn test_field_opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
                "::",
                stringify!(opaque)
            )
        );
    }
    test_field_opaque();
    fn test_field_client_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).client_domain) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
                "::",
                stringify!(client_domain)
            )
        );
    }
    test_field_client_domain();
    fn test_field__pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
                "::",
                stringify!(_pad)
            )
        );
    }
    test_field__pad();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug {
    pub u: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1 {
    pub gfn: u64,
    pub mfn: u64,
    pub gref: u32,
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1)
        )
    );
    fn test_field_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1),
                "::",
                stringify!(gfn)
            )
        );
    }
    test_field_gfn();
    fn test_field_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1),
                "::",
                stringify!(mfn)
            )
        );
    }
    test_field_mfn();
    fn test_field_gref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gref) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1),
                "::",
                stringify!(gref)
            )
        );
    }
    test_field_gref();
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug)
        )
    );
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork {
    pub parent_domain: domid_t,
    pub flags: u16,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork)
        )
    );
    fn test_field_parent_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent_domain) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork),
                "::",
                stringify!(parent_domain)
            )
        );
    }
    test_field_parent_domain();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(xen_mem_sharing_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1)
        )
    );
    fn test_field_nominate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_sharing_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nominate) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1),
                "::",
                stringify!(nominate)
            )
        );
    }
    test_field_nominate();
    fn test_field_share() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_sharing_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).share) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1),
                "::",
                stringify!(share)
            )
        );
    }
    test_field_share();
    fn test_field_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_sharing_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1),
                "::",
                stringify!(range)
            )
        );
    }
    test_field_range();
    fn test_field_debug() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_sharing_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).debug) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1),
                "::",
                stringify!(debug)
            )
        );
    }
    test_field_debug();
    fn test_field_fork() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_sharing_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fork) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op__bindgen_ty_1),
                "::",
                stringify!(fork)
            )
        );
    }
    test_field_fork();
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op>(),
        48usize,
        concat!("Size of: ", stringify!(xen_mem_sharing_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_mem_sharing_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_sharing_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_sharing_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op),
                "::",
                stringify!(domain)
            )
        );
    }
    test_field_domain();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_sharing_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_sharing_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type xen_mem_sharing_op_t = xen_mem_sharing_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_mem_sharing_op_t {
    pub p: *mut xen_mem_sharing_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_mem_sharing_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_mem_sharing_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_mem_sharing_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_mem_sharing_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_mem_sharing_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_mem_sharing_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_mem_sharing_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_mem_sharing_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_mem_sharing_op_t {
    pub p: *mut xen_mem_sharing_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_mem_sharing_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_mem_sharing_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_mem_sharing_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_mem_sharing_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_mem_sharing_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_mem_sharing_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_mem_sharing_op_t {
    pub p: *const xen_mem_sharing_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_mem_sharing_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_mem_sharing_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_mem_sharing_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_mem_sharing_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_mem_sharing_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_mem_sharing_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_mem_sharing_op_t {
    pub p: *const xen_mem_sharing_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_mem_sharing_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_mem_sharing_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_mem_sharing_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_mem_sharing_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_mem_sharing_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_mem_sharing_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_reserved_device_memory {
    pub start_pfn: xen_pfn_t,
    pub nr_pages: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_reserved_device_memory() {
    assert_eq!(
        ::std::mem::size_of::<xen_reserved_device_memory>(),
        16usize,
        concat!("Size of: ", stringify!(xen_reserved_device_memory))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_reserved_device_memory>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_reserved_device_memory))
    );
    fn test_field_start_pfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_reserved_device_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_pfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_reserved_device_memory),
                "::",
                stringify!(start_pfn)
            )
        );
    }
    test_field_start_pfn();
    fn test_field_nr_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_reserved_device_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_pages) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_reserved_device_memory),
                "::",
                stringify!(nr_pages)
            )
        );
    }
    test_field_nr_pages();
}
pub type xen_reserved_device_memory_t = xen_reserved_device_memory;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_reserved_device_memory_t {
    pub p: *mut xen_reserved_device_memory_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_reserved_device_memory_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_reserved_device_memory_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_reserved_device_memory_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_reserved_device_memory_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_reserved_device_memory_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_reserved_device_memory_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_reserved_device_memory_t {
    pub p: *mut xen_reserved_device_memory_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_reserved_device_memory_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_reserved_device_memory_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_reserved_device_memory_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_reserved_device_memory_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_reserved_device_memory_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_reserved_device_memory_t {
    pub p: *const xen_reserved_device_memory_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_reserved_device_memory_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_reserved_device_memory_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_reserved_device_memory_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_reserved_device_memory_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_reserved_device_memory_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_reserved_device_memory_t {
    pub p: *const xen_reserved_device_memory_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_reserved_device_memory_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_reserved_device_memory_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_reserved_device_memory_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_reserved_device_memory_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_reserved_device_memory_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_reserved_device_memory_map {
    pub flags: u32,
    pub nr_entries: ::std::os::raw::c_uint,
    pub buffer: __guest_handle_64_xen_reserved_device_memory_t,
    pub dev: xen_reserved_device_memory_map__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_reserved_device_memory_map__bindgen_ty_1 {
    pub pci: physdev_pci_device_t,
}
#[test]
fn bindgen_test_layout_xen_reserved_device_memory_map__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_reserved_device_memory_map__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(xen_reserved_device_memory_map__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_reserved_device_memory_map__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(xen_reserved_device_memory_map__bindgen_ty_1)
        )
    );
    fn test_field_pci() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_reserved_device_memory_map__bindgen_ty_1>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pci) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_reserved_device_memory_map__bindgen_ty_1),
                "::",
                stringify!(pci)
            )
        );
    }
    test_field_pci();
}
#[test]
fn bindgen_test_layout_xen_reserved_device_memory_map() {
    assert_eq!(
        ::std::mem::size_of::<xen_reserved_device_memory_map>(),
        24usize,
        concat!("Size of: ", stringify!(xen_reserved_device_memory_map))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_reserved_device_memory_map>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_reserved_device_memory_map))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_reserved_device_memory_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_reserved_device_memory_map),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_nr_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_reserved_device_memory_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_entries) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_reserved_device_memory_map),
                "::",
                stringify!(nr_entries)
            )
        );
    }
    test_field_nr_entries();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_reserved_device_memory_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_reserved_device_memory_map),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_dev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_reserved_device_memory_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_reserved_device_memory_map),
                "::",
                stringify!(dev)
            )
        );
    }
    test_field_dev();
}
pub type xen_reserved_device_memory_map_t = xen_reserved_device_memory_map;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_reserved_device_memory_map_t {
    pub p: *mut xen_reserved_device_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_reserved_device_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_reserved_device_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_xen_reserved_device_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_reserved_device_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_xen_reserved_device_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_reserved_device_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_reserved_device_memory_map_t {
    pub p: *mut xen_reserved_device_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_reserved_device_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_reserved_device_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_reserved_device_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_reserved_device_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_reserved_device_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_reserved_device_memory_map_t {
    pub p: *const xen_reserved_device_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_reserved_device_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_reserved_device_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_reserved_device_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_reserved_device_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_reserved_device_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_reserved_device_memory_map_t {
    pub p: *const xen_reserved_device_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_reserved_device_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_map_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_reserved_device_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_reserved_device_memory_map_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_reserved_device_memory_map_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_reserved_device_memory_map_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_acquire_resource {
    pub domid: domid_t,
    pub type_: u16,
    pub id: u32,
    pub nr_frames: u32,
    pub pad: u32,
    pub frame: u64,
    pub frame_list: __guest_handle_64_xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_mem_acquire_resource() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_acquire_resource>(),
        32usize,
        concat!("Size of: ", stringify!(xen_mem_acquire_resource))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_acquire_resource>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_mem_acquire_resource))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_acquire_resource>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_acquire_resource),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_acquire_resource>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_acquire_resource),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_acquire_resource>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_acquire_resource),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_nr_frames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_acquire_resource>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_frames) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_acquire_resource),
                "::",
                stringify!(nr_frames)
            )
        );
    }
    test_field_nr_frames();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_acquire_resource>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_acquire_resource),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_acquire_resource>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_acquire_resource),
                "::",
                stringify!(frame)
            )
        );
    }
    test_field_frame();
    fn test_field_frame_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_mem_acquire_resource>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame_list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_mem_acquire_resource),
                "::",
                stringify!(frame_list)
            )
        );
    }
    test_field_frame_list();
}
pub type xen_mem_acquire_resource_t = xen_mem_acquire_resource;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_mem_acquire_resource_t {
    pub p: *mut xen_mem_acquire_resource_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_mem_acquire_resource_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_mem_acquire_resource_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_mem_acquire_resource_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_mem_acquire_resource_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_mem_acquire_resource_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_mem_acquire_resource_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_mem_acquire_resource_t {
    pub p: *mut xen_mem_acquire_resource_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_mem_acquire_resource_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_mem_acquire_resource_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_mem_acquire_resource_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_mem_acquire_resource_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_mem_acquire_resource_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_mem_acquire_resource_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_mem_acquire_resource_t {
    pub p: *const xen_mem_acquire_resource_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_mem_acquire_resource_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_mem_acquire_resource_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_mem_acquire_resource_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_mem_acquire_resource_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_mem_acquire_resource_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_mem_acquire_resource_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_mem_acquire_resource_t {
    pub p: *const xen_mem_acquire_resource_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_mem_acquire_resource_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_mem_acquire_resource_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_mem_acquire_resource_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_mem_acquire_resource_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_mem_acquire_resource_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_mem_acquire_resource_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_vmemrange {
    pub start: u64,
    pub end: u64,
    pub flags: ::std::os::raw::c_uint,
    pub nid: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xen_vmemrange() {
    assert_eq!(
        ::std::mem::size_of::<xen_vmemrange>(),
        24usize,
        concat!("Size of: ", stringify!(xen_vmemrange))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vmemrange>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_vmemrange))
    );
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vmemrange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vmemrange),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
    fn test_field_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vmemrange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vmemrange),
                "::",
                stringify!(end)
            )
        );
    }
    test_field_end();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vmemrange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vmemrange),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_nid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vmemrange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nid) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vmemrange),
                "::",
                stringify!(nid)
            )
        );
    }
    test_field_nid();
}
pub type xen_vmemrange_t = xen_vmemrange;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_vmemrange_t {
    pub p: *mut xen_vmemrange_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_vmemrange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_vmemrange_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_vmemrange_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_vmemrange_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_vmemrange_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_vmemrange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_vmemrange_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_vmemrange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_vmemrange_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_vmemrange_t {
    pub p: *mut xen_vmemrange_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_vmemrange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_vmemrange_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_vmemrange_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_vmemrange_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_vmemrange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_vmemrange_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_vmemrange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_vmemrange_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_vmemrange_t {
    pub p: *const xen_vmemrange_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_vmemrange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_vmemrange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_vmemrange_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_vmemrange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_vmemrange_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_vmemrange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_vmemrange_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_vmemrange_t {
    pub p: *const xen_vmemrange_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_vmemrange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_vmemrange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_vmemrange_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_vmemrange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_vmemrange_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_vmemrange_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_vmemrange_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_vnuma_topology_info {
    pub domid: domid_t,
    pub pad: u16,
    pub nr_vnodes: ::std::os::raw::c_uint,
    pub nr_vcpus: ::std::os::raw::c_uint,
    pub nr_vmemranges: ::std::os::raw::c_uint,
    pub vdistance: xen_vnuma_topology_info__bindgen_ty_1,
    pub vcpu_to_vnode: xen_vnuma_topology_info__bindgen_ty_2,
    pub vmemrange: xen_vnuma_topology_info__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_1 {
    pub h: __guest_handle_64_uint,
    pub pad: u64,
}
#[test]
fn bindgen_test_layout_xen_vnuma_topology_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_vnuma_topology_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vnuma_topology_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_1)
        )
    );
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_vnuma_topology_info__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info__bindgen_ty_1),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_vnuma_topology_info__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info__bindgen_ty_1),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_2 {
    pub h: __guest_handle_64_uint,
    pub pad: u64,
}
#[test]
fn bindgen_test_layout_xen_vnuma_topology_info__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_vnuma_topology_info__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vnuma_topology_info__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_2)
        )
    );
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_vnuma_topology_info__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info__bindgen_ty_2),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_vnuma_topology_info__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info__bindgen_ty_2),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_3 {
    pub h: __guest_handle_64_xen_vmemrange_t,
    pub pad: u64,
}
#[test]
fn bindgen_test_layout_xen_vnuma_topology_info__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xen_vnuma_topology_info__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vnuma_topology_info__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_3)
        )
    );
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_vnuma_topology_info__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info__bindgen_ty_3),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_vnuma_topology_info__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info__bindgen_ty_3),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[test]
fn bindgen_test_layout_xen_vnuma_topology_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_vnuma_topology_info>(),
        40usize,
        concat!("Size of: ", stringify!(xen_vnuma_topology_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vnuma_topology_info>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_vnuma_topology_info))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vnuma_topology_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vnuma_topology_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_nr_vnodes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vnuma_topology_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vnodes) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info),
                "::",
                stringify!(nr_vnodes)
            )
        );
    }
    test_field_nr_vnodes();
    fn test_field_nr_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vnuma_topology_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vcpus) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info),
                "::",
                stringify!(nr_vcpus)
            )
        );
    }
    test_field_nr_vcpus();
    fn test_field_nr_vmemranges() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vnuma_topology_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vmemranges) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info),
                "::",
                stringify!(nr_vmemranges)
            )
        );
    }
    test_field_nr_vmemranges();
    fn test_field_vdistance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vnuma_topology_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vdistance) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info),
                "::",
                stringify!(vdistance)
            )
        );
    }
    test_field_vdistance();
    fn test_field_vcpu_to_vnode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vnuma_topology_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_to_vnode) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info),
                "::",
                stringify!(vcpu_to_vnode)
            )
        );
    }
    test_field_vcpu_to_vnode();
    fn test_field_vmemrange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_vnuma_topology_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmemrange) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_vnuma_topology_info),
                "::",
                stringify!(vmemrange)
            )
        );
    }
    test_field_vmemrange();
}
pub type xen_vnuma_topology_info_t = xen_vnuma_topology_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_vnuma_topology_info_t {
    pub p: *mut xen_vnuma_topology_info_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_vnuma_topology_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_vnuma_topology_info_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_vnuma_topology_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_vnuma_topology_info_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_vnuma_topology_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_vnuma_topology_info_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_vnuma_topology_info_t {
    pub p: *mut xen_vnuma_topology_info_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_vnuma_topology_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_vnuma_topology_info_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_vnuma_topology_info_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_vnuma_topology_info_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_vnuma_topology_info_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_vnuma_topology_info_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_vnuma_topology_info_t {
    pub p: *const xen_vnuma_topology_info_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_vnuma_topology_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_vnuma_topology_info_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_vnuma_topology_info_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_vnuma_topology_info_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_vnuma_topology_info_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_vnuma_topology_info_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_vnuma_topology_info_t {
    pub p: *const xen_vnuma_topology_info_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_vnuma_topology_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_vnuma_topology_info_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_vnuma_topology_info_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_vnuma_topology_info_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_vnuma_topology_info_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_vnuma_topology_info_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_createdomain {
    pub ssidref: u32,
    pub handle: xen_domain_handle_t,
    pub flags: u32,
    pub iommu_opts: u32,
    pub max_vcpus: u32,
    pub max_evtchn_port: u32,
    pub max_grant_frames: i32,
    pub max_maptrack_frames: i32,
    pub grant_opts: u32,
    pub vmtrace_size: u32,
    pub cpupool_id: u32,
    pub arch: xen_arch_domainconfig,
}
#[test]
fn bindgen_test_layout_xen_domctl_createdomain() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_createdomain>(),
        68usize,
        concat!("Size of: ", stringify!(xen_domctl_createdomain))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_createdomain>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_createdomain))
    );
    fn test_field_ssidref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ssidref) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(ssidref)
            )
        );
    }
    test_field_ssidref();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_iommu_opts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iommu_opts) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(iommu_opts)
            )
        );
    }
    test_field_iommu_opts();
    fn test_field_max_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_vcpus) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(max_vcpus)
            )
        );
    }
    test_field_max_vcpus();
    fn test_field_max_evtchn_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_evtchn_port) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(max_evtchn_port)
            )
        );
    }
    test_field_max_evtchn_port();
    fn test_field_max_grant_frames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_grant_frames) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(max_grant_frames)
            )
        );
    }
    test_field_max_grant_frames();
    fn test_field_max_maptrack_frames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_maptrack_frames) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(max_maptrack_frames)
            )
        );
    }
    test_field_max_maptrack_frames();
    fn test_field_grant_opts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).grant_opts) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(grant_opts)
            )
        );
    }
    test_field_grant_opts();
    fn test_field_vmtrace_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmtrace_size) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(vmtrace_size)
            )
        );
    }
    test_field_vmtrace_size();
    fn test_field_cpupool_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpupool_id) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(cpupool_id)
            )
        );
    }
    test_field_cpupool_id();
    fn test_field_arch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_createdomain>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_createdomain),
                "::",
                stringify!(arch)
            )
        );
    }
    test_field_arch();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_getdomaininfo {
    pub domain: domid_t,
    pub pad1: u16,
    pub flags: u32,
    pub tot_pages: u64,
    pub max_pages: u64,
    pub outstanding_pages: u64,
    pub shr_pages: u64,
    pub paged_pages: u64,
    pub shared_info_frame: u64,
    pub cpu_time: u64,
    pub nr_online_vcpus: u32,
    pub max_vcpu_id: u32,
    pub ssidref: u32,
    pub handle: xen_domain_handle_t,
    pub cpupool: u32,
    pub gpaddr_bits: u8,
    pub pad2: [u8; 7usize],
    pub arch_config: xen_arch_domainconfig,
}
#[test]
fn bindgen_test_layout_xen_domctl_getdomaininfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_getdomaininfo>(),
        120usize,
        concat!("Size of: ", stringify!(xen_domctl_getdomaininfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_getdomaininfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_getdomaininfo))
    );
    fn test_field_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(domain)
            )
        );
    }
    test_field_domain();
    fn test_field_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(pad1)
            )
        );
    }
    test_field_pad1();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_tot_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tot_pages) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(tot_pages)
            )
        );
    }
    test_field_tot_pages();
    fn test_field_max_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_pages) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(max_pages)
            )
        );
    }
    test_field_max_pages();
    fn test_field_outstanding_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outstanding_pages) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(outstanding_pages)
            )
        );
    }
    test_field_outstanding_pages();
    fn test_field_shr_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shr_pages) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(shr_pages)
            )
        );
    }
    test_field_shr_pages();
    fn test_field_paged_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).paged_pages) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(paged_pages)
            )
        );
    }
    test_field_paged_pages();
    fn test_field_shared_info_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shared_info_frame) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(shared_info_frame)
            )
        );
    }
    test_field_shared_info_frame();
    fn test_field_cpu_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_time) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(cpu_time)
            )
        );
    }
    test_field_cpu_time();
    fn test_field_nr_online_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_online_vcpus) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(nr_online_vcpus)
            )
        );
    }
    test_field_nr_online_vcpus();
    fn test_field_max_vcpu_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_vcpu_id) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(max_vcpu_id)
            )
        );
    }
    test_field_max_vcpu_id();
    fn test_field_ssidref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ssidref) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(ssidref)
            )
        );
    }
    test_field_ssidref();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_cpupool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpupool) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(cpupool)
            )
        );
    }
    test_field_cpupool();
    fn test_field_gpaddr_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpaddr_bits) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(gpaddr_bits)
            )
        );
    }
    test_field_gpaddr_bits();
    fn test_field_pad2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize
            },
            97usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(pad2)
            )
        );
    }
    test_field_pad2();
    fn test_field_arch_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getdomaininfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arch_config) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getdomaininfo),
                "::",
                stringify!(arch_config)
            )
        );
    }
    test_field_arch_config();
}
pub type xen_domctl_getdomaininfo_t = xen_domctl_getdomaininfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_domctl_getdomaininfo_t {
    pub p: *mut xen_domctl_getdomaininfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_domctl_getdomaininfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_domctl_getdomaininfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_domctl_getdomaininfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_domctl_getdomaininfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_domctl_getdomaininfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_domctl_getdomaininfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_domctl_getdomaininfo_t {
    pub p: *mut xen_domctl_getdomaininfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_domctl_getdomaininfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_domctl_getdomaininfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_domctl_getdomaininfo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_domctl_getdomaininfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_domctl_getdomaininfo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_domctl_getdomaininfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_domctl_getdomaininfo_t {
    pub p: *const xen_domctl_getdomaininfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_domctl_getdomaininfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_domctl_getdomaininfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_domctl_getdomaininfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_domctl_getdomaininfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_domctl_getdomaininfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_domctl_getdomaininfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_domctl_getdomaininfo_t {
    pub p: *const xen_domctl_getdomaininfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_domctl_getdomaininfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_domctl_getdomaininfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_domctl_getdomaininfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_domctl_getdomaininfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_domctl_getdomaininfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_domctl_getdomaininfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_getpageframeinfo3 {
    pub num: u64,
    pub array: __guest_handle_64_xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_getpageframeinfo3() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_getpageframeinfo3>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_getpageframeinfo3))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_getpageframeinfo3>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_getpageframeinfo3))
    );
    fn test_field_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getpageframeinfo3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getpageframeinfo3),
                "::",
                stringify!(num)
            )
        );
    }
    test_field_num();
    fn test_field_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getpageframeinfo3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getpageframeinfo3),
                "::",
                stringify!(array)
            )
        );
    }
    test_field_array();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_shadow_op_stats {
    pub fault_count: u32,
    pub dirty_count: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_shadow_op_stats() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_shadow_op_stats>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_shadow_op_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_shadow_op_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_shadow_op_stats))
    );
    fn test_field_fault_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_shadow_op_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fault_count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_shadow_op_stats),
                "::",
                stringify!(fault_count)
            )
        );
    }
    test_field_fault_count();
    fn test_field_dirty_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_shadow_op_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dirty_count) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_shadow_op_stats),
                "::",
                stringify!(dirty_count)
            )
        );
    }
    test_field_dirty_count();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_shadow_op {
    pub op: u32,
    pub mode: u32,
    pub mb: u32,
    pub dirty_bitmap: __guest_handle_64_uint8,
    pub pages: u64,
    pub stats: xen_domctl_shadow_op_stats,
}
#[test]
fn bindgen_test_layout_xen_domctl_shadow_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_shadow_op>(),
        40usize,
        concat!("Size of: ", stringify!(xen_domctl_shadow_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_shadow_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_shadow_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_shadow_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_shadow_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_shadow_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_shadow_op),
                "::",
                stringify!(mode)
            )
        );
    }
    test_field_mode();
    fn test_field_mb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_shadow_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mb) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_shadow_op),
                "::",
                stringify!(mb)
            )
        );
    }
    test_field_mb();
    fn test_field_dirty_bitmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_shadow_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dirty_bitmap) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_shadow_op),
                "::",
                stringify!(dirty_bitmap)
            )
        );
    }
    test_field_dirty_bitmap();
    fn test_field_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_shadow_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pages) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_shadow_op),
                "::",
                stringify!(pages)
            )
        );
    }
    test_field_pages();
    fn test_field_stats() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_shadow_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stats) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_shadow_op),
                "::",
                stringify!(stats)
            )
        );
    }
    test_field_stats();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_max_mem {
    pub max_memkb: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_max_mem() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_max_mem>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_max_mem))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_max_mem>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_max_mem))
    );
    fn test_field_max_memkb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_max_mem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_memkb) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_max_mem),
                "::",
                stringify!(max_memkb)
            )
        );
    }
    test_field_max_memkb();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vcpucontext {
    pub vcpu: u32,
    pub ctxt: __guest_handle_64_vcpu_guest_context_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_vcpucontext() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vcpucontext>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_vcpucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vcpucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vcpucontext))
    );
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vcpucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vcpucontext),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
    fn test_field_ctxt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vcpucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctxt) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vcpucontext),
                "::",
                stringify!(ctxt)
            )
        );
    }
    test_field_ctxt();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_getvcpuinfo {
    pub vcpu: u32,
    pub online: u8,
    pub blocked: u8,
    pub running: u8,
    pub cpu_time: u64,
    pub cpu: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_getvcpuinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_getvcpuinfo>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_getvcpuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_getvcpuinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_getvcpuinfo))
    );
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getvcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getvcpuinfo),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
    fn test_field_online() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getvcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).online) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getvcpuinfo),
                "::",
                stringify!(online)
            )
        );
    }
    test_field_online();
    fn test_field_blocked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getvcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blocked) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getvcpuinfo),
                "::",
                stringify!(blocked)
            )
        );
    }
    test_field_blocked();
    fn test_field_running() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getvcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getvcpuinfo),
                "::",
                stringify!(running)
            )
        );
    }
    test_field_running();
    fn test_field_cpu_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getvcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_time) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getvcpuinfo),
                "::",
                stringify!(cpu_time)
            )
        );
    }
    test_field_cpu_time();
    fn test_field_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_getvcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_getvcpuinfo),
                "::",
                stringify!(cpu)
            )
        );
    }
    test_field_cpu();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_nodeaffinity {
    pub nodemap: xenctl_bitmap,
}
#[test]
fn bindgen_test_layout_xen_domctl_nodeaffinity() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_nodeaffinity>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_nodeaffinity))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_nodeaffinity>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_nodeaffinity))
    );
    fn test_field_nodemap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_nodeaffinity>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nodemap) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_nodeaffinity),
                "::",
                stringify!(nodemap)
            )
        );
    }
    test_field_nodemap();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vcpuaffinity {
    pub vcpu: u32,
    pub flags: u32,
    pub cpumap_hard: xenctl_bitmap,
    pub cpumap_soft: xenctl_bitmap,
}
#[test]
fn bindgen_test_layout_xen_domctl_vcpuaffinity() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vcpuaffinity>(),
        40usize,
        concat!("Size of: ", stringify!(xen_domctl_vcpuaffinity))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vcpuaffinity>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vcpuaffinity))
    );
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vcpuaffinity>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vcpuaffinity),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vcpuaffinity>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vcpuaffinity),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_cpumap_hard() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vcpuaffinity>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpumap_hard) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vcpuaffinity),
                "::",
                stringify!(cpumap_hard)
            )
        );
    }
    test_field_cpumap_hard();
    fn test_field_cpumap_soft() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vcpuaffinity>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpumap_soft) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vcpuaffinity),
                "::",
                stringify!(cpumap_soft)
            )
        );
    }
    test_field_cpumap_soft();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_max_vcpus {
    pub max: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_max_vcpus() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_max_vcpus>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_max_vcpus))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_max_vcpus>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_max_vcpus))
    );
    fn test_field_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_max_vcpus>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_max_vcpus),
                "::",
                stringify!(max)
            )
        );
    }
    test_field_max();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sched_credit {
    pub weight: u16,
    pub cap: u16,
}
#[test]
fn bindgen_test_layout_xen_domctl_sched_credit() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_sched_credit>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_sched_credit))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_sched_credit>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_domctl_sched_credit))
    );
    fn test_field_weight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_sched_credit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_sched_credit),
                "::",
                stringify!(weight)
            )
        );
    }
    test_field_weight();
    fn test_field_cap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_sched_credit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cap) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_sched_credit),
                "::",
                stringify!(cap)
            )
        );
    }
    test_field_cap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sched_credit2 {
    pub weight: u16,
    pub cap: u16,
}
#[test]
fn bindgen_test_layout_xen_domctl_sched_credit2() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_sched_credit2>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_sched_credit2))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_sched_credit2>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_domctl_sched_credit2))
    );
    fn test_field_weight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_sched_credit2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_sched_credit2),
                "::",
                stringify!(weight)
            )
        );
    }
    test_field_weight();
    fn test_field_cap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_sched_credit2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cap) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_sched_credit2),
                "::",
                stringify!(cap)
            )
        );
    }
    test_field_cap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sched_rtds {
    pub period: u32,
    pub budget: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_sched_rtds() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_sched_rtds>(),
        12usize,
        concat!("Size of: ", stringify!(xen_domctl_sched_rtds))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_sched_rtds>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_sched_rtds))
    );
    fn test_field_period() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_sched_rtds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_sched_rtds),
                "::",
                stringify!(period)
            )
        );
    }
    test_field_period();
    fn test_field_budget() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_sched_rtds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).budget) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_sched_rtds),
                "::",
                stringify!(budget)
            )
        );
    }
    test_field_budget();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_sched_rtds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_sched_rtds),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_schedparam_vcpu {
    pub u: xen_domctl_schedparam_vcpu__bindgen_ty_1,
    pub vcpuid: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_schedparam_vcpu__bindgen_ty_1 {
    pub credit: xen_domctl_sched_credit,
    pub credit2: xen_domctl_sched_credit2,
    pub rtds: xen_domctl_sched_rtds,
}
#[test]
fn bindgen_test_layout_xen_domctl_schedparam_vcpu__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_schedparam_vcpu__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_schedparam_vcpu__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1)
        )
    );
    fn test_field_credit() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_schedparam_vcpu__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).credit) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1),
                "::",
                stringify!(credit)
            )
        );
    }
    test_field_credit();
    fn test_field_credit2() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_schedparam_vcpu__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).credit2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1),
                "::",
                stringify!(credit2)
            )
        );
    }
    test_field_credit2();
    fn test_field_rtds() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_schedparam_vcpu__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rtds) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1),
                "::",
                stringify!(rtds)
            )
        );
    }
    test_field_rtds();
}
#[test]
fn bindgen_test_layout_xen_domctl_schedparam_vcpu() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_schedparam_vcpu>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_schedparam_vcpu))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_schedparam_vcpu>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_schedparam_vcpu))
    );
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_schedparam_vcpu>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_schedparam_vcpu),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_vcpuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_schedparam_vcpu>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpuid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_schedparam_vcpu),
                "::",
                stringify!(vcpuid)
            )
        );
    }
    test_field_vcpuid();
}
pub type xen_domctl_schedparam_vcpu_t = xen_domctl_schedparam_vcpu;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_domctl_schedparam_vcpu_t {
    pub p: *mut xen_domctl_schedparam_vcpu_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_domctl_schedparam_vcpu_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_domctl_schedparam_vcpu_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_domctl_schedparam_vcpu_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_domctl_schedparam_vcpu_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_domctl_schedparam_vcpu_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_domctl_schedparam_vcpu_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_domctl_schedparam_vcpu_t {
    pub p: *mut xen_domctl_schedparam_vcpu_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_domctl_schedparam_vcpu_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_domctl_schedparam_vcpu_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_domctl_schedparam_vcpu_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_domctl_schedparam_vcpu_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_domctl_schedparam_vcpu_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_domctl_schedparam_vcpu_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_domctl_schedparam_vcpu_t {
    pub p: *const xen_domctl_schedparam_vcpu_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_domctl_schedparam_vcpu_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_domctl_schedparam_vcpu_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_domctl_schedparam_vcpu_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_domctl_schedparam_vcpu_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_domctl_schedparam_vcpu_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_domctl_schedparam_vcpu_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_domctl_schedparam_vcpu_t {
    pub p: *const xen_domctl_schedparam_vcpu_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_domctl_schedparam_vcpu_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_domctl_schedparam_vcpu_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_domctl_schedparam_vcpu_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_domctl_schedparam_vcpu_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_domctl_schedparam_vcpu_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_domctl_schedparam_vcpu_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_scheduler_op {
    pub sched_id: u32,
    pub cmd: u32,
    pub u: xen_domctl_scheduler_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_scheduler_op__bindgen_ty_1 {
    pub credit: xen_domctl_sched_credit,
    pub credit2: xen_domctl_sched_credit2,
    pub rtds: xen_domctl_sched_rtds,
    pub v: xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1 {
    pub vcpus: __guest_handle_64_xen_domctl_schedparam_vcpu_t,
    pub nr_vcpus: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(vcpus)
            )
        );
    }
    test_field_vcpus();
    fn test_field_nr_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vcpus) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(nr_vcpus)
            )
        );
    }
    test_field_nr_vcpus();
    fn test_field_padding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(padding)
            )
        );
    }
    test_field_padding();
}
#[test]
fn bindgen_test_layout_xen_domctl_scheduler_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_scheduler_op__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_scheduler_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1)
        )
    );
    fn test_field_credit() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_scheduler_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).credit) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op__bindgen_ty_1),
                "::",
                stringify!(credit)
            )
        );
    }
    test_field_credit();
    fn test_field_credit2() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_scheduler_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).credit2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op__bindgen_ty_1),
                "::",
                stringify!(credit2)
            )
        );
    }
    test_field_credit2();
    fn test_field_rtds() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_scheduler_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rtds) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op__bindgen_ty_1),
                "::",
                stringify!(rtds)
            )
        );
    }
    test_field_rtds();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_scheduler_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op__bindgen_ty_1),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
}
#[test]
fn bindgen_test_layout_xen_domctl_scheduler_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_scheduler_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_scheduler_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_scheduler_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_scheduler_op))
    );
    fn test_field_sched_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_scheduler_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op),
                "::",
                stringify!(sched_id)
            )
        );
    }
    test_field_sched_id();
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_scheduler_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_scheduler_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_scheduler_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_setdomainhandle {
    pub handle: xen_domain_handle_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_setdomainhandle() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_setdomainhandle>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_setdomainhandle))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_setdomainhandle>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_domctl_setdomainhandle))
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_setdomainhandle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_setdomainhandle),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_setdebugging {
    pub enable: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_setdebugging() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_setdebugging>(),
        1usize,
        concat!("Size of: ", stringify!(xen_domctl_setdebugging))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_setdebugging>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_domctl_setdebugging))
    );
    fn test_field_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_setdebugging>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_setdebugging),
                "::",
                stringify!(enable)
            )
        );
    }
    test_field_enable();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_irq_permission {
    pub pirq: u32,
    pub allow_access: u8,
    pub pad: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_xen_domctl_irq_permission() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_irq_permission>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_irq_permission))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_irq_permission>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_irq_permission))
    );
    fn test_field_pirq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_irq_permission>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pirq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_irq_permission),
                "::",
                stringify!(pirq)
            )
        );
    }
    test_field_pirq();
    fn test_field_allow_access() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_irq_permission>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allow_access) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_irq_permission),
                "::",
                stringify!(allow_access)
            )
        );
    }
    test_field_allow_access();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_irq_permission>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_irq_permission),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_iomem_permission {
    pub first_mfn: u64,
    pub nr_mfns: u64,
    pub allow_access: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_iomem_permission() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_iomem_permission>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_iomem_permission))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_iomem_permission>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_iomem_permission))
    );
    fn test_field_first_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_iomem_permission>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_mfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_iomem_permission),
                "::",
                stringify!(first_mfn)
            )
        );
    }
    test_field_first_mfn();
    fn test_field_nr_mfns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_iomem_permission>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_mfns) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_iomem_permission),
                "::",
                stringify!(nr_mfns)
            )
        );
    }
    test_field_nr_mfns();
    fn test_field_allow_access() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_iomem_permission>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allow_access) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_iomem_permission),
                "::",
                stringify!(allow_access)
            )
        );
    }
    test_field_allow_access();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_ioport_permission {
    pub first_port: u32,
    pub nr_ports: u32,
    pub allow_access: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_ioport_permission() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_ioport_permission>(),
        12usize,
        concat!("Size of: ", stringify!(xen_domctl_ioport_permission))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_ioport_permission>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_ioport_permission))
    );
    fn test_field_first_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_ioport_permission>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_ioport_permission),
                "::",
                stringify!(first_port)
            )
        );
    }
    test_field_first_port();
    fn test_field_nr_ports() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_ioport_permission>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_ports) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_ioport_permission),
                "::",
                stringify!(nr_ports)
            )
        );
    }
    test_field_nr_ports();
    fn test_field_allow_access() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_ioport_permission>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allow_access) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_ioport_permission),
                "::",
                stringify!(allow_access)
            )
        );
    }
    test_field_allow_access();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_hypercall_init {
    pub gmfn: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_hypercall_init() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_hypercall_init>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_hypercall_init))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_hypercall_init>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_hypercall_init))
    );
    fn test_field_gmfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_hypercall_init>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gmfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_hypercall_init),
                "::",
                stringify!(gmfn)
            )
        );
    }
    test_field_gmfn();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_settimeoffset {
    pub time_offset_seconds: i64,
}
#[test]
fn bindgen_test_layout_xen_domctl_settimeoffset() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_settimeoffset>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_settimeoffset))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_settimeoffset>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_settimeoffset))
    );
    fn test_field_time_offset_seconds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_settimeoffset>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time_offset_seconds) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_settimeoffset),
                "::",
                stringify!(time_offset_seconds)
            )
        );
    }
    test_field_time_offset_seconds();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_hvmcontext {
    pub size: u32,
    pub buffer: __guest_handle_64_uint8,
}
#[test]
fn bindgen_test_layout_xen_domctl_hvmcontext() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_hvmcontext>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_hvmcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_hvmcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_hvmcontext))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_hvmcontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_hvmcontext),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_hvmcontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_hvmcontext),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_address_size {
    pub size: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_address_size() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_address_size>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_address_size))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_address_size>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_address_size))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_address_size>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_address_size),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sendtrigger {
    pub trigger: u32,
    pub vcpu: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_sendtrigger() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_sendtrigger>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_sendtrigger))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_sendtrigger>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_sendtrigger))
    );
    fn test_field_trigger() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_sendtrigger>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trigger) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_sendtrigger),
                "::",
                stringify!(trigger)
            )
        );
    }
    test_field_trigger();
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_sendtrigger>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_sendtrigger),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_assign_device {
    pub dev: u32,
    pub flags: u32,
    pub u: xen_domctl_assign_device__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_assign_device__bindgen_ty_1 {
    pub pci: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1,
    pub dt: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1 {
    pub machine_sbdf: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_machine_sbdf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).machine_sbdf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(machine_sbdf)
            )
        );
    }
    test_field_machine_sbdf();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2 {
    pub size: u32,
    pub path: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(path)
            )
        );
    }
    test_field_path();
}
#[test]
fn bindgen_test_layout_xen_domctl_assign_device__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_assign_device__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_assign_device__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1)
        )
    );
    fn test_field_pci() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_assign_device__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pci) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_assign_device__bindgen_ty_1),
                "::",
                stringify!(pci)
            )
        );
    }
    test_field_pci();
    fn test_field_dt() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_assign_device__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dt) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_assign_device__bindgen_ty_1),
                "::",
                stringify!(dt)
            )
        );
    }
    test_field_dt();
}
#[test]
fn bindgen_test_layout_xen_domctl_assign_device() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_assign_device>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_assign_device))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_assign_device>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_assign_device))
    );
    fn test_field_dev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_assign_device>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_assign_device),
                "::",
                stringify!(dev)
            )
        );
    }
    test_field_dev();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_assign_device>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_assign_device),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_assign_device>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_assign_device),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_get_device_group {
    pub machine_sbdf: u32,
    pub max_sdevs: u32,
    pub num_sdevs: u32,
    pub sdev_array: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_domctl_get_device_group() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_get_device_group>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_get_device_group))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_get_device_group>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_get_device_group))
    );
    fn test_field_machine_sbdf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_get_device_group>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).machine_sbdf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_get_device_group),
                "::",
                stringify!(machine_sbdf)
            )
        );
    }
    test_field_machine_sbdf();
    fn test_field_max_sdevs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_get_device_group>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_sdevs) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_get_device_group),
                "::",
                stringify!(max_sdevs)
            )
        );
    }
    test_field_max_sdevs();
    fn test_field_num_sdevs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_get_device_group>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_sdevs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_get_device_group),
                "::",
                stringify!(num_sdevs)
            )
        );
    }
    test_field_num_sdevs();
    fn test_field_sdev_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_get_device_group>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sdev_array) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_get_device_group),
                "::",
                stringify!(sdev_array)
            )
        );
    }
    test_field_sdev_array();
}
pub const pt_irq_type_PT_IRQ_TYPE_PCI: pt_irq_type = 0;
pub const pt_irq_type_PT_IRQ_TYPE_ISA: pt_irq_type = 1;
pub const pt_irq_type_PT_IRQ_TYPE_MSI: pt_irq_type = 2;
pub const pt_irq_type_PT_IRQ_TYPE_MSI_TRANSLATE: pt_irq_type = 3;
pub const pt_irq_type_PT_IRQ_TYPE_SPI: pt_irq_type = 4;
pub type pt_irq_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_bind_pt_irq {
    pub machine_irq: u32,
    pub irq_type: u32,
    pub u: xen_domctl_bind_pt_irq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_bind_pt_irq__bindgen_ty_1 {
    pub isa: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1,
    pub pci: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2,
    pub msi: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3,
    pub spi: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1 {
    pub isa_irq: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_isa_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isa_irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(isa_irq)
            )
        );
    }
    test_field_isa_irq();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2 {
    pub bus: u8,
    pub device: u8,
    pub intx: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_device() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(device)
            )
        );
    }
    test_field_device();
    fn test_field_intx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intx) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(intx)
            )
        );
    }
    test_field_intx();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3 {
    pub gvec: u8,
    pub gflags: u32,
    pub gtable: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3)
        )
    );
    fn test_field_gvec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gvec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(gvec)
            )
        );
    }
    test_field_gvec();
    fn test_field_gflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gflags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(gflags)
            )
        );
    }
    test_field_gflags();
    fn test_field_gtable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gtable) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(gtable)
            )
        );
    }
    test_field_gtable();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4 {
    pub spi: u16,
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4)
        )
    );
    fn test_field_spi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(spi)
            )
        );
    }
    test_field_spi();
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1)
        )
    );
    fn test_field_isa() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_bind_pt_irq__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isa) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1),
                "::",
                stringify!(isa)
            )
        );
    }
    test_field_isa();
    fn test_field_pci() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_bind_pt_irq__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pci) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1),
                "::",
                stringify!(pci)
            )
        );
    }
    test_field_pci();
    fn test_field_msi() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_bind_pt_irq__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).msi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1),
                "::",
                stringify!(msi)
            )
        );
    }
    test_field_msi();
    fn test_field_spi() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_bind_pt_irq__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1),
                "::",
                stringify!(spi)
            )
        );
    }
    test_field_spi();
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_bind_pt_irq))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_bind_pt_irq))
    );
    fn test_field_machine_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_bind_pt_irq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).machine_irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq),
                "::",
                stringify!(machine_irq)
            )
        );
    }
    test_field_machine_irq();
    fn test_field_irq_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_bind_pt_irq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).irq_type) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq),
                "::",
                stringify!(irq_type)
            )
        );
    }
    test_field_irq_type();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_bind_pt_irq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_bind_pt_irq),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_memory_mapping {
    pub first_gfn: u64,
    pub first_mfn: u64,
    pub nr_mfns: u64,
    pub add_mapping: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_memory_mapping() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_memory_mapping>(),
        32usize,
        concat!("Size of: ", stringify!(xen_domctl_memory_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_memory_mapping>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_memory_mapping))
    );
    fn test_field_first_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_memory_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_gfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_memory_mapping),
                "::",
                stringify!(first_gfn)
            )
        );
    }
    test_field_first_gfn();
    fn test_field_first_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_memory_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_mfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_memory_mapping),
                "::",
                stringify!(first_mfn)
            )
        );
    }
    test_field_first_mfn();
    fn test_field_nr_mfns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_memory_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_mfns) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_memory_mapping),
                "::",
                stringify!(nr_mfns)
            )
        );
    }
    test_field_nr_mfns();
    fn test_field_add_mapping() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_memory_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).add_mapping) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_memory_mapping),
                "::",
                stringify!(add_mapping)
            )
        );
    }
    test_field_add_mapping();
    fn test_field_padding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_memory_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_memory_mapping),
                "::",
                stringify!(padding)
            )
        );
    }
    test_field_padding();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_ioport_mapping {
    pub first_gport: u32,
    pub first_mport: u32,
    pub nr_ports: u32,
    pub add_mapping: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_ioport_mapping() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_ioport_mapping>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_ioport_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_ioport_mapping>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_ioport_mapping))
    );
    fn test_field_first_gport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_ioport_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_gport) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_ioport_mapping),
                "::",
                stringify!(first_gport)
            )
        );
    }
    test_field_first_gport();
    fn test_field_first_mport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_ioport_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_mport) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_ioport_mapping),
                "::",
                stringify!(first_mport)
            )
        );
    }
    test_field_first_mport();
    fn test_field_nr_ports() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_ioport_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_ports) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_ioport_mapping),
                "::",
                stringify!(nr_ports)
            )
        );
    }
    test_field_nr_ports();
    fn test_field_add_mapping() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_ioport_mapping>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).add_mapping) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_ioport_mapping),
                "::",
                stringify!(add_mapping)
            )
        );
    }
    test_field_add_mapping();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_ext_vcpucontext {
    pub vcpu: u32,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_ext_vcpucontext() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_ext_vcpucontext>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_ext_vcpucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_ext_vcpucontext>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_ext_vcpucontext))
    );
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_ext_vcpucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_ext_vcpucontext),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_ext_vcpucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_ext_vcpucontext),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_target {
    pub target: domid_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_set_target() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_set_target>(),
        2usize,
        concat!("Size of: ", stringify!(xen_domctl_set_target))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_set_target>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_domctl_set_target))
    );
    fn test_field_target() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_set_target>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_set_target),
                "::",
                stringify!(target)
            )
        );
    }
    test_field_target();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_subscribe {
    pub port: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_subscribe() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_subscribe>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_subscribe))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_subscribe>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_subscribe))
    );
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_subscribe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_subscribe),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_debug_op {
    pub op: u32,
    pub vcpu: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_debug_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_debug_op>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_debug_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_debug_op>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_debug_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_debug_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_debug_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_debug_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_debug_op),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_hvmcontext_partial {
    pub type_: u32,
    pub instance: u32,
    pub bufsz: u64,
    pub buffer: __guest_handle_64_uint8,
}
#[test]
fn bindgen_test_layout_xen_domctl_hvmcontext_partial() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_hvmcontext_partial>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_hvmcontext_partial))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_hvmcontext_partial>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_hvmcontext_partial))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_hvmcontext_partial>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_hvmcontext_partial),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_instance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_hvmcontext_partial>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_hvmcontext_partial),
                "::",
                stringify!(instance)
            )
        );
    }
    test_field_instance();
    fn test_field_bufsz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_hvmcontext_partial>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufsz) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_hvmcontext_partial),
                "::",
                stringify!(bufsz)
            )
        );
    }
    test_field_bufsz();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_hvmcontext_partial>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_hvmcontext_partial),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_tsc_info {
    pub tsc_mode: u32,
    pub gtsc_khz: u32,
    pub incarnation: u32,
    pub pad: u32,
    pub elapsed_nsec: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_tsc_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_tsc_info>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_tsc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_tsc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_tsc_info))
    );
    fn test_field_tsc_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_tsc_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tsc_mode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_tsc_info),
                "::",
                stringify!(tsc_mode)
            )
        );
    }
    test_field_tsc_mode();
    fn test_field_gtsc_khz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_tsc_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gtsc_khz) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_tsc_info),
                "::",
                stringify!(gtsc_khz)
            )
        );
    }
    test_field_gtsc_khz();
    fn test_field_incarnation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_tsc_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).incarnation) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_tsc_info),
                "::",
                stringify!(incarnation)
            )
        );
    }
    test_field_incarnation();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_tsc_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_tsc_info),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_elapsed_nsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_tsc_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).elapsed_nsec) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_tsc_info),
                "::",
                stringify!(elapsed_nsec)
            )
        );
    }
    test_field_elapsed_nsec();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_gdbsx_memio {
    pub pgd3val: u64,
    pub gva: u64,
    pub uva: u64,
    pub len: u32,
    pub gwr: u8,
    pub remain: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_gdbsx_memio() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_gdbsx_memio>(),
        40usize,
        concat!("Size of: ", stringify!(xen_domctl_gdbsx_memio))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_gdbsx_memio>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_gdbsx_memio))
    );
    fn test_field_pgd3val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_memio>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pgd3val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_memio),
                "::",
                stringify!(pgd3val)
            )
        );
    }
    test_field_pgd3val();
    fn test_field_gva() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_memio>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gva) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_memio),
                "::",
                stringify!(gva)
            )
        );
    }
    test_field_gva();
    fn test_field_uva() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_memio>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uva) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_memio),
                "::",
                stringify!(uva)
            )
        );
    }
    test_field_uva();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_memio>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_memio),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_gwr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_memio>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gwr) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_memio),
                "::",
                stringify!(gwr)
            )
        );
    }
    test_field_gwr();
    fn test_field_remain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_memio>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remain) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_memio),
                "::",
                stringify!(remain)
            )
        );
    }
    test_field_remain();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_gdbsx_pauseunp_vcpu {
    pub vcpu: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_gdbsx_pauseunp_vcpu() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_gdbsx_pauseunp_vcpu>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_gdbsx_pauseunp_vcpu))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_gdbsx_pauseunp_vcpu>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_gdbsx_pauseunp_vcpu))
    );
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_pauseunp_vcpu>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_pauseunp_vcpu),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_gdbsx_domstatus {
    pub paused: u8,
    pub vcpu_id: u32,
    pub vcpu_ev: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_gdbsx_domstatus() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_gdbsx_domstatus>(),
        12usize,
        concat!("Size of: ", stringify!(xen_domctl_gdbsx_domstatus))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_gdbsx_domstatus>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_gdbsx_domstatus))
    );
    fn test_field_paused() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_domstatus>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).paused) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_domstatus),
                "::",
                stringify!(paused)
            )
        );
    }
    test_field_paused();
    fn test_field_vcpu_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_domstatus>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_domstatus),
                "::",
                stringify!(vcpu_id)
            )
        );
    }
    test_field_vcpu_id();
    fn test_field_vcpu_ev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_gdbsx_domstatus>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_ev) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_gdbsx_domstatus),
                "::",
                stringify!(vcpu_ev)
            )
        );
    }
    test_field_vcpu_ev();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vm_event_op {
    pub op: u32,
    pub mode: u32,
    pub u: xen_domctl_vm_event_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_vm_event_op__bindgen_ty_1 {
    pub enable: xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1 {
    pub port: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
}
#[test]
fn bindgen_test_layout_xen_domctl_vm_event_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vm_event_op__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vm_event_op__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1)
        )
    );
    fn test_field_enable() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_vm_event_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vm_event_op__bindgen_ty_1),
                "::",
                stringify!(enable)
            )
        );
    }
    test_field_enable();
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_vm_event_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vm_event_op__bindgen_ty_1),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
}
#[test]
fn bindgen_test_layout_xen_domctl_vm_event_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vm_event_op>(),
        12usize,
        concat!("Size of: ", stringify!(xen_domctl_vm_event_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vm_event_op>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_vm_event_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vm_event_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vm_event_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vm_event_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vm_event_op),
                "::",
                stringify!(mode)
            )
        );
    }
    test_field_mode();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vm_event_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vm_event_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_mem_sharing_op {
    pub op: u8,
    pub u: xen_domctl_mem_sharing_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_mem_sharing_op__bindgen_ty_1 {
    pub enable: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_mem_sharing_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_mem_sharing_op__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_mem_sharing_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_mem_sharing_op__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_mem_sharing_op__bindgen_ty_1)
        )
    );
    fn test_field_enable() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_mem_sharing_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_mem_sharing_op__bindgen_ty_1),
                "::",
                stringify!(enable)
            )
        );
    }
    test_field_enable();
}
#[test]
fn bindgen_test_layout_xen_domctl_mem_sharing_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_mem_sharing_op>(),
        2usize,
        concat!("Size of: ", stringify!(xen_domctl_mem_sharing_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_mem_sharing_op>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_domctl_mem_sharing_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_mem_sharing_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_mem_sharing_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_mem_sharing_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_mem_sharing_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_audit_p2m {
    pub orphans: u64,
    pub m2p_bad: u64,
    pub p2m_bad: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_audit_p2m() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_audit_p2m>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_audit_p2m))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_audit_p2m>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_audit_p2m))
    );
    fn test_field_orphans() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_audit_p2m>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).orphans) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_audit_p2m),
                "::",
                stringify!(orphans)
            )
        );
    }
    test_field_orphans();
    fn test_field_m2p_bad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_audit_p2m>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m2p_bad) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_audit_p2m),
                "::",
                stringify!(m2p_bad)
            )
        );
    }
    test_field_m2p_bad();
    fn test_field_p2m_bad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_audit_p2m>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p2m_bad) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_audit_p2m),
                "::",
                stringify!(p2m_bad)
            )
        );
    }
    test_field_p2m_bad();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_virq_handler {
    pub virq: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_set_virq_handler() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_set_virq_handler>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_set_virq_handler))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_set_virq_handler>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_set_virq_handler))
    );
    fn test_field_virq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_set_virq_handler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).virq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_set_virq_handler),
                "::",
                stringify!(virq)
            )
        );
    }
    test_field_virq();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_access_required {
    pub access_required: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_set_access_required() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_set_access_required>(),
        1usize,
        concat!("Size of: ", stringify!(xen_domctl_set_access_required))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_set_access_required>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_domctl_set_access_required))
    );
    fn test_field_access_required() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_set_access_required>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).access_required) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_set_access_required),
                "::",
                stringify!(access_required)
            )
        );
    }
    test_field_access_required();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_broken_page_p2m {
    pub pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_set_broken_page_p2m() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_set_broken_page_p2m>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_set_broken_page_p2m))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_set_broken_page_p2m>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_set_broken_page_p2m))
    );
    fn test_field_pfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_set_broken_page_p2m>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_set_broken_page_p2m),
                "::",
                stringify!(pfn)
            )
        );
    }
    test_field_pfn();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_cacheflush {
    pub start_pfn: xen_pfn_t,
    pub nr_pfns: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_cacheflush() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_cacheflush>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_cacheflush))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_cacheflush>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_cacheflush))
    );
    fn test_field_start_pfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_cacheflush>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_pfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_cacheflush),
                "::",
                stringify!(start_pfn)
            )
        );
    }
    test_field_start_pfn();
    fn test_field_nr_pfns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_cacheflush>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_pfns) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_cacheflush),
                "::",
                stringify!(nr_pfns)
            )
        );
    }
    test_field_nr_pfns();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vnuma {
    pub nr_vnodes: u32,
    pub nr_vmemranges: u32,
    pub nr_vcpus: u32,
    pub pad: u32,
    pub vdistance: __guest_handle_64_uint,
    pub vcpu_to_vnode: __guest_handle_64_uint,
    pub vnode_to_pnode: __guest_handle_64_uint,
    pub vmemrange: __guest_handle_64_xen_vmemrange_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_vnuma() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vnuma>(),
        48usize,
        concat!("Size of: ", stringify!(xen_domctl_vnuma))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vnuma>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vnuma))
    );
    fn test_field_nr_vnodes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vnuma>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vnodes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vnuma),
                "::",
                stringify!(nr_vnodes)
            )
        );
    }
    test_field_nr_vnodes();
    fn test_field_nr_vmemranges() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vnuma>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vmemranges) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vnuma),
                "::",
                stringify!(nr_vmemranges)
            )
        );
    }
    test_field_nr_vmemranges();
    fn test_field_nr_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vnuma>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vcpus) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vnuma),
                "::",
                stringify!(nr_vcpus)
            )
        );
    }
    test_field_nr_vcpus();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vnuma>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vnuma),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_vdistance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vnuma>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vdistance) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vnuma),
                "::",
                stringify!(vdistance)
            )
        );
    }
    test_field_vdistance();
    fn test_field_vcpu_to_vnode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vnuma>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_to_vnode) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vnuma),
                "::",
                stringify!(vcpu_to_vnode)
            )
        );
    }
    test_field_vcpu_to_vnode();
    fn test_field_vnode_to_pnode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vnuma>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vnode_to_pnode) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vnuma),
                "::",
                stringify!(vnode_to_pnode)
            )
        );
    }
    test_field_vnode_to_pnode();
    fn test_field_vmemrange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vnuma>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmemrange) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vnuma),
                "::",
                stringify!(vmemrange)
            )
        );
    }
    test_field_vmemrange();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_psr_cmt_op {
    pub cmd: u32,
    pub data: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_psr_cmt_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_psr_cmt_op>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_psr_cmt_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_psr_cmt_op>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_psr_cmt_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_psr_cmt_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_psr_cmt_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_psr_cmt_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_psr_cmt_op),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_monitor_op {
    pub op: u32,
    pub event: u32,
    pub u: xen_domctl_monitor_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_monitor_op__bindgen_ty_1 {
    pub mov_to_cr: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
    pub mov_to_msr: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2,
    pub guest_request: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3,
    pub debug_exception: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4,
    pub vmexit: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1 {
    pub index: u8,
    pub sync: u8,
    pub onchangeonly: u8,
    pub pad1: u8,
    pub pad2: u32,
    pub bitmask: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_sync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(sync)
            )
        );
    }
    test_field_sync();
    fn test_field_onchangeonly() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).onchangeonly) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(onchangeonly)
            )
        );
    }
    test_field_onchangeonly();
    fn test_field_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(pad1)
            )
        );
    }
    test_field_pad1();
    fn test_field_pad2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(pad2)
            )
        );
    }
    test_field_pad2();
    fn test_field_bitmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bitmask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(bitmask)
            )
        );
    }
    test_field_bitmask();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2 {
    pub msr: u32,
    pub onchangeonly: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_msr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).msr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(msr)
            )
        );
    }
    test_field_msr();
    fn test_field_onchangeonly() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).onchangeonly) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(onchangeonly)
            )
        );
    }
    test_field_onchangeonly();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3 {
    pub sync: u8,
    pub allow_userspace: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3)
        )
    );
    fn test_field_sync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(sync)
            )
        );
    }
    test_field_sync();
    fn test_field_allow_userspace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allow_userspace) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(allow_userspace)
            )
        );
    }
    test_field_allow_userspace();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4 {
    pub sync: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4)
        )
    );
    fn test_field_sync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(sync)
            )
        );
    }
    test_field_sync();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5 {
    pub sync: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5)
        )
    );
    fn test_field_sync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(sync)
            )
        );
    }
    test_field_sync();
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_monitor_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1)
        )
    );
    fn test_field_mov_to_cr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_monitor_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mov_to_cr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1),
                "::",
                stringify!(mov_to_cr)
            )
        );
    }
    test_field_mov_to_cr();
    fn test_field_mov_to_msr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_monitor_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mov_to_msr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1),
                "::",
                stringify!(mov_to_msr)
            )
        );
    }
    test_field_mov_to_msr();
    fn test_field_guest_request() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_monitor_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).guest_request) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1),
                "::",
                stringify!(guest_request)
            )
        );
    }
    test_field_guest_request();
    fn test_field_debug_exception() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_monitor_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).debug_exception) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1),
                "::",
                stringify!(debug_exception)
            )
        );
    }
    test_field_debug_exception();
    fn test_field_vmexit() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_domctl_monitor_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmexit) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op__bindgen_ty_1),
                "::",
                stringify!(vmexit)
            )
        );
    }
    test_field_vmexit();
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_monitor_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_monitor_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_monitor_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_monitor_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op),
                "::",
                stringify!(event)
            )
        );
    }
    test_field_event();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_monitor_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_monitor_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_psr_alloc {
    pub cmd: u32,
    pub target: u32,
    pub data: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_psr_alloc() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_psr_alloc>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_psr_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_psr_alloc>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_psr_alloc))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_psr_alloc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_psr_alloc),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_target() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_psr_alloc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_psr_alloc),
                "::",
                stringify!(target)
            )
        );
    }
    test_field_target();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_psr_alloc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_psr_alloc),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vuart_op {
    pub cmd: u32,
    pub type_: u32,
    pub gfn: u64,
    pub console_domid: domid_t,
    pub pad: [u8; 2usize],
    pub evtchn: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_vuart_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vuart_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_vuart_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vuart_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vuart_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vuart_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vuart_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vuart_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vuart_op),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vuart_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vuart_op),
                "::",
                stringify!(gfn)
            )
        );
    }
    test_field_gfn();
    fn test_field_console_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vuart_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).console_domid) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vuart_op),
                "::",
                stringify!(console_domid)
            )
        );
    }
    test_field_console_domid();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vuart_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vuart_op),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_evtchn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vuart_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).evtchn) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vuart_op),
                "::",
                stringify!(evtchn)
            )
        );
    }
    test_field_evtchn();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vmtrace_op {
    pub cmd: u32,
    pub vcpu: u32,
    pub key: u64,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_vmtrace_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vmtrace_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_vmtrace_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vmtrace_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vmtrace_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vmtrace_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vmtrace_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vmtrace_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vmtrace_op),
                "::",
                stringify!(vcpu)
            )
        );
    }
    test_field_vcpu();
    fn test_field_key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vmtrace_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vmtrace_op),
                "::",
                stringify!(key)
            )
        );
    }
    test_field_key();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl_vmtrace_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl_vmtrace_op),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
pub type xen_domctl_vmtrace_op_t = xen_domctl_vmtrace_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_domctl_vmtrace_op_t {
    pub p: *mut xen_domctl_vmtrace_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_domctl_vmtrace_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_domctl_vmtrace_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_domctl_vmtrace_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_domctl_vmtrace_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_domctl_vmtrace_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_domctl_vmtrace_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_domctl_vmtrace_op_t {
    pub p: *mut xen_domctl_vmtrace_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_domctl_vmtrace_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_domctl_vmtrace_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_domctl_vmtrace_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_domctl_vmtrace_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_domctl_vmtrace_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_domctl_vmtrace_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_domctl_vmtrace_op_t {
    pub p: *const xen_domctl_vmtrace_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_domctl_vmtrace_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_domctl_vmtrace_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_domctl_vmtrace_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_domctl_vmtrace_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_domctl_vmtrace_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_domctl_vmtrace_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_domctl_vmtrace_op_t {
    pub p: *const xen_domctl_vmtrace_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_domctl_vmtrace_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_domctl_vmtrace_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_domctl_vmtrace_op_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_domctl_vmtrace_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_domctl_vmtrace_op_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_domctl_vmtrace_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl {
    pub cmd: u32,
    pub interface_version: u32,
    pub domain: domid_t,
    pub _pad: [u16; 3usize],
    pub u: xen_domctl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl__bindgen_ty_1 {
    pub createdomain: xen_domctl_createdomain,
    pub getdomaininfo: xen_domctl_getdomaininfo,
    pub getpageframeinfo3: xen_domctl_getpageframeinfo3,
    pub nodeaffinity: xen_domctl_nodeaffinity,
    pub vcpuaffinity: xen_domctl_vcpuaffinity,
    pub shadow_op: xen_domctl_shadow_op,
    pub max_mem: xen_domctl_max_mem,
    pub vcpucontext: xen_domctl_vcpucontext,
    pub getvcpuinfo: xen_domctl_getvcpuinfo,
    pub max_vcpus: xen_domctl_max_vcpus,
    pub scheduler_op: xen_domctl_scheduler_op,
    pub setdomainhandle: xen_domctl_setdomainhandle,
    pub setdebugging: xen_domctl_setdebugging,
    pub irq_permission: xen_domctl_irq_permission,
    pub iomem_permission: xen_domctl_iomem_permission,
    pub ioport_permission: xen_domctl_ioport_permission,
    pub hypercall_init: xen_domctl_hypercall_init,
    pub settimeoffset: xen_domctl_settimeoffset,
    pub tsc_info: xen_domctl_tsc_info,
    pub hvmcontext: xen_domctl_hvmcontext,
    pub hvmcontext_partial: xen_domctl_hvmcontext_partial,
    pub address_size: xen_domctl_address_size,
    pub sendtrigger: xen_domctl_sendtrigger,
    pub get_device_group: xen_domctl_get_device_group,
    pub assign_device: xen_domctl_assign_device,
    pub bind_pt_irq: xen_domctl_bind_pt_irq,
    pub memory_mapping: xen_domctl_memory_mapping,
    pub ioport_mapping: xen_domctl_ioport_mapping,
    pub ext_vcpucontext: xen_domctl_ext_vcpucontext,
    pub set_target: xen_domctl_set_target,
    pub subscribe: xen_domctl_subscribe,
    pub debug_op: xen_domctl_debug_op,
    pub vm_event_op: xen_domctl_vm_event_op,
    pub mem_sharing_op: xen_domctl_mem_sharing_op,
    pub access_required: xen_domctl_set_access_required,
    pub audit_p2m: xen_domctl_audit_p2m,
    pub set_virq_handler: xen_domctl_set_virq_handler,
    pub gdbsx_guest_memio: xen_domctl_gdbsx_memio,
    pub set_broken_page_p2m: xen_domctl_set_broken_page_p2m,
    pub cacheflush: xen_domctl_cacheflush,
    pub gdbsx_pauseunp_vcpu: xen_domctl_gdbsx_pauseunp_vcpu,
    pub gdbsx_domstatus: xen_domctl_gdbsx_domstatus,
    pub vnuma: xen_domctl_vnuma,
    pub psr_cmt_op: xen_domctl_psr_cmt_op,
    pub monitor_op: xen_domctl_monitor_op,
    pub psr_alloc: xen_domctl_psr_alloc,
    pub vuart_op: xen_domctl_vuart_op,
    pub vmtrace_op: xen_domctl_vmtrace_op,
    pub pad: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_xen_domctl__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(xen_domctl__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl__bindgen_ty_1))
    );
    fn test_field_createdomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).createdomain) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(createdomain)
            )
        );
    }
    test_field_createdomain();
    fn test_field_getdomaininfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getdomaininfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(getdomaininfo)
            )
        );
    }
    test_field_getdomaininfo();
    fn test_field_getpageframeinfo3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getpageframeinfo3) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(getpageframeinfo3)
            )
        );
    }
    test_field_getpageframeinfo3();
    fn test_field_nodeaffinity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nodeaffinity) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(nodeaffinity)
            )
        );
    }
    test_field_nodeaffinity();
    fn test_field_vcpuaffinity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpuaffinity) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(vcpuaffinity)
            )
        );
    }
    test_field_vcpuaffinity();
    fn test_field_shadow_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(shadow_op)
            )
        );
    }
    test_field_shadow_op();
    fn test_field_max_mem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_mem) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(max_mem)
            )
        );
    }
    test_field_max_mem();
    fn test_field_vcpucontext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpucontext) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(vcpucontext)
            )
        );
    }
    test_field_vcpucontext();
    fn test_field_getvcpuinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getvcpuinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(getvcpuinfo)
            )
        );
    }
    test_field_getvcpuinfo();
    fn test_field_max_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_vcpus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(max_vcpus)
            )
        );
    }
    test_field_max_vcpus();
    fn test_field_scheduler_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scheduler_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(scheduler_op)
            )
        );
    }
    test_field_scheduler_op();
    fn test_field_setdomainhandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).setdomainhandle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(setdomainhandle)
            )
        );
    }
    test_field_setdomainhandle();
    fn test_field_setdebugging() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).setdebugging) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(setdebugging)
            )
        );
    }
    test_field_setdebugging();
    fn test_field_irq_permission() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).irq_permission) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(irq_permission)
            )
        );
    }
    test_field_irq_permission();
    fn test_field_iomem_permission() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iomem_permission) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(iomem_permission)
            )
        );
    }
    test_field_iomem_permission();
    fn test_field_ioport_permission() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ioport_permission) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(ioport_permission)
            )
        );
    }
    test_field_ioport_permission();
    fn test_field_hypercall_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hypercall_init) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(hypercall_init)
            )
        );
    }
    test_field_hypercall_init();
    fn test_field_settimeoffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).settimeoffset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(settimeoffset)
            )
        );
    }
    test_field_settimeoffset();
    fn test_field_tsc_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tsc_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(tsc_info)
            )
        );
    }
    test_field_tsc_info();
    fn test_field_hvmcontext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hvmcontext) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(hvmcontext)
            )
        );
    }
    test_field_hvmcontext();
    fn test_field_hvmcontext_partial() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hvmcontext_partial) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(hvmcontext_partial)
            )
        );
    }
    test_field_hvmcontext_partial();
    fn test_field_address_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).address_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(address_size)
            )
        );
    }
    test_field_address_size();
    fn test_field_sendtrigger() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sendtrigger) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(sendtrigger)
            )
        );
    }
    test_field_sendtrigger();
    fn test_field_get_device_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_device_group) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(get_device_group)
            )
        );
    }
    test_field_get_device_group();
    fn test_field_assign_device() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).assign_device) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(assign_device)
            )
        );
    }
    test_field_assign_device();
    fn test_field_bind_pt_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_pt_irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(bind_pt_irq)
            )
        );
    }
    test_field_bind_pt_irq();
    fn test_field_memory_mapping() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).memory_mapping) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(memory_mapping)
            )
        );
    }
    test_field_memory_mapping();
    fn test_field_ioport_mapping() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ioport_mapping) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(ioport_mapping)
            )
        );
    }
    test_field_ioport_mapping();
    fn test_field_ext_vcpucontext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ext_vcpucontext) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(ext_vcpucontext)
            )
        );
    }
    test_field_ext_vcpucontext();
    fn test_field_set_target() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_target) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(set_target)
            )
        );
    }
    test_field_set_target();
    fn test_field_subscribe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).subscribe) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(subscribe)
            )
        );
    }
    test_field_subscribe();
    fn test_field_debug_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).debug_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(debug_op)
            )
        );
    }
    test_field_debug_op();
    fn test_field_vm_event_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vm_event_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(vm_event_op)
            )
        );
    }
    test_field_vm_event_op();
    fn test_field_mem_sharing_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_sharing_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(mem_sharing_op)
            )
        );
    }
    test_field_mem_sharing_op();
    fn test_field_access_required() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).access_required) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(access_required)
            )
        );
    }
    test_field_access_required();
    fn test_field_audit_p2m() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).audit_p2m) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(audit_p2m)
            )
        );
    }
    test_field_audit_p2m();
    fn test_field_set_virq_handler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_virq_handler) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(set_virq_handler)
            )
        );
    }
    test_field_set_virq_handler();
    fn test_field_gdbsx_guest_memio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gdbsx_guest_memio) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(gdbsx_guest_memio)
            )
        );
    }
    test_field_gdbsx_guest_memio();
    fn test_field_set_broken_page_p2m() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_broken_page_p2m) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(set_broken_page_p2m)
            )
        );
    }
    test_field_set_broken_page_p2m();
    fn test_field_cacheflush() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cacheflush) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(cacheflush)
            )
        );
    }
    test_field_cacheflush();
    fn test_field_gdbsx_pauseunp_vcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gdbsx_pauseunp_vcpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(gdbsx_pauseunp_vcpu)
            )
        );
    }
    test_field_gdbsx_pauseunp_vcpu();
    fn test_field_gdbsx_domstatus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gdbsx_domstatus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(gdbsx_domstatus)
            )
        );
    }
    test_field_gdbsx_domstatus();
    fn test_field_vnuma() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vnuma) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(vnuma)
            )
        );
    }
    test_field_vnuma();
    fn test_field_psr_cmt_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).psr_cmt_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(psr_cmt_op)
            )
        );
    }
    test_field_psr_cmt_op();
    fn test_field_monitor_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).monitor_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(monitor_op)
            )
        );
    }
    test_field_monitor_op();
    fn test_field_psr_alloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).psr_alloc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(psr_alloc)
            )
        );
    }
    test_field_psr_alloc();
    fn test_field_vuart_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vuart_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(vuart_op)
            )
        );
    }
    test_field_vuart_op();
    fn test_field_vmtrace_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmtrace_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(vmtrace_op)
            )
        );
    }
    test_field_vmtrace_op();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl__bindgen_ty_1),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[test]
fn bindgen_test_layout_xen_domctl() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl>(),
        144usize,
        concat!("Size of: ", stringify!(xen_domctl))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_interface_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interface_version) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl),
                "::",
                stringify!(interface_version)
            )
        );
    }
    test_field_interface_version();
    fn test_field_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl),
                "::",
                stringify!(domain)
            )
        );
    }
    test_field_domain();
    fn test_field__pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl),
                "::",
                stringify!(_pad)
            )
        );
    }
    test_field__pad();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_domctl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_domctl),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type xen_domctl_t = xen_domctl;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_domctl_t {
    pub p: *mut xen_domctl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_domctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_domctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_domctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_domctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_domctl_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_domctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_domctl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_domctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_domctl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_domctl_t {
    pub p: *mut xen_domctl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_domctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_domctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_domctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_domctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_xen_domctl_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_domctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_domctl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_domctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_domctl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_domctl_t {
    pub p: *const xen_domctl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_domctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_domctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_domctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_domctl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_domctl_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_xen_domctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_domctl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_xen_domctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_domctl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_domctl_t {
    pub p: *const xen_domctl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_domctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_domctl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_domctl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_domctl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_domctl_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_domctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_domctl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_domctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_domctl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ioreq {
    pub addr: u64,
    pub data: u64,
    pub count: u32,
    pub size: u32,
    pub vp_eport: u32,
    pub _pad0: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_ioreq() {
    assert_eq!(
        ::std::mem::size_of::<ioreq>(),
        32usize,
        concat!("Size of: ", stringify!(ioreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ioreq>(),
        8usize,
        concat!("Alignment of ", stringify!(ioreq))
    );
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ioreq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ioreq),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ioreq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ioreq),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ioreq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ioreq),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ioreq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ioreq),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_vp_eport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ioreq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vp_eport) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ioreq),
                "::",
                stringify!(vp_eport)
            )
        );
    }
    test_field_vp_eport();
    fn test_field__pad0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ioreq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pad0) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ioreq),
                "::",
                stringify!(_pad0)
            )
        );
    }
    test_field__pad0();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ioreq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            31usize,
            concat!(
                "Offset of field: ",
                stringify!(ioreq),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
impl ioreq {
    #[inline]
    pub fn state(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_state(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn data_is_ptr(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_data_is_ptr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dir(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dir(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn df(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_df(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _pad1(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set__pad1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        state: u8,
        data_is_ptr: u8,
        dir: u8,
        df: u8,
        _pad1: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let state: u8 = unsafe { ::std::mem::transmute(state) };
            state as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let data_is_ptr: u8 = unsafe { ::std::mem::transmute(data_is_ptr) };
            data_is_ptr as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dir: u8 = unsafe { ::std::mem::transmute(dir) };
            dir as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let df: u8 = unsafe { ::std::mem::transmute(df) };
            df as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let _pad1: u8 = unsafe { ::std::mem::transmute(_pad1) };
            _pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ioreq_t = ioreq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_iopage {
    pub vcpu_ioreq: [ioreq; 1usize],
}
#[test]
fn bindgen_test_layout_shared_iopage() {
    assert_eq!(
        ::std::mem::size_of::<shared_iopage>(),
        32usize,
        concat!("Size of: ", stringify!(shared_iopage))
    );
    assert_eq!(
        ::std::mem::align_of::<shared_iopage>(),
        8usize,
        concat!("Alignment of ", stringify!(shared_iopage))
    );
    fn test_field_vcpu_ioreq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_iopage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_ioreq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_iopage),
                "::",
                stringify!(vcpu_ioreq)
            )
        );
    }
    test_field_vcpu_ioreq();
}
pub type shared_iopage_t = shared_iopage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buf_ioreq {
    pub type_: u8,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub data: u32,
}
#[test]
fn bindgen_test_layout_buf_ioreq() {
    assert_eq!(
        ::std::mem::size_of::<buf_ioreq>(),
        8usize,
        concat!("Size of: ", stringify!(buf_ioreq))
    );
    assert_eq!(
        ::std::mem::align_of::<buf_ioreq>(),
        4usize,
        concat!("Alignment of ", stringify!(buf_ioreq))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<buf_ioreq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(buf_ioreq),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<buf_ioreq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(buf_ioreq),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
impl buf_ioreq {
    #[inline]
    pub fn pad(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pad(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dir(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dir(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn size(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_size(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn addr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad: u8,
        dir: u8,
        size: u8,
        addr: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pad: u8 = unsafe { ::std::mem::transmute(pad) };
            pad as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dir: u8 = unsafe { ::std::mem::transmute(dir) };
            dir as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let size: u8 = unsafe { ::std::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit.set(4usize, 20u8, {
            let addr: u32 = unsafe { ::std::mem::transmute(addr) };
            addr as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type buf_ioreq_t = buf_ioreq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffered_iopage {
    pub read_pointer: u32,
    pub write_pointer: u32,
    pub buf_ioreq: [buf_ioreq_t; 511usize],
}
#[test]
fn bindgen_test_layout_buffered_iopage() {
    assert_eq!(
        ::std::mem::size_of::<buffered_iopage>(),
        4096usize,
        concat!("Size of: ", stringify!(buffered_iopage))
    );
    assert_eq!(
        ::std::mem::align_of::<buffered_iopage>(),
        4usize,
        concat!("Alignment of ", stringify!(buffered_iopage))
    );
    fn test_field_read_pointer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<buffered_iopage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).read_pointer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(buffered_iopage),
                "::",
                stringify!(read_pointer)
            )
        );
    }
    test_field_read_pointer();
    fn test_field_write_pointer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<buffered_iopage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).write_pointer) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(buffered_iopage),
                "::",
                stringify!(write_pointer)
            )
        );
    }
    test_field_write_pointer();
    fn test_field_buf_ioreq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<buffered_iopage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf_ioreq) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(buffered_iopage),
                "::",
                stringify!(buf_ioreq)
            )
        );
    }
    test_field_buf_ioreq();
}
pub type buffered_iopage_t = buffered_iopage;
pub const xenbus_state_XenbusStateUnknown: xenbus_state = 0;
pub const xenbus_state_XenbusStateInitialising: xenbus_state = 1;
pub const xenbus_state_XenbusStateInitWait: xenbus_state = 2;
pub const xenbus_state_XenbusStateInitialised: xenbus_state = 3;
pub const xenbus_state_XenbusStateConnected: xenbus_state = 4;
pub const xenbus_state_XenbusStateClosing: xenbus_state = 5;
pub const xenbus_state_XenbusStateClosed: xenbus_state = 6;
pub const xenbus_state_XenbusStateReconfiguring: xenbus_state = 7;
pub const xenbus_state_XenbusStateReconfigured: xenbus_state = 8;
pub type xenbus_state = ::std::os::raw::c_uint;
pub use self::xenbus_state as XenbusState;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    fn test_field___clang_max_align_nonce1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce1)
            )
        );
    }
    test_field___clang_max_align_nonce1();
    fn test_field___clang_max_align_nonce2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce2)
            )
        );
    }
    test_field___clang_max_align_nonce2();
}
pub type va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_longlong;
pub type __u_quad_t = ::std::os::raw::c_ulonglong;
pub type __intmax_t = ::std::os::raw::c_longlong;
pub type __uintmax_t = ::std::os::raw::c_ulonglong;
pub type __dev_t = __uint64_t;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = __uint64_t;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = __int64_t;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__fsid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = __uint64_t;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = __int64_t;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = __uint64_t;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = __uint64_t;
pub type __fsword_t = ::std::os::raw::c_int;
pub type __ssize_t = ::std::os::raw::c_int;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_int;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __time64_t = __int64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    fn test_field___wch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wch)
            )
        );
    }
    test_field___wch();
    fn test_field___wchb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wchb)
            )
        );
    }
    test_field___wchb();
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    fn test_field___count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__count)
            )
        );
    }
    test_field___count();
    fn test_field___value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__value)
            )
        );
    }
    test_field___value();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    fn test_field___pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_G_fpos_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__pos)
            )
        );
    }
    test_field___pos();
    fn test_field___state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_G_fpos_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__state)
            )
        );
    }
    test_field___state();
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    fn test_field___pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_G_fpos64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__pos)
            )
        );
    }
    test_field___pos();
    fn test_field___state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_G_fpos64_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__state)
            )
        );
    }
    test_field___state();
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    fn test_field__flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
    }
    test_field__flags();
    fn test_field__IO_read_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
    }
    test_field__IO_read_ptr();
    fn test_field__IO_read_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
    }
    test_field__IO_read_end();
    fn test_field__IO_read_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
    }
    test_field__IO_read_base();
    fn test_field__IO_write_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
    }
    test_field__IO_write_base();
    fn test_field__IO_write_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
    }
    test_field__IO_write_ptr();
    fn test_field__IO_write_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
    }
    test_field__IO_write_end();
    fn test_field__IO_buf_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
    }
    test_field__IO_buf_base();
    fn test_field__IO_buf_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
    }
    test_field__IO_buf_end();
    fn test_field__IO_save_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
    }
    test_field__IO_save_base();
    fn test_field__IO_backup_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
    }
    test_field__IO_backup_base();
    fn test_field__IO_save_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
    }
    test_field__IO_save_end();
    fn test_field__markers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
    }
    test_field__markers();
    fn test_field__chain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
    }
    test_field__chain();
    fn test_field__fileno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
    }
    test_field__fileno();
    fn test_field__flags2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
    }
    test_field__flags2();
    fn test_field__old_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
    }
    test_field__old_offset();
    fn test_field__cur_column() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
    }
    test_field__cur_column();
    fn test_field__vtable_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize
            },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
    }
    test_field__vtable_offset();
    fn test_field__shortbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize
            },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
    }
    test_field__shortbuf();
    fn test_field__lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
    }
    test_field__lock();
    fn test_field__offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
    }
    test_field__offset();
    fn test_field__codecvt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_codecvt)
            )
        );
    }
    test_field__codecvt();
    fn test_field__wide_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_wide_data)
            )
        );
    }
    test_field__wide_data();
    fn test_field__freeres_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_list)
            )
        );
    }
    test_field__freeres_list();
    fn test_field__freeres_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_freeres_buf)
            )
        );
    }
    test_field__freeres_buf();
    fn test_field___pad5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
    }
    test_field___pad5();
    fn test_field__mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
    }
    test_field__mode();
    fn test_field__unused2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_IO_FILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    test_field__unused2();
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_readconsole {
    pub clear: u8,
    pub incremental: u8,
    pub pad0: u8,
    pub pad1: u8,
    pub index: u32,
    pub buffer: __guest_handle_64_char,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_readconsole() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_readconsole>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_readconsole))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_readconsole>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_readconsole))
    );
    fn test_field_clear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_readconsole>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clear) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_readconsole),
                "::",
                stringify!(clear)
            )
        );
    }
    test_field_clear();
    fn test_field_incremental() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_readconsole>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).incremental) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_readconsole),
                "::",
                stringify!(incremental)
            )
        );
    }
    test_field_incremental();
    fn test_field_pad0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_readconsole>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad0) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_readconsole),
                "::",
                stringify!(pad0)
            )
        );
    }
    test_field_pad0();
    fn test_field_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_readconsole>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_readconsole),
                "::",
                stringify!(pad1)
            )
        );
    }
    test_field_pad1();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_readconsole>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_readconsole),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_readconsole>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_readconsole),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_readconsole>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_readconsole),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_tbuf_op {
    pub cmd: u32,
    pub cpu_mask: xenctl_bitmap,
    pub evt_mask: u32,
    pub buffer_mfn: u64,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_tbuf_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_tbuf_op>(),
        48usize,
        concat!("Size of: ", stringify!(xen_sysctl_tbuf_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_tbuf_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_tbuf_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_tbuf_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_tbuf_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_cpu_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_tbuf_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_tbuf_op),
                "::",
                stringify!(cpu_mask)
            )
        );
    }
    test_field_cpu_mask();
    fn test_field_evt_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_tbuf_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).evt_mask) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_tbuf_op),
                "::",
                stringify!(evt_mask)
            )
        );
    }
    test_field_evt_mask();
    fn test_field_buffer_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_tbuf_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_mfn) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_tbuf_op),
                "::",
                stringify!(buffer_mfn)
            )
        );
    }
    test_field_buffer_mfn();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_tbuf_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_tbuf_op),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_physinfo {
    pub threads_per_core: u32,
    pub cores_per_socket: u32,
    pub nr_cpus: u32,
    pub max_cpu_id: u32,
    pub nr_nodes: u32,
    pub max_node_id: u32,
    pub cpu_khz: u32,
    pub capabilities: u32,
    pub arch_capabilities: u32,
    pub pad: u32,
    pub total_pages: u64,
    pub free_pages: u64,
    pub scrub_pages: u64,
    pub outstanding_pages: u64,
    pub max_mfn: u64,
    pub hw_cap: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_xen_sysctl_physinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_physinfo>(),
        112usize,
        concat!("Size of: ", stringify!(xen_sysctl_physinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_physinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_physinfo))
    );
    fn test_field_threads_per_core() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).threads_per_core) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(threads_per_core)
            )
        );
    }
    test_field_threads_per_core();
    fn test_field_cores_per_socket() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cores_per_socket) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(cores_per_socket)
            )
        );
    }
    test_field_cores_per_socket();
    fn test_field_nr_cpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_cpus) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(nr_cpus)
            )
        );
    }
    test_field_nr_cpus();
    fn test_field_max_cpu_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_cpu_id) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(max_cpu_id)
            )
        );
    }
    test_field_max_cpu_id();
    fn test_field_nr_nodes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_nodes) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(nr_nodes)
            )
        );
    }
    test_field_nr_nodes();
    fn test_field_max_node_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_node_id) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(max_node_id)
            )
        );
    }
    test_field_max_node_id();
    fn test_field_cpu_khz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_khz) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(cpu_khz)
            )
        );
    }
    test_field_cpu_khz();
    fn test_field_capabilities() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(capabilities)
            )
        );
    }
    test_field_capabilities();
    fn test_field_arch_capabilities() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arch_capabilities) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(arch_capabilities)
            )
        );
    }
    test_field_arch_capabilities();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_total_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total_pages) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(total_pages)
            )
        );
    }
    test_field_total_pages();
    fn test_field_free_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).free_pages) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(free_pages)
            )
        );
    }
    test_field_free_pages();
    fn test_field_scrub_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scrub_pages) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(scrub_pages)
            )
        );
    }
    test_field_scrub_pages();
    fn test_field_outstanding_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outstanding_pages) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(outstanding_pages)
            )
        );
    }
    test_field_outstanding_pages();
    fn test_field_max_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_mfn) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(max_mfn)
            )
        );
    }
    test_field_max_mfn();
    fn test_field_hw_cap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_physinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hw_cap) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_physinfo),
                "::",
                stringify!(hw_cap)
            )
        );
    }
    test_field_hw_cap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_sched_id {
    pub sched_id: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_sched_id() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_sched_id>(),
        4usize,
        concat!("Size of: ", stringify!(xen_sysctl_sched_id))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_sched_id>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_sched_id))
    );
    fn test_field_sched_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_sched_id>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_sched_id),
                "::",
                stringify!(sched_id)
            )
        );
    }
    test_field_sched_id();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_perfc_desc {
    pub name: [::std::os::raw::c_char; 80usize],
    pub nr_vals: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_perfc_desc() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_perfc_desc>(),
        84usize,
        concat!("Size of: ", stringify!(xen_sysctl_perfc_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_perfc_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_perfc_desc))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_perfc_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_perfc_desc),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_nr_vals() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_perfc_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vals) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_perfc_desc),
                "::",
                stringify!(nr_vals)
            )
        );
    }
    test_field_nr_vals();
}
pub type xen_sysctl_perfc_desc_t = xen_sysctl_perfc_desc;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_perfc_desc_t {
    pub p: *mut xen_sysctl_perfc_desc_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_perfc_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_perfc_desc_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_perfc_desc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_perfc_desc_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_perfc_desc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_perfc_desc_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_perfc_desc_t {
    pub p: *mut xen_sysctl_perfc_desc_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_perfc_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_desc_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_perfc_desc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_perfc_desc_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_perfc_desc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_perfc_desc_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_perfc_desc_t {
    pub p: *const xen_sysctl_perfc_desc_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_perfc_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_desc_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_perfc_desc_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_perfc_desc_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_perfc_desc_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_perfc_desc_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_perfc_desc_t {
    pub p: *const xen_sysctl_perfc_desc_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_perfc_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_desc_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_sysctl_perfc_desc_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_perfc_desc_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_sysctl_perfc_desc_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_perfc_desc_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
pub type xen_sysctl_perfc_val_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_perfc_val_t {
    pub p: *mut xen_sysctl_perfc_val_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_perfc_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_perfc_val_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_perfc_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_perfc_val_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_perfc_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_perfc_val_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_perfc_val_t {
    pub p: *mut xen_sysctl_perfc_val_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_perfc_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_val_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_perfc_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_perfc_val_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_perfc_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_perfc_val_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_perfc_val_t {
    pub p: *const xen_sysctl_perfc_val_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_perfc_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_val_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_perfc_val_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_perfc_val_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_perfc_val_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_perfc_val_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_perfc_val_t {
    pub p: *const xen_sysctl_perfc_val_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_perfc_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_val_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_sysctl_perfc_val_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_perfc_val_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_sysctl_perfc_val_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_perfc_val_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_perfc_op {
    pub cmd: u32,
    pub nr_counters: u32,
    pub nr_vals: u32,
    pub desc: __guest_handle_64_xen_sysctl_perfc_desc_t,
    pub val: __guest_handle_64_xen_sysctl_perfc_val_t,
}
#[test]
fn bindgen_test_layout_xen_sysctl_perfc_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_perfc_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_perfc_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_perfc_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_perfc_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_perfc_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_perfc_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_nr_counters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_perfc_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_counters) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_perfc_op),
                "::",
                stringify!(nr_counters)
            )
        );
    }
    test_field_nr_counters();
    fn test_field_nr_vals() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_perfc_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vals) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_perfc_op),
                "::",
                stringify!(nr_vals)
            )
        );
    }
    test_field_nr_vals();
    fn test_field_desc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_perfc_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_perfc_op),
                "::",
                stringify!(desc)
            )
        );
    }
    test_field_desc();
    fn test_field_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_perfc_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_perfc_op),
                "::",
                stringify!(val)
            )
        );
    }
    test_field_val();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_getdomaininfolist {
    pub first_domain: domid_t,
    pub max_domains: u32,
    pub buffer: __guest_handle_64_xen_domctl_getdomaininfo_t,
    pub num_domains: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_getdomaininfolist() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_getdomaininfolist>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_getdomaininfolist))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_getdomaininfolist>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_getdomaininfolist))
    );
    fn test_field_first_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_getdomaininfolist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_domain) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_getdomaininfolist),
                "::",
                stringify!(first_domain)
            )
        );
    }
    test_field_first_domain();
    fn test_field_max_domains() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_getdomaininfolist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_domains) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_getdomaininfolist),
                "::",
                stringify!(max_domains)
            )
        );
    }
    test_field_max_domains();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_getdomaininfolist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_getdomaininfolist),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_num_domains() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_getdomaininfolist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_domains) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_getdomaininfolist),
                "::",
                stringify!(num_domains)
            )
        );
    }
    test_field_num_domains();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_debug_keys {
    pub keys: __guest_handle_64_const_char,
    pub nr_keys: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_debug_keys() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_debug_keys>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_debug_keys))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_debug_keys>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_debug_keys))
    );
    fn test_field_keys() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_debug_keys>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_debug_keys),
                "::",
                stringify!(keys)
            )
        );
    }
    test_field_keys();
    fn test_field_nr_keys() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_debug_keys>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_keys) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_debug_keys),
                "::",
                stringify!(nr_keys)
            )
        );
    }
    test_field_nr_keys();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpuinfo {
    pub idletime: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpuinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpuinfo>(),
        8usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpuinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpuinfo))
    );
    fn test_field_idletime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idletime) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpuinfo),
                "::",
                stringify!(idletime)
            )
        );
    }
    test_field_idletime();
}
pub type xen_sysctl_cpuinfo_t = xen_sysctl_cpuinfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_cpuinfo_t {
    pub p: *mut xen_sysctl_cpuinfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_cpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_sysctl_cpuinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_cpuinfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_cpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_cpuinfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_cpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_cpuinfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_cpuinfo_t {
    pub p: *mut xen_sysctl_cpuinfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_cpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_cpuinfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_cpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_cpuinfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_cpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_cpuinfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_cpuinfo_t {
    pub p: *const xen_sysctl_cpuinfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_cpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_cpuinfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_cpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_cpuinfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_cpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_cpuinfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_cpuinfo_t {
    pub p: *const xen_sysctl_cpuinfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_cpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_cpuinfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_sysctl_cpuinfo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_cpuinfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_sysctl_cpuinfo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_cpuinfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_getcpuinfo {
    pub max_cpus: u32,
    pub info: __guest_handle_64_xen_sysctl_cpuinfo_t,
    pub nr_cpus: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_getcpuinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_getcpuinfo>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_getcpuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_getcpuinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_getcpuinfo))
    );
    fn test_field_max_cpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_getcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_cpus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_getcpuinfo),
                "::",
                stringify!(max_cpus)
            )
        );
    }
    test_field_max_cpus();
    fn test_field_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_getcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_getcpuinfo),
                "::",
                stringify!(info)
            )
        );
    }
    test_field_info();
    fn test_field_nr_cpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_getcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_cpus) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_getcpuinfo),
                "::",
                stringify!(nr_cpus)
            )
        );
    }
    test_field_nr_cpus();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_availheap {
    pub min_bitwidth: u32,
    pub max_bitwidth: u32,
    pub node: i32,
    pub avail_bytes: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_availheap() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_availheap>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_availheap))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_availheap>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_availheap))
    );
    fn test_field_min_bitwidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_availheap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_bitwidth) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_availheap),
                "::",
                stringify!(min_bitwidth)
            )
        );
    }
    test_field_min_bitwidth();
    fn test_field_max_bitwidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_availheap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_bitwidth) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_availheap),
                "::",
                stringify!(max_bitwidth)
            )
        );
    }
    test_field_max_bitwidth();
    fn test_field_node() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_availheap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_availheap),
                "::",
                stringify!(node)
            )
        );
    }
    test_field_node();
    fn test_field_avail_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_availheap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).avail_bytes) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_availheap),
                "::",
                stringify!(avail_bytes)
            )
        );
    }
    test_field_avail_bytes();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_px_val {
    pub freq: u64,
    pub residency: u64,
    pub count: u64,
}
#[test]
fn bindgen_test_layout_pm_px_val() {
    assert_eq!(
        ::std::mem::size_of::<pm_px_val>(),
        24usize,
        concat!("Size of: ", stringify!(pm_px_val))
    );
    assert_eq!(
        ::std::mem::align_of::<pm_px_val>(),
        8usize,
        concat!("Alignment of ", stringify!(pm_px_val))
    );
    fn test_field_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_px_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_px_val),
                "::",
                stringify!(freq)
            )
        );
    }
    test_field_freq();
    fn test_field_residency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_px_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).residency) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_px_val),
                "::",
                stringify!(residency)
            )
        );
    }
    test_field_residency();
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_px_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_px_val),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
}
pub type pm_px_val_t = pm_px_val;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_pm_px_val_t {
    pub p: *mut pm_px_val_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_pm_px_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_pm_px_val_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_pm_px_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_pm_px_val_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_pm_px_val_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_pm_px_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_pm_px_val_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_pm_px_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_pm_px_val_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_pm_px_val_t {
    pub p: *mut pm_px_val_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_pm_px_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_pm_px_val_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_pm_px_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_pm_px_val_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_pm_px_val_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_pm_px_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_pm_px_val_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_pm_px_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_pm_px_val_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_pm_px_val_t {
    pub p: *const pm_px_val_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_pm_px_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_pm_px_val_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_pm_px_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_pm_px_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_pm_px_val_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_pm_px_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_pm_px_val_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_pm_px_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_pm_px_val_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_pm_px_val_t {
    pub p: *const pm_px_val_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_pm_px_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_pm_px_val_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_pm_px_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_pm_px_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_pm_px_val_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_pm_px_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_pm_px_val_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_pm_px_val_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_pm_px_val_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pm_px_stat {
    pub total: u8,
    pub usable: u8,
    pub last: u8,
    pub cur: u8,
    pub trans_pt: __guest_handle_64_uint64,
    pub pt: __guest_handle_64_pm_px_val_t,
}
#[test]
fn bindgen_test_layout_pm_px_stat() {
    assert_eq!(
        ::std::mem::size_of::<pm_px_stat>(),
        24usize,
        concat!("Size of: ", stringify!(pm_px_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pm_px_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pm_px_stat))
    );
    fn test_field_total() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_px_stat),
                "::",
                stringify!(total)
            )
        );
    }
    test_field_total();
    fn test_field_usable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).usable) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_px_stat),
                "::",
                stringify!(usable)
            )
        );
    }
    test_field_usable();
    fn test_field_last() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_px_stat),
                "::",
                stringify!(last)
            )
        );
    }
    test_field_last();
    fn test_field_cur() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cur) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_px_stat),
                "::",
                stringify!(cur)
            )
        );
    }
    test_field_cur();
    fn test_field_trans_pt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trans_pt) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_px_stat),
                "::",
                stringify!(trans_pt)
            )
        );
    }
    test_field_trans_pt();
    fn test_field_pt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pt) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_px_stat),
                "::",
                stringify!(pt)
            )
        );
    }
    test_field_pt();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pm_cx_stat {
    pub nr: u32,
    pub last: u32,
    pub idle_time: u64,
    pub triggers: __guest_handle_64_uint64,
    pub residencies: __guest_handle_64_uint64,
    pub nr_pc: u32,
    pub nr_cc: u32,
    pub pc: __guest_handle_64_uint64,
    pub cc: __guest_handle_64_uint64,
}
#[test]
fn bindgen_test_layout_pm_cx_stat() {
    assert_eq!(
        ::std::mem::size_of::<pm_cx_stat>(),
        56usize,
        concat!("Size of: ", stringify!(pm_cx_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pm_cx_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pm_cx_stat))
    );
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_cx_stat),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_last() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_cx_stat),
                "::",
                stringify!(last)
            )
        );
    }
    test_field_last();
    fn test_field_idle_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idle_time) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_cx_stat),
                "::",
                stringify!(idle_time)
            )
        );
    }
    test_field_idle_time();
    fn test_field_triggers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).triggers) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_cx_stat),
                "::",
                stringify!(triggers)
            )
        );
    }
    test_field_triggers();
    fn test_field_residencies() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).residencies) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_cx_stat),
                "::",
                stringify!(residencies)
            )
        );
    }
    test_field_residencies();
    fn test_field_nr_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_pc) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_cx_stat),
                "::",
                stringify!(nr_pc)
            )
        );
    }
    test_field_nr_pc();
    fn test_field_nr_cc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_cc) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_cx_stat),
                "::",
                stringify!(nr_cc)
            )
        );
    }
    test_field_nr_cc();
    fn test_field_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_cx_stat),
                "::",
                stringify!(pc)
            )
        );
    }
    test_field_pc();
    fn test_field_cc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pm_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cc) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(pm_cx_stat),
                "::",
                stringify!(cc)
            )
        );
    }
    test_field_cc();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_get_pmstat {
    pub type_: u32,
    pub cpuid: u32,
    pub u: xen_sysctl_get_pmstat__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_get_pmstat__bindgen_ty_1 {
    pub getpx: pm_px_stat,
    pub getcx: pm_cx_stat,
}
#[test]
fn bindgen_test_layout_xen_sysctl_get_pmstat__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_get_pmstat__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(xen_sysctl_get_pmstat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_get_pmstat__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_get_pmstat__bindgen_ty_1)
        )
    );
    fn test_field_getpx() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_get_pmstat__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getpx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_get_pmstat__bindgen_ty_1),
                "::",
                stringify!(getpx)
            )
        );
    }
    test_field_getpx();
    fn test_field_getcx() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_get_pmstat__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getcx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_get_pmstat__bindgen_ty_1),
                "::",
                stringify!(getcx)
            )
        );
    }
    test_field_getcx();
}
#[test]
fn bindgen_test_layout_xen_sysctl_get_pmstat() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_get_pmstat>(),
        64usize,
        concat!("Size of: ", stringify!(xen_sysctl_get_pmstat))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_get_pmstat>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_get_pmstat))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_get_pmstat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_get_pmstat),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_cpuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_get_pmstat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpuid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_get_pmstat),
                "::",
                stringify!(cpuid)
            )
        );
    }
    test_field_cpuid();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_get_pmstat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_get_pmstat),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_hotplug {
    pub cpu: u32,
    pub op: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpu_hotplug() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpu_hotplug>(),
        8usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpu_hotplug))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpu_hotplug>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpu_hotplug))
    );
    fn test_field_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpu_hotplug>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpu_hotplug),
                "::",
                stringify!(cpu)
            )
        );
    }
    test_field_cpu();
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpu_hotplug>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpu_hotplug),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_userspace {
    pub scaling_setspeed: u32,
}
#[test]
fn bindgen_test_layout_xen_userspace() {
    assert_eq!(
        ::std::mem::size_of::<xen_userspace>(),
        4usize,
        concat!("Size of: ", stringify!(xen_userspace))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_userspace>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_userspace))
    );
    fn test_field_scaling_setspeed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_userspace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_setspeed) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_userspace),
                "::",
                stringify!(scaling_setspeed)
            )
        );
    }
    test_field_scaling_setspeed();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_ondemand {
    pub sampling_rate_max: u32,
    pub sampling_rate_min: u32,
    pub sampling_rate: u32,
    pub up_threshold: u32,
}
#[test]
fn bindgen_test_layout_xen_ondemand() {
    assert_eq!(
        ::std::mem::size_of::<xen_ondemand>(),
        16usize,
        concat!("Size of: ", stringify!(xen_ondemand))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_ondemand>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_ondemand))
    );
    fn test_field_sampling_rate_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_ondemand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sampling_rate_max) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_ondemand),
                "::",
                stringify!(sampling_rate_max)
            )
        );
    }
    test_field_sampling_rate_max();
    fn test_field_sampling_rate_min() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_ondemand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sampling_rate_min) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_ondemand),
                "::",
                stringify!(sampling_rate_min)
            )
        );
    }
    test_field_sampling_rate_min();
    fn test_field_sampling_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_ondemand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sampling_rate) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_ondemand),
                "::",
                stringify!(sampling_rate)
            )
        );
    }
    test_field_sampling_rate();
    fn test_field_up_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_ondemand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).up_threshold) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_ondemand),
                "::",
                stringify!(up_threshold)
            )
        );
    }
    test_field_up_threshold();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_get_cpufreq_para {
    pub cpu_num: u32,
    pub freq_num: u32,
    pub gov_num: u32,
    pub affected_cpus: __guest_handle_64_uint32,
    pub scaling_available_frequencies: __guest_handle_64_uint32,
    pub scaling_available_governors: __guest_handle_64_char,
    pub scaling_driver: [::std::os::raw::c_char; 16usize],
    pub cpuinfo_cur_freq: u32,
    pub cpuinfo_max_freq: u32,
    pub cpuinfo_min_freq: u32,
    pub scaling_cur_freq: u32,
    pub scaling_governor: [::std::os::raw::c_char; 16usize],
    pub scaling_max_freq: u32,
    pub scaling_min_freq: u32,
    pub u: xen_get_cpufreq_para__bindgen_ty_1,
    pub turbo_enabled: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_get_cpufreq_para__bindgen_ty_1 {
    pub userspace: xen_userspace,
    pub ondemand: xen_ondemand,
}
#[test]
fn bindgen_test_layout_xen_get_cpufreq_para__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_get_cpufreq_para__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(xen_get_cpufreq_para__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_get_cpufreq_para__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_get_cpufreq_para__bindgen_ty_1)
        )
    );
    fn test_field_userspace() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_get_cpufreq_para__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).userspace) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para__bindgen_ty_1),
                "::",
                stringify!(userspace)
            )
        );
    }
    test_field_userspace();
    fn test_field_ondemand() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_get_cpufreq_para__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ondemand) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para__bindgen_ty_1),
                "::",
                stringify!(ondemand)
            )
        );
    }
    test_field_ondemand();
}
#[test]
fn bindgen_test_layout_xen_get_cpufreq_para() {
    assert_eq!(
        ::std::mem::size_of::<xen_get_cpufreq_para>(),
        120usize,
        concat!("Size of: ", stringify!(xen_get_cpufreq_para))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_get_cpufreq_para>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_get_cpufreq_para))
    );
    fn test_field_cpu_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_num) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(cpu_num)
            )
        );
    }
    test_field_cpu_num();
    fn test_field_freq_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq_num) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(freq_num)
            )
        );
    }
    test_field_freq_num();
    fn test_field_gov_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gov_num) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(gov_num)
            )
        );
    }
    test_field_gov_num();
    fn test_field_affected_cpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).affected_cpus) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(affected_cpus)
            )
        );
    }
    test_field_affected_cpus();
    fn test_field_scaling_available_frequencies() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_available_frequencies) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(scaling_available_frequencies)
            )
        );
    }
    test_field_scaling_available_frequencies();
    fn test_field_scaling_available_governors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_available_governors) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(scaling_available_governors)
            )
        );
    }
    test_field_scaling_available_governors();
    fn test_field_scaling_driver() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_driver) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(scaling_driver)
            )
        );
    }
    test_field_scaling_driver();
    fn test_field_cpuinfo_cur_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpuinfo_cur_freq) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(cpuinfo_cur_freq)
            )
        );
    }
    test_field_cpuinfo_cur_freq();
    fn test_field_cpuinfo_max_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpuinfo_max_freq) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(cpuinfo_max_freq)
            )
        );
    }
    test_field_cpuinfo_max_freq();
    fn test_field_cpuinfo_min_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpuinfo_min_freq) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(cpuinfo_min_freq)
            )
        );
    }
    test_field_cpuinfo_min_freq();
    fn test_field_scaling_cur_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_cur_freq) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(scaling_cur_freq)
            )
        );
    }
    test_field_scaling_cur_freq();
    fn test_field_scaling_governor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_governor) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(scaling_governor)
            )
        );
    }
    test_field_scaling_governor();
    fn test_field_scaling_max_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_max_freq) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(scaling_max_freq)
            )
        );
    }
    test_field_scaling_max_freq();
    fn test_field_scaling_min_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_min_freq) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(scaling_min_freq)
            )
        );
    }
    test_field_scaling_min_freq();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_turbo_enabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).turbo_enabled) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_get_cpufreq_para),
                "::",
                stringify!(turbo_enabled)
            )
        );
    }
    test_field_turbo_enabled();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_set_cpufreq_gov {
    pub scaling_governor: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_xen_set_cpufreq_gov() {
    assert_eq!(
        ::std::mem::size_of::<xen_set_cpufreq_gov>(),
        16usize,
        concat!("Size of: ", stringify!(xen_set_cpufreq_gov))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_set_cpufreq_gov>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_set_cpufreq_gov))
    );
    fn test_field_scaling_governor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_set_cpufreq_gov>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_governor) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_set_cpufreq_gov),
                "::",
                stringify!(scaling_governor)
            )
        );
    }
    test_field_scaling_governor();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_set_cpufreq_para {
    pub ctrl_type: u32,
    pub ctrl_value: u32,
}
#[test]
fn bindgen_test_layout_xen_set_cpufreq_para() {
    assert_eq!(
        ::std::mem::size_of::<xen_set_cpufreq_para>(),
        8usize,
        concat!("Size of: ", stringify!(xen_set_cpufreq_para))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_set_cpufreq_para>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_set_cpufreq_para))
    );
    fn test_field_ctrl_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_set_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctrl_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_set_cpufreq_para),
                "::",
                stringify!(ctrl_type)
            )
        );
    }
    test_field_ctrl_type();
    fn test_field_ctrl_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_set_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctrl_value) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_set_cpufreq_para),
                "::",
                stringify!(ctrl_value)
            )
        );
    }
    test_field_ctrl_value();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_pm_op {
    pub cmd: u32,
    pub cpuid: u32,
    pub u: xen_sysctl_pm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_pm_op__bindgen_ty_1 {
    pub get_para: xen_get_cpufreq_para,
    pub set_gov: xen_set_cpufreq_gov,
    pub set_para: xen_set_cpufreq_para,
    pub get_avgfreq: u64,
    pub set_sched_opt_smt: u32,
    pub get_max_cstate: u32,
    pub set_max_cstate: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_pm_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_pm_op__bindgen_ty_1>(),
        120usize,
        concat!("Size of: ", stringify!(xen_sysctl_pm_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_pm_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_pm_op__bindgen_ty_1))
    );
    fn test_field_get_para() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_para) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op__bindgen_ty_1),
                "::",
                stringify!(get_para)
            )
        );
    }
    test_field_get_para();
    fn test_field_set_gov() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_gov) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op__bindgen_ty_1),
                "::",
                stringify!(set_gov)
            )
        );
    }
    test_field_set_gov();
    fn test_field_set_para() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_para) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op__bindgen_ty_1),
                "::",
                stringify!(set_para)
            )
        );
    }
    test_field_set_para();
    fn test_field_get_avgfreq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_avgfreq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op__bindgen_ty_1),
                "::",
                stringify!(get_avgfreq)
            )
        );
    }
    test_field_get_avgfreq();
    fn test_field_set_sched_opt_smt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_sched_opt_smt) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op__bindgen_ty_1),
                "::",
                stringify!(set_sched_opt_smt)
            )
        );
    }
    test_field_set_sched_opt_smt();
    fn test_field_get_max_cstate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_max_cstate) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op__bindgen_ty_1),
                "::",
                stringify!(get_max_cstate)
            )
        );
    }
    test_field_get_max_cstate();
    fn test_field_set_max_cstate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_max_cstate) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op__bindgen_ty_1),
                "::",
                stringify!(set_max_cstate)
            )
        );
    }
    test_field_set_max_cstate();
}
#[test]
fn bindgen_test_layout_xen_sysctl_pm_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_pm_op>(),
        128usize,
        concat!("Size of: ", stringify!(xen_sysctl_pm_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_pm_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_pm_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_cpuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpuid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op),
                "::",
                stringify!(cpuid)
            )
        );
    }
    test_field_cpuid();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pm_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pm_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_page_offline_op {
    pub cmd: u32,
    pub start: u32,
    pub end: u32,
    pub status: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_page_offline_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_page_offline_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_page_offline_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_page_offline_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_page_offline_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_page_offline_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_page_offline_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_page_offline_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_page_offline_op),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
    fn test_field_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_page_offline_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_page_offline_op),
                "::",
                stringify!(end)
            )
        );
    }
    test_field_end();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_page_offline_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_page_offline_op),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_lockprof_data {
    pub name: [::std::os::raw::c_char; 40usize],
    pub type_: i32,
    pub idx: i32,
    pub lock_cnt: u64,
    pub block_cnt: u64,
    pub lock_time: u64,
    pub block_time: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_lockprof_data() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_lockprof_data>(),
        80usize,
        concat!("Size of: ", stringify!(xen_sysctl_lockprof_data))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_lockprof_data>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_lockprof_data))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_data),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_data),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_data),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
    fn test_field_lock_cnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lock_cnt) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_data),
                "::",
                stringify!(lock_cnt)
            )
        );
    }
    test_field_lock_cnt();
    fn test_field_block_cnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).block_cnt) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_data),
                "::",
                stringify!(block_cnt)
            )
        );
    }
    test_field_block_cnt();
    fn test_field_lock_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lock_time) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_data),
                "::",
                stringify!(lock_time)
            )
        );
    }
    test_field_lock_time();
    fn test_field_block_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).block_time) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_data),
                "::",
                stringify!(block_time)
            )
        );
    }
    test_field_block_time();
}
pub type xen_sysctl_lockprof_data_t = xen_sysctl_lockprof_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_lockprof_data_t {
    pub p: *mut xen_sysctl_lockprof_data_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_lockprof_data_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_lockprof_data_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_lockprof_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_lockprof_data_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_lockprof_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_lockprof_data_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_lockprof_data_t {
    pub p: *mut xen_sysctl_lockprof_data_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_lockprof_data_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_lockprof_data_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_lockprof_data_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_lockprof_data_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_lockprof_data_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_lockprof_data_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_lockprof_data_t {
    pub p: *const xen_sysctl_lockprof_data_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_lockprof_data_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_lockprof_data_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_sysctl_lockprof_data_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_lockprof_data_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_sysctl_lockprof_data_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_lockprof_data_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_lockprof_data_t {
    pub p: *const xen_sysctl_lockprof_data_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_lockprof_data_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_lockprof_data_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_sysctl_lockprof_data_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_lockprof_data_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_sysctl_lockprof_data_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_lockprof_data_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_lockprof_op {
    pub cmd: u32,
    pub max_elem: u32,
    pub nr_elem: u32,
    pub time: u64,
    pub data: __guest_handle_64_xen_sysctl_lockprof_data_t,
}
#[test]
fn bindgen_test_layout_xen_sysctl_lockprof_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_lockprof_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_lockprof_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_lockprof_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_lockprof_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_max_elem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_elem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_op),
                "::",
                stringify!(max_elem)
            )
        );
    }
    test_field_max_elem();
    fn test_field_nr_elem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_elem) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_op),
                "::",
                stringify!(nr_elem)
            )
        );
    }
    test_field_nr_elem();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_op),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_lockprof_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_lockprof_op),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cputopo {
    pub core: u32,
    pub socket: u32,
    pub node: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cputopo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cputopo>(),
        12usize,
        concat!("Size of: ", stringify!(xen_sysctl_cputopo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cputopo>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cputopo))
    );
    fn test_field_core() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cputopo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).core) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cputopo),
                "::",
                stringify!(core)
            )
        );
    }
    test_field_core();
    fn test_field_socket() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cputopo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).socket) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cputopo),
                "::",
                stringify!(socket)
            )
        );
    }
    test_field_socket();
    fn test_field_node() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cputopo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cputopo),
                "::",
                stringify!(node)
            )
        );
    }
    test_field_node();
}
pub type xen_sysctl_cputopo_t = xen_sysctl_cputopo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_cputopo_t {
    pub p: *mut xen_sysctl_cputopo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_cputopo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_cputopo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_sysctl_cputopo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_cputopo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_cputopo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_cputopo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_cputopo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_cputopo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_cputopo_t {
    pub p: *mut xen_sysctl_cputopo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_cputopo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_cputopo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_cputopo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_cputopo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_cputopo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_cputopo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_cputopo_t {
    pub p: *const xen_sysctl_cputopo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_cputopo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_cputopo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_cputopo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_cputopo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_cputopo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_cputopo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_cputopo_t {
    pub p: *const xen_sysctl_cputopo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_cputopo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_cputopo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_sysctl_cputopo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_cputopo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_sysctl_cputopo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_cputopo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_cputopoinfo {
    pub num_cpus: u32,
    pub cputopo: __guest_handle_64_xen_sysctl_cputopo_t,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cputopoinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cputopoinfo>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_cputopoinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cputopoinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cputopoinfo))
    );
    fn test_field_num_cpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cputopoinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_cpus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cputopoinfo),
                "::",
                stringify!(num_cpus)
            )
        );
    }
    test_field_num_cpus();
    fn test_field_cputopo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cputopoinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cputopo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cputopoinfo),
                "::",
                stringify!(cputopo)
            )
        );
    }
    test_field_cputopo();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_meminfo {
    pub memsize: u64,
    pub memfree: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_meminfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_meminfo>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_meminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_meminfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_meminfo))
    );
    fn test_field_memsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_meminfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).memsize) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_meminfo),
                "::",
                stringify!(memsize)
            )
        );
    }
    test_field_memsize();
    fn test_field_memfree() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_meminfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).memfree) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_meminfo),
                "::",
                stringify!(memfree)
            )
        );
    }
    test_field_memfree();
}
pub type xen_sysctl_meminfo_t = xen_sysctl_meminfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_meminfo_t {
    pub p: *mut xen_sysctl_meminfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_meminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_meminfo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_sysctl_meminfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_meminfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_meminfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_meminfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_meminfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_meminfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_meminfo_t {
    pub p: *mut xen_sysctl_meminfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_meminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_meminfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_meminfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_meminfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_meminfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_meminfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_meminfo_t {
    pub p: *const xen_sysctl_meminfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_meminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_meminfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_meminfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_meminfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_meminfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_meminfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_meminfo_t {
    pub p: *const xen_sysctl_meminfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_meminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_meminfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_sysctl_meminfo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_meminfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_sysctl_meminfo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_meminfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_numainfo {
    pub num_nodes: u32,
    pub meminfo: __guest_handle_64_xen_sysctl_meminfo_t,
    pub distance: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_numainfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_numainfo>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_numainfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_numainfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_numainfo))
    );
    fn test_field_num_nodes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_numainfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_nodes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_numainfo),
                "::",
                stringify!(num_nodes)
            )
        );
    }
    test_field_num_nodes();
    fn test_field_meminfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_numainfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).meminfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_numainfo),
                "::",
                stringify!(meminfo)
            )
        );
    }
    test_field_meminfo();
    fn test_field_distance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_numainfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_numainfo),
                "::",
                stringify!(distance)
            )
        );
    }
    test_field_distance();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_cpupool_op {
    pub op: u32,
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub domid: u32,
    pub cpu: u32,
    pub n_dom: u32,
    pub cpumap: xenctl_bitmap,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpupool_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpupool_op>(),
        40usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpupool_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpupool_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpupool_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpupool_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpupool_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_cpupool_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpupool_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpupool_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpupool_op),
                "::",
                stringify!(cpupool_id)
            )
        );
    }
    test_field_cpupool_id();
    fn test_field_sched_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpupool_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpupool_op),
                "::",
                stringify!(sched_id)
            )
        );
    }
    test_field_sched_id();
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpupool_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpupool_op),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpupool_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpupool_op),
                "::",
                stringify!(cpu)
            )
        );
    }
    test_field_cpu();
    fn test_field_n_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpupool_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).n_dom) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpupool_op),
                "::",
                stringify!(n_dom)
            )
        );
    }
    test_field_n_dom();
    fn test_field_cpumap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpupool_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpumap) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpupool_op),
                "::",
                stringify!(cpumap)
            )
        );
    }
    test_field_cpumap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_arinc653_schedule {
    pub major_frame: u64,
    pub num_sched_entries: u8,
    pub sched_entries: [xen_sysctl_arinc653_schedule__bindgen_ty_1; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_arinc653_schedule__bindgen_ty_1 {
    pub dom_handle: xen_domain_handle_t,
    pub vcpu_id: u32,
    pub runtime: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_arinc653_schedule__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_arinc653_schedule__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_arinc653_schedule__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1)
        )
    );
    fn test_field_dom_handle() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_arinc653_schedule__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dom_handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1),
                "::",
                stringify!(dom_handle)
            )
        );
    }
    test_field_dom_handle();
    fn test_field_vcpu_id() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_arinc653_schedule__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_id) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1),
                "::",
                stringify!(vcpu_id)
            )
        );
    }
    test_field_vcpu_id();
    fn test_field_runtime() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_arinc653_schedule__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).runtime) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1),
                "::",
                stringify!(runtime)
            )
        );
    }
    test_field_runtime();
}
#[test]
fn bindgen_test_layout_xen_sysctl_arinc653_schedule() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_arinc653_schedule>(),
        2064usize,
        concat!("Size of: ", stringify!(xen_sysctl_arinc653_schedule))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_arinc653_schedule>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_arinc653_schedule))
    );
    fn test_field_major_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_arinc653_schedule>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).major_frame) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_arinc653_schedule),
                "::",
                stringify!(major_frame)
            )
        );
    }
    test_field_major_frame();
    fn test_field_num_sched_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_arinc653_schedule>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_sched_entries) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_arinc653_schedule),
                "::",
                stringify!(num_sched_entries)
            )
        );
    }
    test_field_num_sched_entries();
    fn test_field_sched_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_arinc653_schedule>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_entries) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_arinc653_schedule),
                "::",
                stringify!(sched_entries)
            )
        );
    }
    test_field_sched_entries();
}
pub type xen_sysctl_arinc653_schedule_t = xen_sysctl_arinc653_schedule;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_arinc653_schedule_t {
    pub p: *mut xen_sysctl_arinc653_schedule_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_arinc653_schedule_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_arinc653_schedule_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_xen_sysctl_arinc653_schedule_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_arinc653_schedule_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_xen_sysctl_arinc653_schedule_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_arinc653_schedule_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_arinc653_schedule_t {
    pub p: *mut xen_sysctl_arinc653_schedule_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_arinc653_schedule_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_arinc653_schedule_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_sysctl_arinc653_schedule_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_arinc653_schedule_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_sysctl_arinc653_schedule_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_arinc653_schedule_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_arinc653_schedule_t {
    pub p: *const xen_sysctl_arinc653_schedule_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_arinc653_schedule_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_arinc653_schedule_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_sysctl_arinc653_schedule_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_arinc653_schedule_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_sysctl_arinc653_schedule_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_arinc653_schedule_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_arinc653_schedule_t {
    pub p: *const xen_sysctl_arinc653_schedule_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_arinc653_schedule_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_arinc653_schedule_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_sysctl_arinc653_schedule_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_arinc653_schedule_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_sysctl_arinc653_schedule_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_arinc653_schedule_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_credit_schedule {
    pub tslice_ms: u32,
    pub ratelimit_us: u32,
    pub vcpu_migr_delay_us: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_credit_schedule() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_credit_schedule>(),
        12usize,
        concat!("Size of: ", stringify!(xen_sysctl_credit_schedule))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_credit_schedule>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_credit_schedule))
    );
    fn test_field_tslice_ms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_credit_schedule>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tslice_ms) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_credit_schedule),
                "::",
                stringify!(tslice_ms)
            )
        );
    }
    test_field_tslice_ms();
    fn test_field_ratelimit_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_credit_schedule>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ratelimit_us) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_credit_schedule),
                "::",
                stringify!(ratelimit_us)
            )
        );
    }
    test_field_ratelimit_us();
    fn test_field_vcpu_migr_delay_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_credit_schedule>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_migr_delay_us) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_credit_schedule),
                "::",
                stringify!(vcpu_migr_delay_us)
            )
        );
    }
    test_field_vcpu_migr_delay_us();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_credit2_schedule {
    pub ratelimit_us: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_credit2_schedule() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_credit2_schedule>(),
        4usize,
        concat!("Size of: ", stringify!(xen_sysctl_credit2_schedule))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_credit2_schedule>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_credit2_schedule))
    );
    fn test_field_ratelimit_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_credit2_schedule>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ratelimit_us) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_credit2_schedule),
                "::",
                stringify!(ratelimit_us)
            )
        );
    }
    test_field_ratelimit_us();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_scheduler_op {
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub cmd: u32,
    pub u: xen_sysctl_scheduler_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_scheduler_op__bindgen_ty_1 {
    pub sched_arinc653: xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653,
    pub sched_credit: xen_sysctl_credit_schedule,
    pub sched_credit2: xen_sysctl_credit2_schedule,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653 {
    pub schedule: __guest_handle_64_xen_sysctl_arinc653_schedule_t,
}
#[test]
fn bindgen_test_layout_xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653)
        )
    );
    fn test_field_schedule() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).schedule) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653),
                "::",
                stringify!(schedule)
            )
        );
    }
    test_field_schedule();
}
#[test]
fn bindgen_test_layout_xen_sysctl_scheduler_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_scheduler_op__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_scheduler_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1)
        )
    );
    fn test_field_sched_arinc653() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_scheduler_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_arinc653) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_scheduler_op__bindgen_ty_1),
                "::",
                stringify!(sched_arinc653)
            )
        );
    }
    test_field_sched_arinc653();
    fn test_field_sched_credit() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_scheduler_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_credit) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_scheduler_op__bindgen_ty_1),
                "::",
                stringify!(sched_credit)
            )
        );
    }
    test_field_sched_credit();
    fn test_field_sched_credit2() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_scheduler_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_credit2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_scheduler_op__bindgen_ty_1),
                "::",
                stringify!(sched_credit2)
            )
        );
    }
    test_field_sched_credit2();
}
#[test]
fn bindgen_test_layout_xen_sysctl_scheduler_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_scheduler_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_scheduler_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_scheduler_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_scheduler_op))
    );
    fn test_field_cpupool_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_scheduler_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpupool_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_scheduler_op),
                "::",
                stringify!(cpupool_id)
            )
        );
    }
    test_field_cpupool_id();
    fn test_field_sched_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_scheduler_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_scheduler_op),
                "::",
                stringify!(sched_id)
            )
        );
    }
    test_field_sched_id();
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_scheduler_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_scheduler_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_scheduler_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_scheduler_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_coverage_op {
    pub cmd: u32,
    pub size: u32,
    pub buffer: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_sysctl_coverage_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_coverage_op>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_coverage_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_coverage_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_coverage_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_coverage_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_coverage_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_coverage_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_coverage_op),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_coverage_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_coverage_op),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_psr_cmt_op {
    pub cmd: u32,
    pub flags: u32,
    pub u: xen_sysctl_psr_cmt_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_psr_cmt_op__bindgen_ty_1 {
    pub data: u64,
    pub l3_cache: xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1 {
    pub cpu: u32,
    pub rsvd: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(cpu)
            )
        );
    }
    test_field_cpu();
    fn test_field_rsvd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsvd) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(rsvd)
            )
        );
    }
    test_field_rsvd();
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_cmt_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1)
        )
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_psr_cmt_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_l3_cache() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_psr_cmt_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).l3_cache) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1),
                "::",
                stringify!(l3_cache)
            )
        );
    }
    test_field_l3_cache();
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_cmt_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_cmt_op>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_psr_cmt_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_cmt_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_psr_cmt_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_psr_cmt_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_cmt_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_psr_cmt_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_cmt_op),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_psr_cmt_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_cmt_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_pcitopoinfo {
    pub num_devs: u32,
    pub devs: __guest_handle_64_physdev_pci_device_t,
    pub nodes: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_pcitopoinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_pcitopoinfo>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_pcitopoinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_pcitopoinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_pcitopoinfo))
    );
    fn test_field_num_devs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pcitopoinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_devs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pcitopoinfo),
                "::",
                stringify!(num_devs)
            )
        );
    }
    test_field_num_devs();
    fn test_field_devs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pcitopoinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pcitopoinfo),
                "::",
                stringify!(devs)
            )
        );
    }
    test_field_devs();
    fn test_field_nodes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_pcitopoinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_pcitopoinfo),
                "::",
                stringify!(nodes)
            )
        );
    }
    test_field_nodes();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_psr_alloc {
    pub cmd: u32,
    pub target: u32,
    pub u: xen_sysctl_psr_alloc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_psr_alloc__bindgen_ty_1 {
    pub cat_info: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1,
    pub mba_info: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1 {
    pub cbm_len: u32,
    pub cos_max: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_cbm_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cbm_len) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(cbm_len)
            )
        );
    }
    test_field_cbm_len();
    fn test_field_cos_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cos_max) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(cos_max)
            )
        );
    }
    test_field_cos_max();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2 {
    pub thrtl_max: u32,
    pub cos_max: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_thrtl_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thrtl_max) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(thrtl_max)
            )
        );
    }
    test_field_thrtl_max();
    fn test_field_cos_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cos_max) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(cos_max)
            )
        );
    }
    test_field_cos_max();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_alloc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_alloc__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(xen_sysctl_psr_alloc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_alloc__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1)
        )
    );
    fn test_field_cat_info() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_psr_alloc__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cat_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc__bindgen_ty_1),
                "::",
                stringify!(cat_info)
            )
        );
    }
    test_field_cat_info();
    fn test_field_mba_info() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_psr_alloc__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mba_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc__bindgen_ty_1),
                "::",
                stringify!(mba_info)
            )
        );
    }
    test_field_mba_info();
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_alloc() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_alloc>(),
        20usize,
        concat!("Size of: ", stringify!(xen_sysctl_psr_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_alloc>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_psr_alloc))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_psr_alloc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_target() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_psr_alloc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc),
                "::",
                stringify!(target)
            )
        );
    }
    test_field_target();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_psr_alloc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_psr_alloc),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_levelling_caps {
    pub caps: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpu_levelling_caps() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpu_levelling_caps>(),
        4usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpu_levelling_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpu_levelling_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpu_levelling_caps))
    );
    fn test_field_caps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpu_levelling_caps>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).caps) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpu_levelling_caps),
                "::",
                stringify!(caps)
            )
        );
    }
    test_field_caps();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_cpu_featureset {
    pub index: u32,
    pub nr_features: u32,
    pub features: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpu_featureset() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpu_featureset>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpu_featureset))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpu_featureset>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpu_featureset))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpu_featureset>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpu_featureset),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_nr_features() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpu_featureset>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_features) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpu_featureset),
                "::",
                stringify!(nr_features)
            )
        );
    }
    test_field_nr_features();
    fn test_field_features() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_cpu_featureset>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_cpu_featureset),
                "::",
                stringify!(features)
            )
        );
    }
    test_field_features();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_livepatch_name {
    pub name: __guest_handle_64_char,
    pub size: u16,
    pub pad: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_xen_livepatch_name() {
    assert_eq!(
        ::std::mem::size_of::<xen_livepatch_name>(),
        16usize,
        concat!("Size of: ", stringify!(xen_livepatch_name))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_livepatch_name>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_livepatch_name))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_livepatch_name>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_livepatch_name),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_livepatch_name>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_livepatch_name),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_livepatch_name>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_livepatch_name),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_upload {
    pub name: xen_livepatch_name,
    pub size: u64,
    pub payload: __guest_handle_64_uint8,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_upload() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_upload>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_upload))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_upload>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_upload))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_upload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_upload),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_upload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_upload),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_payload() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_upload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_upload),
                "::",
                stringify!(payload)
            )
        );
    }
    test_field_payload();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_livepatch_status {
    pub state: u32,
    pub rc: i32,
}
#[test]
fn bindgen_test_layout_xen_livepatch_status() {
    assert_eq!(
        ::std::mem::size_of::<xen_livepatch_status>(),
        8usize,
        concat!("Size of: ", stringify!(xen_livepatch_status))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_livepatch_status>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_livepatch_status))
    );
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_livepatch_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_livepatch_status),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_rc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_livepatch_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rc) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_livepatch_status),
                "::",
                stringify!(rc)
            )
        );
    }
    test_field_rc();
}
pub type xen_livepatch_status_t = xen_livepatch_status;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_livepatch_status_t {
    pub p: *mut xen_livepatch_status_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_livepatch_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_livepatch_status_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_livepatch_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_livepatch_status_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_livepatch_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_livepatch_status_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_livepatch_status_t {
    pub p: *mut xen_livepatch_status_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_livepatch_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_livepatch_status_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_livepatch_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_livepatch_status_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_livepatch_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_livepatch_status_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_livepatch_status_t {
    pub p: *const xen_livepatch_status_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_livepatch_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_livepatch_status_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_livepatch_status_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_livepatch_status_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_livepatch_status_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_livepatch_status_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_livepatch_status_t {
    pub p: *const xen_livepatch_status_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_livepatch_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_livepatch_status_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_livepatch_status_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_livepatch_status_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_livepatch_status_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_livepatch_status_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_get {
    pub name: xen_livepatch_name,
    pub status: xen_livepatch_status,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_get() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_get>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_get))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_get>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_get))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_get>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_get),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_get>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_get),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_list {
    pub version: u32,
    pub idx: u32,
    pub nr: u32,
    pub pad: u32,
    pub name_total_size: u32,
    pub metadata_total_size: u32,
    pub status: __guest_handle_64_xen_livepatch_status_t,
    pub name: __guest_handle_64_char,
    pub len: __guest_handle_64_uint32,
    pub metadata: __guest_handle_64_char,
    pub metadata_len: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_list() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_list>(),
        64usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_list))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_list>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_list))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_name_total_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_total_size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(name_total_size)
            )
        );
    }
    test_field_name_total_size();
    fn test_field_metadata_total_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).metadata_total_size) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(metadata_total_size)
            )
        );
    }
    test_field_metadata_total_size();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_metadata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(metadata)
            )
        );
    }
    test_field_metadata();
    fn test_field_metadata_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).metadata_len) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_list),
                "::",
                stringify!(metadata_len)
            )
        );
    }
    test_field_metadata_len();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_action {
    pub name: xen_livepatch_name,
    pub cmd: u32,
    pub timeout: u32,
    pub flags: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_action() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_action>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_action))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_action>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_action))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_action>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_action),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_action>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_action),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_timeout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_action>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_action),
                "::",
                stringify!(timeout)
            )
        );
    }
    test_field_timeout();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_action>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_action),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_action>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_action),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_op {
    pub cmd: u32,
    pub pad: u32,
    pub u: xen_sysctl_livepatch_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_livepatch_op__bindgen_ty_1 {
    pub upload: xen_sysctl_livepatch_upload,
    pub list: xen_sysctl_livepatch_list,
    pub get: xen_sysctl_livepatch_get,
    pub action: xen_sysctl_livepatch_action,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_op__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_livepatch_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_livepatch_op__bindgen_ty_1)
        )
    );
    fn test_field_upload() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_livepatch_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).upload) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_op__bindgen_ty_1),
                "::",
                stringify!(upload)
            )
        );
    }
    test_field_upload();
    fn test_field_list() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_livepatch_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_op__bindgen_ty_1),
                "::",
                stringify!(list)
            )
        );
    }
    test_field_list();
    fn test_field_get() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_livepatch_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_op__bindgen_ty_1),
                "::",
                stringify!(get)
            )
        );
    }
    test_field_get();
    fn test_field_action() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_sysctl_livepatch_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_op__bindgen_ty_1),
                "::",
                stringify!(action)
            )
        );
    }
    test_field_action();
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_op>(),
        72usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_op),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl_livepatch_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl_livepatch_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_sysctl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl__bindgen_ty_1 {
    pub readconsole: xen_sysctl_readconsole,
    pub tbuf_op: xen_sysctl_tbuf_op,
    pub physinfo: xen_sysctl_physinfo,
    pub cputopoinfo: xen_sysctl_cputopoinfo,
    pub pcitopoinfo: xen_sysctl_pcitopoinfo,
    pub numainfo: xen_sysctl_numainfo,
    pub sched_id: xen_sysctl_sched_id,
    pub perfc_op: xen_sysctl_perfc_op,
    pub getdomaininfolist: xen_sysctl_getdomaininfolist,
    pub debug_keys: xen_sysctl_debug_keys,
    pub getcpuinfo: xen_sysctl_getcpuinfo,
    pub availheap: xen_sysctl_availheap,
    pub get_pmstat: xen_sysctl_get_pmstat,
    pub cpu_hotplug: xen_sysctl_cpu_hotplug,
    pub pm_op: xen_sysctl_pm_op,
    pub page_offline: xen_sysctl_page_offline_op,
    pub lockprof_op: xen_sysctl_lockprof_op,
    pub cpupool_op: xen_sysctl_cpupool_op,
    pub scheduler_op: xen_sysctl_scheduler_op,
    pub coverage_op: xen_sysctl_coverage_op,
    pub psr_cmt_op: xen_sysctl_psr_cmt_op,
    pub psr_alloc: xen_sysctl_psr_alloc,
    pub cpu_levelling_caps: xen_sysctl_cpu_levelling_caps,
    pub cpu_featureset: xen_sysctl_cpu_featureset,
    pub livepatch: xen_sysctl_livepatch_op,
    pub pad: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_xen_sysctl__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(xen_sysctl__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl__bindgen_ty_1))
    );
    fn test_field_readconsole() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).readconsole) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(readconsole)
            )
        );
    }
    test_field_readconsole();
    fn test_field_tbuf_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tbuf_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(tbuf_op)
            )
        );
    }
    test_field_tbuf_op();
    fn test_field_physinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).physinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(physinfo)
            )
        );
    }
    test_field_physinfo();
    fn test_field_cputopoinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cputopoinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(cputopoinfo)
            )
        );
    }
    test_field_cputopoinfo();
    fn test_field_pcitopoinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pcitopoinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(pcitopoinfo)
            )
        );
    }
    test_field_pcitopoinfo();
    fn test_field_numainfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numainfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(numainfo)
            )
        );
    }
    test_field_numainfo();
    fn test_field_sched_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(sched_id)
            )
        );
    }
    test_field_sched_id();
    fn test_field_perfc_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).perfc_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(perfc_op)
            )
        );
    }
    test_field_perfc_op();
    fn test_field_getdomaininfolist() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getdomaininfolist) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(getdomaininfolist)
            )
        );
    }
    test_field_getdomaininfolist();
    fn test_field_debug_keys() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).debug_keys) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(debug_keys)
            )
        );
    }
    test_field_debug_keys();
    fn test_field_getcpuinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getcpuinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(getcpuinfo)
            )
        );
    }
    test_field_getcpuinfo();
    fn test_field_availheap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).availheap) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(availheap)
            )
        );
    }
    test_field_availheap();
    fn test_field_get_pmstat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_pmstat) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(get_pmstat)
            )
        );
    }
    test_field_get_pmstat();
    fn test_field_cpu_hotplug() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_hotplug) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(cpu_hotplug)
            )
        );
    }
    test_field_cpu_hotplug();
    fn test_field_pm_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pm_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(pm_op)
            )
        );
    }
    test_field_pm_op();
    fn test_field_page_offline() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).page_offline) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(page_offline)
            )
        );
    }
    test_field_page_offline();
    fn test_field_lockprof_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lockprof_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(lockprof_op)
            )
        );
    }
    test_field_lockprof_op();
    fn test_field_cpupool_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpupool_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(cpupool_op)
            )
        );
    }
    test_field_cpupool_op();
    fn test_field_scheduler_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scheduler_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(scheduler_op)
            )
        );
    }
    test_field_scheduler_op();
    fn test_field_coverage_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).coverage_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(coverage_op)
            )
        );
    }
    test_field_coverage_op();
    fn test_field_psr_cmt_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).psr_cmt_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(psr_cmt_op)
            )
        );
    }
    test_field_psr_cmt_op();
    fn test_field_psr_alloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).psr_alloc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(psr_alloc)
            )
        );
    }
    test_field_psr_alloc();
    fn test_field_cpu_levelling_caps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_levelling_caps) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(cpu_levelling_caps)
            )
        );
    }
    test_field_cpu_levelling_caps();
    fn test_field_cpu_featureset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_featureset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(cpu_featureset)
            )
        );
    }
    test_field_cpu_featureset();
    fn test_field_livepatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).livepatch) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(livepatch)
            )
        );
    }
    test_field_livepatch();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl__bindgen_ty_1),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[test]
fn bindgen_test_layout_xen_sysctl() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl>(),
        136usize,
        concat!("Size of: ", stringify!(xen_sysctl))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_interface_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interface_version) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl),
                "::",
                stringify!(interface_version)
            )
        );
    }
    test_field_interface_version();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_sysctl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_sysctl),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type xen_sysctl_t = xen_sysctl;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_t {
    pub p: *mut xen_sysctl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_sysctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_sysctl_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_sysctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_sysctl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_t {
    pub p: *mut xen_sysctl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_sysctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_xen_sysctl_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_sysctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_sysctl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_t {
    pub p: *const xen_sysctl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_sysctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_xen_sysctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_sysctl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_t {
    pub p: *const xen_sysctl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_sysctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_sysctl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_sysctl_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
pub type xen_extraversion_t = [::std::os::raw::c_char; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_compile_info {
    pub compiler: [::std::os::raw::c_char; 64usize],
    pub compile_by: [::std::os::raw::c_char; 16usize],
    pub compile_domain: [::std::os::raw::c_char; 32usize],
    pub compile_date: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_xen_compile_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_compile_info>(),
        144usize,
        concat!("Size of: ", stringify!(xen_compile_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_compile_info>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_compile_info))
    );
    fn test_field_compiler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_compile_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).compiler) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_compile_info),
                "::",
                stringify!(compiler)
            )
        );
    }
    test_field_compiler();
    fn test_field_compile_by() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_compile_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).compile_by) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_compile_info),
                "::",
                stringify!(compile_by)
            )
        );
    }
    test_field_compile_by();
    fn test_field_compile_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_compile_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).compile_domain) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_compile_info),
                "::",
                stringify!(compile_domain)
            )
        );
    }
    test_field_compile_domain();
    fn test_field_compile_date() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_compile_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).compile_date) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_compile_info),
                "::",
                stringify!(compile_date)
            )
        );
    }
    test_field_compile_date();
}
pub type xen_compile_info_t = xen_compile_info;
pub type xen_capabilities_info_t = [::std::os::raw::c_char; 1024usize];
pub type xen_changeset_info_t = [::std::os::raw::c_char; 64usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_platform_parameters {
    pub virt_start: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_platform_parameters() {
    assert_eq!(
        ::std::mem::size_of::<xen_platform_parameters>(),
        8usize,
        concat!("Size of: ", stringify!(xen_platform_parameters))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_platform_parameters>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_platform_parameters))
    );
    fn test_field_virt_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_parameters>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).virt_start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_parameters),
                "::",
                stringify!(virt_start)
            )
        );
    }
    test_field_virt_start();
}
pub type xen_platform_parameters_t = xen_platform_parameters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_feature_info {
    pub submap_idx: ::std::os::raw::c_uint,
    pub submap: u32,
}
#[test]
fn bindgen_test_layout_xen_feature_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_feature_info>(),
        8usize,
        concat!("Size of: ", stringify!(xen_feature_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_feature_info>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_feature_info))
    );
    fn test_field_submap_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_feature_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).submap_idx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_feature_info),
                "::",
                stringify!(submap_idx)
            )
        );
    }
    test_field_submap_idx();
    fn test_field_submap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_feature_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).submap) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_feature_info),
                "::",
                stringify!(submap)
            )
        );
    }
    test_field_submap();
}
pub type xen_feature_info_t = xen_feature_info;
pub type xen_commandline_t = [::std::os::raw::c_char; 1024usize];
#[repr(C)]
#[derive(Debug)]
pub struct xen_build_id {
    pub len: u32,
    pub buf: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_xen_build_id() {
    assert_eq!(
        ::std::mem::size_of::<xen_build_id>(),
        4usize,
        concat!("Size of: ", stringify!(xen_build_id))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_build_id>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_build_id))
    );
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_build_id>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_build_id),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_build_id>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_build_id),
                "::",
                stringify!(buf)
            )
        );
    }
    test_field_buf();
}
pub type xen_build_id_t = xen_build_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_shutdown {
    pub reason: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sched_shutdown() {
    assert_eq!(
        ::std::mem::size_of::<sched_shutdown>(),
        4usize,
        concat!("Size of: ", stringify!(sched_shutdown))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_shutdown>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_shutdown))
    );
    fn test_field_reason() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sched_shutdown>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reason) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_shutdown),
                "::",
                stringify!(reason)
            )
        );
    }
    test_field_reason();
}
pub type sched_shutdown_t = sched_shutdown;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_shutdown_t {
    pub p: *mut sched_shutdown_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_shutdown_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_sched_shutdown_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_shutdown_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_sched_shutdown_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_sched_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_shutdown_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_sched_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_shutdown_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_shutdown_t {
    pub p: *mut sched_shutdown_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_shutdown_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_sched_shutdown_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_sched_shutdown_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_sched_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_shutdown_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_sched_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_shutdown_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_shutdown_t {
    pub p: *const sched_shutdown_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_sched_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_shutdown_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_sched_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_shutdown_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_sched_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_shutdown_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_shutdown_t {
    pub p: *const sched_shutdown_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_shutdown_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_sched_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_shutdown_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_sched_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_shutdown_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_poll {
    pub ports: __guest_handle_64_evtchn_port_t,
    pub nr_ports: ::std::os::raw::c_uint,
    pub timeout: u64,
}
#[test]
fn bindgen_test_layout_sched_poll() {
    assert_eq!(
        ::std::mem::size_of::<sched_poll>(),
        24usize,
        concat!("Size of: ", stringify!(sched_poll))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_poll>(),
        8usize,
        concat!("Alignment of ", stringify!(sched_poll))
    );
    fn test_field_ports() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sched_poll>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ports) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_poll),
                "::",
                stringify!(ports)
            )
        );
    }
    test_field_ports();
    fn test_field_nr_ports() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sched_poll>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_ports) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_poll),
                "::",
                stringify!(nr_ports)
            )
        );
    }
    test_field_nr_ports();
    fn test_field_timeout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sched_poll>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_poll),
                "::",
                stringify!(timeout)
            )
        );
    }
    test_field_timeout();
}
pub type sched_poll_t = sched_poll;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_poll_t {
    pub p: *mut sched_poll_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_poll_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_poll_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_sched_poll_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_poll_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_sched_poll_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_sched_poll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_poll_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_sched_poll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_poll_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_poll_t {
    pub p: *mut sched_poll_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_poll_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_poll_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_sched_poll_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_poll_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_sched_poll_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_sched_poll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_poll_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_sched_poll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_poll_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_poll_t {
    pub p: *const sched_poll_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_poll_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_poll_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_sched_poll_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_poll_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_poll_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_sched_poll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_poll_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_const_sched_poll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_poll_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_poll_t {
    pub p: *const sched_poll_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_poll_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_poll_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_poll_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_poll_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_poll_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_sched_poll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_poll_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_sched_poll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_poll_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_remote_shutdown {
    pub domain_id: domid_t,
    pub reason: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sched_remote_shutdown() {
    assert_eq!(
        ::std::mem::size_of::<sched_remote_shutdown>(),
        8usize,
        concat!("Size of: ", stringify!(sched_remote_shutdown))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_remote_shutdown>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_remote_shutdown))
    );
    fn test_field_domain_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sched_remote_shutdown>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_remote_shutdown),
                "::",
                stringify!(domain_id)
            )
        );
    }
    test_field_domain_id();
    fn test_field_reason() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sched_remote_shutdown>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reason) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_remote_shutdown),
                "::",
                stringify!(reason)
            )
        );
    }
    test_field_reason();
}
pub type sched_remote_shutdown_t = sched_remote_shutdown;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_remote_shutdown_t {
    pub p: *mut sched_remote_shutdown_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_remote_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_sched_remote_shutdown_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_sched_remote_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_remote_shutdown_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_sched_remote_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_remote_shutdown_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_remote_shutdown_t {
    pub p: *mut sched_remote_shutdown_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_remote_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_sched_remote_shutdown_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_sched_remote_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_remote_shutdown_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_sched_remote_shutdown_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_remote_shutdown_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_remote_shutdown_t {
    pub p: *const sched_remote_shutdown_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_remote_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_remote_shutdown_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_sched_remote_shutdown_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_remote_shutdown_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_sched_remote_shutdown_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_remote_shutdown_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_remote_shutdown_t {
    pub p: *const sched_remote_shutdown_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_remote_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_remote_shutdown_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_sched_remote_shutdown_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_remote_shutdown_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_sched_remote_shutdown_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_remote_shutdown_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_watchdog {
    pub id: u32,
    pub timeout: u32,
}
#[test]
fn bindgen_test_layout_sched_watchdog() {
    assert_eq!(
        ::std::mem::size_of::<sched_watchdog>(),
        8usize,
        concat!("Size of: ", stringify!(sched_watchdog))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_watchdog>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_watchdog))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sched_watchdog>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_watchdog),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_timeout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sched_watchdog>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_watchdog),
                "::",
                stringify!(timeout)
            )
        );
    }
    test_field_timeout();
}
pub type sched_watchdog_t = sched_watchdog;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_watchdog_t {
    pub p: *mut sched_watchdog_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_watchdog_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_watchdog_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_sched_watchdog_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_watchdog_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_sched_watchdog_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_sched_watchdog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_watchdog_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_sched_watchdog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_watchdog_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_watchdog_t {
    pub p: *mut sched_watchdog_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_watchdog_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_watchdog_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_sched_watchdog_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_watchdog_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_sched_watchdog_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_sched_watchdog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_watchdog_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_sched_watchdog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_watchdog_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_watchdog_t {
    pub p: *const sched_watchdog_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_watchdog_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_watchdog_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_sched_watchdog_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_watchdog_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_watchdog_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_sched_watchdog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_watchdog_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_sched_watchdog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_watchdog_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_watchdog_t {
    pub p: *const sched_watchdog_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_watchdog_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_watchdog_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_watchdog_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_watchdog_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_watchdog_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_sched_watchdog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_watchdog_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_sched_watchdog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_watchdog_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_pin_override {
    pub pcpu: i32,
}
#[test]
fn bindgen_test_layout_sched_pin_override() {
    assert_eq!(
        ::std::mem::size_of::<sched_pin_override>(),
        4usize,
        concat!("Size of: ", stringify!(sched_pin_override))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_pin_override>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_pin_override))
    );
    fn test_field_pcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sched_pin_override>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pcpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sched_pin_override),
                "::",
                stringify!(pcpu)
            )
        );
    }
    test_field_pcpu();
}
pub type sched_pin_override_t = sched_pin_override;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_pin_override_t {
    pub p: *mut sched_pin_override_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_pin_override_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_pin_override_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_sched_pin_override_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_pin_override_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_sched_pin_override_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_sched_pin_override_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_pin_override_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_sched_pin_override_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_sched_pin_override_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_pin_override_t {
    pub p: *mut sched_pin_override_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_pin_override_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_pin_override_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_sched_pin_override_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_pin_override_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_sched_pin_override_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_sched_pin_override_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_pin_override_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_sched_pin_override_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_sched_pin_override_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_pin_override_t {
    pub p: *const sched_pin_override_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_pin_override_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_pin_override_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_sched_pin_override_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_pin_override_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_pin_override_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_sched_pin_override_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_pin_override_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_sched_pin_override_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_sched_pin_override_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_pin_override_t {
    pub p: *const sched_pin_override_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_pin_override_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_pin_override_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_pin_override_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_pin_override_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_pin_override_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_sched_pin_override_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_pin_override_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_sched_pin_override_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_sched_pin_override_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
pub type ioservid_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_create_ioreq_server {
    pub handle_bufioreq: u8,
    pub pad: [u8; 3usize],
    pub id: ioservid_t,
}
#[test]
fn bindgen_test_layout_xen_dm_op_create_ioreq_server() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_create_ioreq_server>(),
        6usize,
        concat!("Size of: ", stringify!(xen_dm_op_create_ioreq_server))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_create_ioreq_server>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_dm_op_create_ioreq_server))
    );
    fn test_field_handle_bufioreq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_create_ioreq_server>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle_bufioreq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_create_ioreq_server),
                "::",
                stringify!(handle_bufioreq)
            )
        );
    }
    test_field_handle_bufioreq();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_create_ioreq_server>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_create_ioreq_server),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_create_ioreq_server>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_create_ioreq_server),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
}
pub type xen_dm_op_create_ioreq_server_t = xen_dm_op_create_ioreq_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_get_ioreq_server_info {
    pub id: ioservid_t,
    pub flags: u16,
    pub bufioreq_port: evtchn_port_t,
    pub ioreq_gfn: u64,
    pub bufioreq_gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_get_ioreq_server_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_get_ioreq_server_info>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_get_ioreq_server_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_get_ioreq_server_info>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_get_ioreq_server_info))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_get_ioreq_server_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_get_ioreq_server_info),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_get_ioreq_server_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_get_ioreq_server_info),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_bufioreq_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_get_ioreq_server_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufioreq_port) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_get_ioreq_server_info),
                "::",
                stringify!(bufioreq_port)
            )
        );
    }
    test_field_bufioreq_port();
    fn test_field_ioreq_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_get_ioreq_server_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ioreq_gfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_get_ioreq_server_info),
                "::",
                stringify!(ioreq_gfn)
            )
        );
    }
    test_field_ioreq_gfn();
    fn test_field_bufioreq_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_get_ioreq_server_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufioreq_gfn) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_get_ioreq_server_info),
                "::",
                stringify!(bufioreq_gfn)
            )
        );
    }
    test_field_bufioreq_gfn();
}
pub type xen_dm_op_get_ioreq_server_info_t = xen_dm_op_get_ioreq_server_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_ioreq_server_range {
    pub id: ioservid_t,
    pub pad: u16,
    pub type_: u32,
    pub start: u64,
    pub end: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_ioreq_server_range() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_ioreq_server_range>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_ioreq_server_range))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_ioreq_server_range>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_ioreq_server_range))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_ioreq_server_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_ioreq_server_range),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_ioreq_server_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_ioreq_server_range),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_ioreq_server_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_ioreq_server_range),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_ioreq_server_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_ioreq_server_range),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
    fn test_field_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_ioreq_server_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_ioreq_server_range),
                "::",
                stringify!(end)
            )
        );
    }
    test_field_end();
}
pub type xen_dm_op_ioreq_server_range_t = xen_dm_op_ioreq_server_range;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_ioreq_server_state {
    pub id: ioservid_t,
    pub enabled: u8,
    pub pad: u8,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_ioreq_server_state() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_ioreq_server_state>(),
        4usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_ioreq_server_state))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_ioreq_server_state>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(xen_dm_op_set_ioreq_server_state)
        )
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_ioreq_server_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_ioreq_server_state),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_enabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_ioreq_server_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_ioreq_server_state),
                "::",
                stringify!(enabled)
            )
        );
    }
    test_field_enabled();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_ioreq_server_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_ioreq_server_state),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
pub type xen_dm_op_set_ioreq_server_state_t = xen_dm_op_set_ioreq_server_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_destroy_ioreq_server {
    pub id: ioservid_t,
    pub pad: u16,
}
#[test]
fn bindgen_test_layout_xen_dm_op_destroy_ioreq_server() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_destroy_ioreq_server>(),
        4usize,
        concat!("Size of: ", stringify!(xen_dm_op_destroy_ioreq_server))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_destroy_ioreq_server>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_dm_op_destroy_ioreq_server))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_destroy_ioreq_server>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_destroy_ioreq_server),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_destroy_ioreq_server>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_destroy_ioreq_server),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
pub type xen_dm_op_destroy_ioreq_server_t = xen_dm_op_destroy_ioreq_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_track_dirty_vram {
    pub nr: u32,
    pub pad: u32,
    pub first_pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_track_dirty_vram() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_track_dirty_vram>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_track_dirty_vram))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_track_dirty_vram>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_track_dirty_vram))
    );
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_track_dirty_vram>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_track_dirty_vram),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_track_dirty_vram>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_track_dirty_vram),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_first_pfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_track_dirty_vram>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_pfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_track_dirty_vram),
                "::",
                stringify!(first_pfn)
            )
        );
    }
    test_field_first_pfn();
}
pub type xen_dm_op_track_dirty_vram_t = xen_dm_op_track_dirty_vram;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_pci_intx_level {
    pub domain: u16,
    pub bus: u8,
    pub device: u8,
    pub intx: u8,
    pub level: u8,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_pci_intx_level() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_pci_intx_level>(),
        6usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_pci_intx_level))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_pci_intx_level>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_pci_intx_level))
    );
    fn test_field_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_pci_intx_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_pci_intx_level),
                "::",
                stringify!(domain)
            )
        );
    }
    test_field_domain();
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_pci_intx_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_pci_intx_level),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_device() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_pci_intx_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_pci_intx_level),
                "::",
                stringify!(device)
            )
        );
    }
    test_field_device();
    fn test_field_intx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_pci_intx_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_pci_intx_level),
                "::",
                stringify!(intx)
            )
        );
    }
    test_field_intx();
    fn test_field_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_pci_intx_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_pci_intx_level),
                "::",
                stringify!(level)
            )
        );
    }
    test_field_level();
}
pub type xen_dm_op_set_pci_intx_level_t = xen_dm_op_set_pci_intx_level;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_isa_irq_level {
    pub isa_irq: u8,
    pub level: u8,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_isa_irq_level() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_isa_irq_level>(),
        2usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_isa_irq_level))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_isa_irq_level>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_isa_irq_level))
    );
    fn test_field_isa_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_isa_irq_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isa_irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_isa_irq_level),
                "::",
                stringify!(isa_irq)
            )
        );
    }
    test_field_isa_irq();
    fn test_field_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_isa_irq_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_isa_irq_level),
                "::",
                stringify!(level)
            )
        );
    }
    test_field_level();
}
pub type xen_dm_op_set_isa_irq_level_t = xen_dm_op_set_isa_irq_level;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_pci_link_route {
    pub link: u8,
    pub isa_irq: u8,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_pci_link_route() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_pci_link_route>(),
        2usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_pci_link_route))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_pci_link_route>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_pci_link_route))
    );
    fn test_field_link() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_pci_link_route>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).link) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_pci_link_route),
                "::",
                stringify!(link)
            )
        );
    }
    test_field_link();
    fn test_field_isa_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_pci_link_route>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isa_irq) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_pci_link_route),
                "::",
                stringify!(isa_irq)
            )
        );
    }
    test_field_isa_irq();
}
pub type xen_dm_op_set_pci_link_route_t = xen_dm_op_set_pci_link_route;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_modified_memory {
    pub nr_extents: u32,
    pub opaque: u32,
}
#[test]
fn bindgen_test_layout_xen_dm_op_modified_memory() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_modified_memory>(),
        8usize,
        concat!("Size of: ", stringify!(xen_dm_op_modified_memory))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_modified_memory>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_dm_op_modified_memory))
    );
    fn test_field_nr_extents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_modified_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_extents) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_modified_memory),
                "::",
                stringify!(nr_extents)
            )
        );
    }
    test_field_nr_extents();
    fn test_field_opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_modified_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_modified_memory),
                "::",
                stringify!(opaque)
            )
        );
    }
    test_field_opaque();
}
pub type xen_dm_op_modified_memory_t = xen_dm_op_modified_memory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_modified_memory_extent {
    pub nr: u32,
    pub pad: u32,
    pub first_pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_modified_memory_extent() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_modified_memory_extent>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_modified_memory_extent))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_modified_memory_extent>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_dm_op_modified_memory_extent)
        )
    );
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_modified_memory_extent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_modified_memory_extent),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_modified_memory_extent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_modified_memory_extent),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_first_pfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_modified_memory_extent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_pfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_modified_memory_extent),
                "::",
                stringify!(first_pfn)
            )
        );
    }
    test_field_first_pfn();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_mem_type {
    pub nr: u32,
    pub mem_type: u16,
    pub pad: u16,
    pub first_pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_mem_type() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_mem_type>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_mem_type))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_mem_type>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_mem_type))
    );
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_mem_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_mem_type),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_mem_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_mem_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_type) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_mem_type),
                "::",
                stringify!(mem_type)
            )
        );
    }
    test_field_mem_type();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_mem_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_mem_type),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_first_pfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_mem_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_pfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_mem_type),
                "::",
                stringify!(first_pfn)
            )
        );
    }
    test_field_first_pfn();
}
pub type xen_dm_op_set_mem_type_t = xen_dm_op_set_mem_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_inject_event {
    pub vcpuid: u32,
    pub vector: u8,
    pub type_: u8,
    pub insn_len: u8,
    pub pad0: u8,
    pub error_code: u32,
    pub pad1: u32,
    pub cr2: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_inject_event() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_inject_event>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_inject_event))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_inject_event>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_inject_event))
    );
    fn test_field_vcpuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_event),
                "::",
                stringify!(vcpuid)
            )
        );
    }
    test_field_vcpuid();
    fn test_field_vector() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_event),
                "::",
                stringify!(vector)
            )
        );
    }
    test_field_vector();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_event),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_insn_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).insn_len) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_event),
                "::",
                stringify!(insn_len)
            )
        );
    }
    test_field_insn_len();
    fn test_field_pad0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad0) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_event),
                "::",
                stringify!(pad0)
            )
        );
    }
    test_field_pad0();
    fn test_field_error_code() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).error_code) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_event),
                "::",
                stringify!(error_code)
            )
        );
    }
    test_field_error_code();
    fn test_field_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_event),
                "::",
                stringify!(pad1)
            )
        );
    }
    test_field_pad1();
    fn test_field_cr2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_event>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cr2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_event),
                "::",
                stringify!(cr2)
            )
        );
    }
    test_field_cr2();
}
pub type xen_dm_op_inject_event_t = xen_dm_op_inject_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_inject_msi {
    pub data: u32,
    pub pad: u32,
    pub addr: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_inject_msi() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_inject_msi>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_inject_msi))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_inject_msi>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_inject_msi))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_msi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_msi),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_msi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_msi),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_inject_msi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_inject_msi),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
}
pub type xen_dm_op_inject_msi_t = xen_dm_op_inject_msi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_map_mem_type_to_ioreq_server {
    pub id: ioservid_t,
    pub type_: u16,
    pub flags: u32,
    pub opaque: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_map_mem_type_to_ioreq_server() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_map_mem_type_to_ioreq_server>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_dm_op_map_mem_type_to_ioreq_server)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_map_mem_type_to_ioreq_server>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_dm_op_map_mem_type_to_ioreq_server)
        )
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_dm_op_map_mem_type_to_ioreq_server>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_map_mem_type_to_ioreq_server),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_dm_op_map_mem_type_to_ioreq_server>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_map_mem_type_to_ioreq_server),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_dm_op_map_mem_type_to_ioreq_server>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_map_mem_type_to_ioreq_server),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_opaque() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_dm_op_map_mem_type_to_ioreq_server>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_map_mem_type_to_ioreq_server),
                "::",
                stringify!(opaque)
            )
        );
    }
    test_field_opaque();
}
pub type xen_dm_op_map_mem_type_to_ioreq_server_t = xen_dm_op_map_mem_type_to_ioreq_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_remote_shutdown {
    pub reason: u32,
}
#[test]
fn bindgen_test_layout_xen_dm_op_remote_shutdown() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_remote_shutdown>(),
        4usize,
        concat!("Size of: ", stringify!(xen_dm_op_remote_shutdown))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_remote_shutdown>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_dm_op_remote_shutdown))
    );
    fn test_field_reason() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_remote_shutdown>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reason) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_remote_shutdown),
                "::",
                stringify!(reason)
            )
        );
    }
    test_field_reason();
}
pub type xen_dm_op_remote_shutdown_t = xen_dm_op_remote_shutdown;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_relocate_memory {
    pub size: u32,
    pub pad: u32,
    pub src_gfn: u64,
    pub dst_gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_relocate_memory() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_relocate_memory>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_relocate_memory))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_relocate_memory>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_relocate_memory))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_relocate_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_relocate_memory),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_relocate_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_relocate_memory),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_src_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_relocate_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).src_gfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_relocate_memory),
                "::",
                stringify!(src_gfn)
            )
        );
    }
    test_field_src_gfn();
    fn test_field_dst_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_relocate_memory>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dst_gfn) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_relocate_memory),
                "::",
                stringify!(dst_gfn)
            )
        );
    }
    test_field_dst_gfn();
}
pub type xen_dm_op_relocate_memory_t = xen_dm_op_relocate_memory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_pin_memory_cacheattr {
    pub start: u64,
    pub end: u64,
    pub type_: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_xen_dm_op_pin_memory_cacheattr() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_pin_memory_cacheattr>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_pin_memory_cacheattr))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_pin_memory_cacheattr>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_pin_memory_cacheattr))
    );
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_pin_memory_cacheattr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_pin_memory_cacheattr),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
    fn test_field_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_pin_memory_cacheattr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_pin_memory_cacheattr),
                "::",
                stringify!(end)
            )
        );
    }
    test_field_end();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_pin_memory_cacheattr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_pin_memory_cacheattr),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_pin_memory_cacheattr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_pin_memory_cacheattr),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
pub type xen_dm_op_pin_memory_cacheattr_t = xen_dm_op_pin_memory_cacheattr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_irq_level {
    pub irq: u32,
    pub level: u8,
    pub pad: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_irq_level() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_irq_level>(),
        8usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_irq_level))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_irq_level>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_irq_level))
    );
    fn test_field_irq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_irq_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).irq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_irq_level),
                "::",
                stringify!(irq)
            )
        );
    }
    test_field_irq();
    fn test_field_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_irq_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_irq_level),
                "::",
                stringify!(level)
            )
        );
    }
    test_field_level();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_set_irq_level>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_set_irq_level),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
pub type xen_dm_op_set_irq_level_t = xen_dm_op_set_irq_level;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_nr_vcpus {
    pub vcpus: u32,
}
#[test]
fn bindgen_test_layout_xen_dm_op_nr_vcpus() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_nr_vcpus>(),
        4usize,
        concat!("Size of: ", stringify!(xen_dm_op_nr_vcpus))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_nr_vcpus>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_dm_op_nr_vcpus))
    );
    fn test_field_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_nr_vcpus>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_nr_vcpus),
                "::",
                stringify!(vcpus)
            )
        );
    }
    test_field_vcpus();
}
pub type xen_dm_op_nr_vcpus_t = xen_dm_op_nr_vcpus;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_dm_op {
    pub op: u32,
    pub pad: u32,
    pub u: xen_dm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_dm_op__bindgen_ty_1 {
    pub create_ioreq_server: xen_dm_op_create_ioreq_server_t,
    pub get_ioreq_server_info: xen_dm_op_get_ioreq_server_info_t,
    pub map_io_range_to_ioreq_server: xen_dm_op_ioreq_server_range_t,
    pub unmap_io_range_from_ioreq_server: xen_dm_op_ioreq_server_range_t,
    pub set_ioreq_server_state: xen_dm_op_set_ioreq_server_state_t,
    pub destroy_ioreq_server: xen_dm_op_destroy_ioreq_server_t,
    pub track_dirty_vram: xen_dm_op_track_dirty_vram_t,
    pub set_pci_intx_level: xen_dm_op_set_pci_intx_level_t,
    pub set_isa_irq_level: xen_dm_op_set_isa_irq_level_t,
    pub set_irq_level: xen_dm_op_set_irq_level_t,
    pub set_pci_link_route: xen_dm_op_set_pci_link_route_t,
    pub modified_memory: xen_dm_op_modified_memory_t,
    pub set_mem_type: xen_dm_op_set_mem_type_t,
    pub inject_event: xen_dm_op_inject_event_t,
    pub inject_msi: xen_dm_op_inject_msi_t,
    pub map_mem_type_to_ioreq_server: xen_dm_op_map_mem_type_to_ioreq_server_t,
    pub remote_shutdown: xen_dm_op_remote_shutdown_t,
    pub relocate_memory: xen_dm_op_relocate_memory_t,
    pub pin_memory_cacheattr: xen_dm_op_pin_memory_cacheattr_t,
    pub nr_vcpus: xen_dm_op_nr_vcpus_t,
}
#[test]
fn bindgen_test_layout_xen_dm_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op__bindgen_ty_1))
    );
    fn test_field_create_ioreq_server() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_ioreq_server) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(create_ioreq_server)
            )
        );
    }
    test_field_create_ioreq_server();
    fn test_field_get_ioreq_server_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_ioreq_server_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(get_ioreq_server_info)
            )
        );
    }
    test_field_get_ioreq_server_info();
    fn test_field_map_io_range_to_ioreq_server() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).map_io_range_to_ioreq_server) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(map_io_range_to_ioreq_server)
            )
        );
    }
    test_field_map_io_range_to_ioreq_server();
    fn test_field_unmap_io_range_from_ioreq_server() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unmap_io_range_from_ioreq_server) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(unmap_io_range_from_ioreq_server)
            )
        );
    }
    test_field_unmap_io_range_from_ioreq_server();
    fn test_field_set_ioreq_server_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_ioreq_server_state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(set_ioreq_server_state)
            )
        );
    }
    test_field_set_ioreq_server_state();
    fn test_field_destroy_ioreq_server() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_ioreq_server) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(destroy_ioreq_server)
            )
        );
    }
    test_field_destroy_ioreq_server();
    fn test_field_track_dirty_vram() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).track_dirty_vram) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(track_dirty_vram)
            )
        );
    }
    test_field_track_dirty_vram();
    fn test_field_set_pci_intx_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_pci_intx_level) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(set_pci_intx_level)
            )
        );
    }
    test_field_set_pci_intx_level();
    fn test_field_set_isa_irq_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_isa_irq_level) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(set_isa_irq_level)
            )
        );
    }
    test_field_set_isa_irq_level();
    fn test_field_set_irq_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_irq_level) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(set_irq_level)
            )
        );
    }
    test_field_set_irq_level();
    fn test_field_set_pci_link_route() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_pci_link_route) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(set_pci_link_route)
            )
        );
    }
    test_field_set_pci_link_route();
    fn test_field_modified_memory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).modified_memory) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(modified_memory)
            )
        );
    }
    test_field_modified_memory();
    fn test_field_set_mem_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_mem_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(set_mem_type)
            )
        );
    }
    test_field_set_mem_type();
    fn test_field_inject_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inject_event) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(inject_event)
            )
        );
    }
    test_field_inject_event();
    fn test_field_inject_msi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inject_msi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(inject_msi)
            )
        );
    }
    test_field_inject_msi();
    fn test_field_map_mem_type_to_ioreq_server() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).map_mem_type_to_ioreq_server) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(map_mem_type_to_ioreq_server)
            )
        );
    }
    test_field_map_mem_type_to_ioreq_server();
    fn test_field_remote_shutdown() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remote_shutdown) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(remote_shutdown)
            )
        );
    }
    test_field_remote_shutdown();
    fn test_field_relocate_memory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).relocate_memory) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(relocate_memory)
            )
        );
    }
    test_field_relocate_memory();
    fn test_field_pin_memory_cacheattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pin_memory_cacheattr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(pin_memory_cacheattr)
            )
        );
    }
    test_field_pin_memory_cacheattr();
    fn test_field_nr_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_vcpus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op__bindgen_ty_1),
                "::",
                stringify!(nr_vcpus)
            )
        );
    }
    test_field_nr_vcpus();
}
#[test]
fn bindgen_test_layout_xen_dm_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_dm_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_dm_op_buf {
    pub h: __guest_handle_64_void,
    pub size: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_dm_op_buf() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_buf>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_buf))
    );
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_buf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_buf),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_dm_op_buf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_dm_op_buf),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
pub type xen_dm_op_buf_t = xen_dm_op_buf;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_dm_op_buf_t {
    pub p: *mut xen_dm_op_buf_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_dm_op_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_dm_op_buf_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_dm_op_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_dm_op_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_dm_op_buf_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_dm_op_buf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_dm_op_buf_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_dm_op_buf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_dm_op_buf_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_dm_op_buf_t {
    pub p: *mut xen_dm_op_buf_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_dm_op_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_dm_op_buf_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_dm_op_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_dm_op_buf_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_dm_op_buf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_dm_op_buf_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_dm_op_buf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_dm_op_buf_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_dm_op_buf_t {
    pub p: *const xen_dm_op_buf_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_dm_op_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_dm_op_buf_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_dm_op_buf_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_dm_op_buf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_dm_op_buf_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_dm_op_buf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_dm_op_buf_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_dm_op_buf_t {
    pub p: *const xen_dm_op_buf_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_dm_op_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_dm_op_buf_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_dm_op_buf_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_dm_op_buf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_dm_op_buf_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_dm_op_buf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_dm_op_buf_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_rec {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub u: t_rec__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union t_rec__bindgen_ty_1 {
    pub cycles: t_rec__bindgen_ty_1__bindgen_ty_1,
    pub nocycles: t_rec__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_rec__bindgen_ty_1__bindgen_ty_1 {
    pub cycles_lo: u32,
    pub cycles_hi: u32,
    pub extra_u32: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_t_rec__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<t_rec__bindgen_ty_1__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(t_rec__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<t_rec__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(t_rec__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_cycles_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_rec__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cycles_lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_rec__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(cycles_lo)
            )
        );
    }
    test_field_cycles_lo();
    fn test_field_cycles_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_rec__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cycles_hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(t_rec__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(cycles_hi)
            )
        );
    }
    test_field_cycles_hi();
    fn test_field_extra_u32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_rec__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extra_u32) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(t_rec__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(extra_u32)
            )
        );
    }
    test_field_extra_u32();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_rec__bindgen_ty_1__bindgen_ty_2 {
    pub extra_u32: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_t_rec__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<t_rec__bindgen_ty_1__bindgen_ty_2>(),
        28usize,
        concat!("Size of: ", stringify!(t_rec__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<t_rec__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(t_rec__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_extra_u32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_rec__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extra_u32) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_rec__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(extra_u32)
            )
        );
    }
    test_field_extra_u32();
}
#[test]
fn bindgen_test_layout_t_rec__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<t_rec__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(t_rec__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<t_rec__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(t_rec__bindgen_ty_1))
    );
    fn test_field_cycles() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_rec__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cycles) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_rec__bindgen_ty_1),
                "::",
                stringify!(cycles)
            )
        );
    }
    test_field_cycles();
    fn test_field_nocycles() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_rec__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nocycles) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_rec__bindgen_ty_1),
                "::",
                stringify!(nocycles)
            )
        );
    }
    test_field_nocycles();
}
#[test]
fn bindgen_test_layout_t_rec() {
    assert_eq!(
        ::std::mem::size_of::<t_rec>(),
        40usize,
        concat!("Size of: ", stringify!(t_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<t_rec>(),
        4usize,
        concat!("Alignment of ", stringify!(t_rec))
    );
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            4usize,
            concat!("Offset of field: ", stringify!(t_rec), "::", stringify!(u))
        );
    }
    test_field_u();
}
impl t_rec {
    #[inline]
    pub fn event(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn extra_u32(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_extra_u32(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn cycles_included(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cycles_included(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        event: u32,
        extra_u32: u32,
        cycles_included: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let event: u32 = unsafe { ::std::mem::transmute(event) };
            event as u64
        });
        __bindgen_bitfield_unit.set(28usize, 3u8, {
            let extra_u32: u32 = unsafe { ::std::mem::transmute(extra_u32) };
            extra_u32 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let cycles_included: u32 = unsafe { ::std::mem::transmute(cycles_included) };
            cycles_included as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_buf {
    pub cons: u32,
    pub prod: u32,
}
#[test]
fn bindgen_test_layout_t_buf() {
    assert_eq!(
        ::std::mem::size_of::<t_buf>(),
        8usize,
        concat!("Size of: ", stringify!(t_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<t_buf>(),
        4usize,
        concat!("Alignment of ", stringify!(t_buf))
    );
    fn test_field_cons() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_buf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cons) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_buf),
                "::",
                stringify!(cons)
            )
        );
    }
    test_field_cons();
    fn test_field_prod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_buf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prod) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(t_buf),
                "::",
                stringify!(prod)
            )
        );
    }
    test_field_prod();
}
#[repr(C)]
#[derive(Debug)]
pub struct t_info {
    pub tbuf_size: u16,
    pub mfn_offset: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_t_info() {
    assert_eq!(
        ::std::mem::size_of::<t_info>(),
        2usize,
        concat!("Size of: ", stringify!(t_info))
    );
    assert_eq!(
        ::std::mem::align_of::<t_info>(),
        2usize,
        concat!("Alignment of ", stringify!(t_info))
    );
    fn test_field_tbuf_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tbuf_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(t_info),
                "::",
                stringify!(tbuf_size)
            )
        );
    }
    test_field_tbuf_size();
    fn test_field_mfn_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<t_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mfn_offset) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(t_info),
                "::",
                stringify!(mfn_offset)
            )
        );
    }
    test_field_mfn_offset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_param {
    pub domid: domid_t,
    pub pad: u16,
    pub index: u32,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_param() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_param>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_param))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_param>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_param))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_param>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_param),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_param>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_param),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_param>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_param),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_param>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_param),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
pub type xen_hvm_param_t = xen_hvm_param;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_param_t {
    pub p: *mut xen_hvm_param_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_param_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_param_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_hvm_param_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_param_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_hvm_param_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_param_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_param_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_param_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_param_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_param_t {
    pub p: *mut xen_hvm_param_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_param_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_param_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_hvm_param_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_param_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_param_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_param_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_param_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_param_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_param_t {
    pub p: *const xen_hvm_param_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_param_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_param_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_param_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_param_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_param_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_param_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_param_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_param_t {
    pub p: *const xen_hvm_param_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_param_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_param_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_param_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_hvm_param_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_param_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_hvm_param_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_param_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_suppress_ve {
    pub view: u16,
    pub suppress_ve: u8,
    pub pad1: u8,
    pub pad2: u32,
    pub gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_suppress_ve() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_suppress_ve>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_suppress_ve))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_suppress_ve>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_suppress_ve))
    );
    fn test_field_view() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve),
                "::",
                stringify!(view)
            )
        );
    }
    test_field_view();
    fn test_field_suppress_ve() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).suppress_ve) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve),
                "::",
                stringify!(suppress_ve)
            )
        );
    }
    test_field_suppress_ve();
    fn test_field_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve),
                "::",
                stringify!(pad1)
            )
        );
    }
    test_field_pad1();
    fn test_field_pad2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve),
                "::",
                stringify!(pad2)
            )
        );
    }
    test_field_pad2();
    fn test_field_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve),
                "::",
                stringify!(gfn)
            )
        );
    }
    test_field_gfn();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_suppress_ve_multi {
    pub view: u16,
    pub suppress_ve: u8,
    pub pad1: u8,
    pub first_error: i32,
    pub first_gfn: u64,
    pub last_gfn: u64,
    pub first_error_gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_suppress_ve_multi() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_suppress_ve_multi>(),
        32usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_suppress_ve_multi))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_suppress_ve_multi>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_hvm_altp2m_suppress_ve_multi)
        )
    );
    fn test_field_view() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve_multi),
                "::",
                stringify!(view)
            )
        );
    }
    test_field_view();
    fn test_field_suppress_ve() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).suppress_ve) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve_multi),
                "::",
                stringify!(suppress_ve)
            )
        );
    }
    test_field_suppress_ve();
    fn test_field_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve_multi),
                "::",
                stringify!(pad1)
            )
        );
    }
    test_field_pad1();
    fn test_field_first_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_error) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve_multi),
                "::",
                stringify!(first_error)
            )
        );
    }
    test_field_first_error();
    fn test_field_first_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_gfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve_multi),
                "::",
                stringify!(first_gfn)
            )
        );
    }
    test_field_first_gfn();
    fn test_field_last_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_gfn) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve_multi),
                "::",
                stringify!(last_gfn)
            )
        );
    }
    test_field_last_gfn();
    fn test_field_first_error_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_suppress_ve_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_error_gfn) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_suppress_ve_multi),
                "::",
                stringify!(first_error_gfn)
            )
        );
    }
    test_field_first_error_gfn();
}
pub const hvmmem_type_t_HVMMEM_ram_rw: hvmmem_type_t = 0;
pub const hvmmem_type_t_HVMMEM_ram_ro: hvmmem_type_t = 1;
pub const hvmmem_type_t_HVMMEM_mmio_dm: hvmmem_type_t = 2;
pub const hvmmem_type_t_HVMMEM_unused: hvmmem_type_t = 3;
pub const hvmmem_type_t_HVMMEM_ioreq_server: hvmmem_type_t = 4;
pub type hvmmem_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_pagetable_dying {
    pub domid: domid_t,
    pub pad: [u16; 3usize],
    pub gpa: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_pagetable_dying() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_pagetable_dying>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_pagetable_dying))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_pagetable_dying>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_pagetable_dying))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_pagetable_dying>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_pagetable_dying),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_pagetable_dying>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_pagetable_dying),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_gpa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_pagetable_dying>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpa) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_pagetable_dying),
                "::",
                stringify!(gpa)
            )
        );
    }
    test_field_gpa();
}
pub type xen_hvm_pagetable_dying_t = xen_hvm_pagetable_dying;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_pagetable_dying_t {
    pub p: *mut xen_hvm_pagetable_dying_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_pagetable_dying_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_pagetable_dying_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_pagetable_dying_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_pagetable_dying_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_pagetable_dying_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_pagetable_dying_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_pagetable_dying_t {
    pub p: *mut xen_hvm_pagetable_dying_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_pagetable_dying_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_pagetable_dying_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_pagetable_dying_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_pagetable_dying_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_pagetable_dying_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_pagetable_dying_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_pagetable_dying_t {
    pub p: *const xen_hvm_pagetable_dying_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_pagetable_dying_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_pagetable_dying_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_pagetable_dying_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_pagetable_dying_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_pagetable_dying_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_pagetable_dying_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_pagetable_dying_t {
    pub p: *const xen_hvm_pagetable_dying_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_pagetable_dying_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_pagetable_dying_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_pagetable_dying_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_pagetable_dying_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_pagetable_dying_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_pagetable_dying_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_get_time {
    pub now: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_get_time() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_get_time>(),
        8usize,
        concat!("Size of: ", stringify!(xen_hvm_get_time))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_get_time>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_get_time))
    );
    fn test_field_now() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_get_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).now) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_get_time),
                "::",
                stringify!(now)
            )
        );
    }
    test_field_now();
}
pub type xen_hvm_get_time_t = xen_hvm_get_time;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_get_time_t {
    pub p: *mut xen_hvm_get_time_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_get_time_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_hvm_get_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_get_time_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_get_time_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_get_time_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_get_time_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_get_time_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_get_time_t {
    pub p: *mut xen_hvm_get_time_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_get_time_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_get_time_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_get_time_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_get_time_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_get_time_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_get_time_t {
    pub p: *const xen_hvm_get_time_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_get_time_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_get_time_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_get_time_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_get_time_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_get_time_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_get_time_t {
    pub p: *const xen_hvm_get_time_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_get_time_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_hvm_get_time_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_get_time_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_hvm_get_time_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_get_time_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_xentrace {
    pub event: u16,
    pub extra_bytes: u16,
    pub extra: [u8; 28usize],
}
#[test]
fn bindgen_test_layout_xen_hvm_xentrace() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_xentrace>(),
        32usize,
        concat!("Size of: ", stringify!(xen_hvm_xentrace))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_xentrace>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_hvm_xentrace))
    );
    fn test_field_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_xentrace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_xentrace),
                "::",
                stringify!(event)
            )
        );
    }
    test_field_event();
    fn test_field_extra_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_xentrace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extra_bytes) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_xentrace),
                "::",
                stringify!(extra_bytes)
            )
        );
    }
    test_field_extra_bytes();
    fn test_field_extra() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_xentrace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_xentrace),
                "::",
                stringify!(extra)
            )
        );
    }
    test_field_extra();
}
pub type xen_hvm_xentrace_t = xen_hvm_xentrace;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_xentrace_t {
    pub p: *mut xen_hvm_xentrace_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_xentrace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_xentrace_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_hvm_xentrace_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_xentrace_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_xentrace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_xentrace_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_xentrace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_xentrace_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_xentrace_t {
    pub p: *mut xen_hvm_xentrace_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_xentrace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_xentrace_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_xentrace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_xentrace_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_xentrace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_xentrace_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_xentrace_t {
    pub p: *const xen_hvm_xentrace_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_xentrace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_xentrace_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_xentrace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_xentrace_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_xentrace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_xentrace_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_xentrace_t {
    pub p: *const xen_hvm_xentrace_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_xentrace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_xentrace_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_hvm_xentrace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_xentrace_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_hvm_xentrace_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_xentrace_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_get_mem_type {
    pub domid: domid_t,
    pub mem_type: u16,
    pub pad: [u16; 2usize],
    pub pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_get_mem_type() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_get_mem_type>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_get_mem_type))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_get_mem_type>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_get_mem_type))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_get_mem_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_get_mem_type),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_mem_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_get_mem_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_type) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_get_mem_type),
                "::",
                stringify!(mem_type)
            )
        );
    }
    test_field_mem_type();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_get_mem_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_get_mem_type),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_pfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_get_mem_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_get_mem_type),
                "::",
                stringify!(pfn)
            )
        );
    }
    test_field_pfn();
}
pub type xen_hvm_get_mem_type_t = xen_hvm_get_mem_type;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_get_mem_type_t {
    pub p: *mut xen_hvm_get_mem_type_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_get_mem_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_get_mem_type_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_get_mem_type_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_get_mem_type_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_get_mem_type_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_get_mem_type_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_get_mem_type_t {
    pub p: *mut xen_hvm_get_mem_type_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_get_mem_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_get_mem_type_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_get_mem_type_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_get_mem_type_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_get_mem_type_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_get_mem_type_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_get_mem_type_t {
    pub p: *const xen_hvm_get_mem_type_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_get_mem_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_get_mem_type_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_get_mem_type_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_get_mem_type_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_get_mem_type_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_get_mem_type_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_get_mem_type_t {
    pub p: *const xen_hvm_get_mem_type_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_get_mem_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_get_mem_type_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_get_mem_type_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_get_mem_type_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_get_mem_type_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_get_mem_type_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_domain_state {
    pub state: u8,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_domain_state() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_domain_state>(),
        1usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_domain_state))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_domain_state>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_domain_state))
    );
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_domain_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_domain_state),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
}
pub type xen_hvm_altp2m_domain_state_t = xen_hvm_altp2m_domain_state;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_domain_state_t {
    pub p: *mut xen_hvm_altp2m_domain_state_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_domain_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_domain_state_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_domain_state_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_domain_state_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_domain_state_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_domain_state_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_domain_state_t {
    pub p: *mut xen_hvm_altp2m_domain_state_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_domain_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_domain_state_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_hvm_altp2m_domain_state_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_domain_state_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_hvm_altp2m_domain_state_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_domain_state_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_domain_state_t {
    pub p: *const xen_hvm_altp2m_domain_state_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_domain_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_domain_state_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_domain_state_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_domain_state_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_domain_state_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_domain_state_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_domain_state_t {
    pub p: *const xen_hvm_altp2m_domain_state_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_domain_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_domain_state_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_domain_state_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_domain_state_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_domain_state_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_domain_state_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_vcpu_enable_notify {
    pub vcpu_id: u32,
    pub pad: u32,
    pub gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_vcpu_enable_notify() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_vcpu_enable_notify>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_vcpu_enable_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_vcpu_enable_notify>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_hvm_altp2m_vcpu_enable_notify)
        )
    );
    fn test_field_vcpu_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_vcpu_enable_notify>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_vcpu_enable_notify),
                "::",
                stringify!(vcpu_id)
            )
        );
    }
    test_field_vcpu_id();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_vcpu_enable_notify>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_vcpu_enable_notify),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_vcpu_enable_notify>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_vcpu_enable_notify),
                "::",
                stringify!(gfn)
            )
        );
    }
    test_field_gfn();
}
pub type xen_hvm_altp2m_vcpu_enable_notify_t = xen_hvm_altp2m_vcpu_enable_notify;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_enable_notify_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_enable_notify_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_enable_notify_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_enable_notify_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_vcpu_disable_notify {
    pub vcpu_id: u32,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_vcpu_disable_notify() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_vcpu_disable_notify>(),
        4usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_vcpu_disable_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_vcpu_disable_notify>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_hvm_altp2m_vcpu_disable_notify)
        )
    );
    fn test_field_vcpu_id() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_hvm_altp2m_vcpu_disable_notify>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_vcpu_disable_notify),
                "::",
                stringify!(vcpu_id)
            )
        );
    }
    test_field_vcpu_id();
}
pub type xen_hvm_altp2m_vcpu_disable_notify_t = xen_hvm_altp2m_vcpu_disable_notify;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_disable_notify_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_disable_notify_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_disable_notify_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_disable_notify_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_view {
    pub view: u16,
    pub hvmmem_default_access: u16,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_view() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_view>(),
        4usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_view))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_view>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_view))
    );
    fn test_field_view() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_view>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_view),
                "::",
                stringify!(view)
            )
        );
    }
    test_field_view();
    fn test_field_hvmmem_default_access() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_view>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hvmmem_default_access) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_view),
                "::",
                stringify!(hvmmem_default_access)
            )
        );
    }
    test_field_hvmmem_default_access();
}
pub type xen_hvm_altp2m_view_t = xen_hvm_altp2m_view;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_view_t {
    pub p: *mut xen_hvm_altp2m_view_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_view_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_view_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_view_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_view_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_view_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_view_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_view_t {
    pub p: *mut xen_hvm_altp2m_view_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_view_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_view_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_altp2m_view_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_view_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_altp2m_view_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_view_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_view_t {
    pub p: *const xen_hvm_altp2m_view_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_view_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_view_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_altp2m_view_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_view_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_altp2m_view_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_view_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_view_t {
    pub p: *const xen_hvm_altp2m_view_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_view_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_view_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_const_xen_hvm_altp2m_view_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_view_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_const_xen_hvm_altp2m_view_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_view_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_mem_access {
    pub view: u16,
    pub access: u16,
    pub pad: u32,
    pub gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_mem_access() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_mem_access>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_mem_access))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_mem_access>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_mem_access))
    );
    fn test_field_view() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_mem_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_mem_access),
                "::",
                stringify!(view)
            )
        );
    }
    test_field_view();
    fn test_field_access() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_mem_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_mem_access),
                "::",
                stringify!(access)
            )
        );
    }
    test_field_access();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_mem_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_mem_access),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_mem_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_mem_access),
                "::",
                stringify!(gfn)
            )
        );
    }
    test_field_gfn();
}
pub type xen_hvm_altp2m_mem_access_t = xen_hvm_altp2m_mem_access;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_mem_access_t {
    pub p: *mut xen_hvm_altp2m_mem_access_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_mem_access_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_mem_access_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_mem_access_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_mem_access_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_mem_access_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_mem_access_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_mem_access_t {
    pub p: *mut xen_hvm_altp2m_mem_access_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_mem_access_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_mem_access_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_xen_hvm_altp2m_mem_access_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_mem_access_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_xen_hvm_altp2m_mem_access_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_mem_access_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_mem_access_t {
    pub p: *const xen_hvm_altp2m_mem_access_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_mem_access_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_mem_access_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_mem_access_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_mem_access_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_mem_access_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_mem_access_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_mem_access_t {
    pub p: *const xen_hvm_altp2m_mem_access_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_mem_access_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_mem_access_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_mem_access_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_mem_access_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_mem_access_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_mem_access_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_hvm_altp2m_set_mem_access_multi {
    pub view: u16,
    pub pad: u16,
    pub nr: u32,
    pub opaque: u64,
    pub pfn_list: __guest_handle_64_const_uint64,
    pub access_list: __guest_handle_64_const_uint8,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_set_mem_access_multi() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_set_mem_access_multi>(),
        32usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_set_mem_access_multi))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_set_mem_access_multi>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_hvm_altp2m_set_mem_access_multi)
        )
    );
    fn test_field_view() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_hvm_altp2m_set_mem_access_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_set_mem_access_multi),
                "::",
                stringify!(view)
            )
        );
    }
    test_field_view();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_hvm_altp2m_set_mem_access_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_set_mem_access_multi),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_hvm_altp2m_set_mem_access_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_set_mem_access_multi),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_opaque() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_hvm_altp2m_set_mem_access_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_set_mem_access_multi),
                "::",
                stringify!(opaque)
            )
        );
    }
    test_field_opaque();
    fn test_field_pfn_list() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_hvm_altp2m_set_mem_access_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pfn_list) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_set_mem_access_multi),
                "::",
                stringify!(pfn_list)
            )
        );
    }
    test_field_pfn_list();
    fn test_field_access_list() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xen_hvm_altp2m_set_mem_access_multi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).access_list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_set_mem_access_multi),
                "::",
                stringify!(access_list)
            )
        );
    }
    test_field_access_list();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_change_gfn {
    pub view: u16,
    pub pad1: u16,
    pub pad2: u32,
    pub old_gfn: u64,
    pub new_gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_change_gfn() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_change_gfn>(),
        24usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_change_gfn))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_change_gfn>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_change_gfn))
    );
    fn test_field_view() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_change_gfn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_change_gfn),
                "::",
                stringify!(view)
            )
        );
    }
    test_field_view();
    fn test_field_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_change_gfn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_change_gfn),
                "::",
                stringify!(pad1)
            )
        );
    }
    test_field_pad1();
    fn test_field_pad2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_change_gfn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_change_gfn),
                "::",
                stringify!(pad2)
            )
        );
    }
    test_field_pad2();
    fn test_field_old_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_change_gfn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).old_gfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_change_gfn),
                "::",
                stringify!(old_gfn)
            )
        );
    }
    test_field_old_gfn();
    fn test_field_new_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_change_gfn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).new_gfn) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_change_gfn),
                "::",
                stringify!(new_gfn)
            )
        );
    }
    test_field_new_gfn();
}
pub type xen_hvm_altp2m_change_gfn_t = xen_hvm_altp2m_change_gfn;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_change_gfn_t {
    pub p: *mut xen_hvm_altp2m_change_gfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_change_gfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_change_gfn_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_change_gfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_change_gfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_change_gfn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_change_gfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_change_gfn_t {
    pub p: *mut xen_hvm_altp2m_change_gfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_change_gfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_change_gfn_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_xen_hvm_altp2m_change_gfn_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_change_gfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_xen_hvm_altp2m_change_gfn_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_change_gfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_change_gfn_t {
    pub p: *const xen_hvm_altp2m_change_gfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_change_gfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_change_gfn_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_change_gfn_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_change_gfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_hvm_altp2m_change_gfn_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_change_gfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_change_gfn_t {
    pub p: *const xen_hvm_altp2m_change_gfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_change_gfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_change_gfn_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_hvm_altp2m_change_gfn_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_get_vcpu_p2m_idx {
    pub vcpu_id: u32,
    pub altp2m_idx: u16,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_get_vcpu_p2m_idx() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_get_vcpu_p2m_idx>(),
        8usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_get_vcpu_p2m_idx))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_get_vcpu_p2m_idx>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_get_vcpu_p2m_idx))
    );
    fn test_field_vcpu_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_get_vcpu_p2m_idx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcpu_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_get_vcpu_p2m_idx),
                "::",
                stringify!(vcpu_id)
            )
        );
    }
    test_field_vcpu_id();
    fn test_field_altp2m_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_get_vcpu_p2m_idx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).altp2m_idx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_get_vcpu_p2m_idx),
                "::",
                stringify!(altp2m_idx)
            )
        );
    }
    test_field_altp2m_idx();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_set_visibility {
    pub altp2m_idx: u16,
    pub visible: u8,
    pub pad: u8,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_set_visibility() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_set_visibility>(),
        4usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_set_visibility))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_set_visibility>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_set_visibility))
    );
    fn test_field_altp2m_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_set_visibility>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).altp2m_idx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_set_visibility),
                "::",
                stringify!(altp2m_idx)
            )
        );
    }
    test_field_altp2m_idx();
    fn test_field_visible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_set_visibility>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).visible) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_set_visibility),
                "::",
                stringify!(visible)
            )
        );
    }
    test_field_visible();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_set_visibility>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_set_visibility),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_hvm_altp2m_op {
    pub version: u32,
    pub cmd: u32,
    pub domain: domid_t,
    pub pad1: u16,
    pub pad2: u32,
    pub u: xen_hvm_altp2m_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_hvm_altp2m_op__bindgen_ty_1 {
    pub domain_state: xen_hvm_altp2m_domain_state,
    pub enable_notify: xen_hvm_altp2m_vcpu_enable_notify,
    pub view: xen_hvm_altp2m_view,
    pub mem_access: xen_hvm_altp2m_mem_access,
    pub change_gfn: xen_hvm_altp2m_change_gfn,
    pub set_mem_access_multi: xen_hvm_altp2m_set_mem_access_multi,
    pub suppress_ve: xen_hvm_altp2m_suppress_ve,
    pub suppress_ve_multi: xen_hvm_altp2m_suppress_ve_multi,
    pub disable_notify: xen_hvm_altp2m_vcpu_disable_notify,
    pub get_vcpu_p2m_idx: xen_hvm_altp2m_get_vcpu_p2m_idx,
    pub set_visibility: xen_hvm_altp2m_set_visibility,
    pub pad: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_op__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_op__bindgen_ty_1))
    );
    fn test_field_domain_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain_state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(domain_state)
            )
        );
    }
    test_field_domain_state();
    fn test_field_enable_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_notify) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(enable_notify)
            )
        );
    }
    test_field_enable_notify();
    fn test_field_view() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(view)
            )
        );
    }
    test_field_view();
    fn test_field_mem_access() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_access) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(mem_access)
            )
        );
    }
    test_field_mem_access();
    fn test_field_change_gfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).change_gfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(change_gfn)
            )
        );
    }
    test_field_change_gfn();
    fn test_field_set_mem_access_multi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_mem_access_multi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(set_mem_access_multi)
            )
        );
    }
    test_field_set_mem_access_multi();
    fn test_field_suppress_ve() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).suppress_ve) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(suppress_ve)
            )
        );
    }
    test_field_suppress_ve();
    fn test_field_suppress_ve_multi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).suppress_ve_multi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(suppress_ve_multi)
            )
        );
    }
    test_field_suppress_ve_multi();
    fn test_field_disable_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disable_notify) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(disable_notify)
            )
        );
    }
    test_field_disable_notify();
    fn test_field_get_vcpu_p2m_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_vcpu_p2m_idx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(get_vcpu_p2m_idx)
            )
        );
    }
    test_field_get_vcpu_p2m_idx();
    fn test_field_set_visibility() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_visibility) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(set_visibility)
            )
        );
    }
    test_field_set_visibility();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_op>(),
        80usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_op))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op),
                "::",
                stringify!(domain)
            )
        );
    }
    test_field_domain();
    fn test_field_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op),
                "::",
                stringify!(pad1)
            )
        );
    }
    test_field_pad1();
    fn test_field_pad2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op),
                "::",
                stringify!(pad2)
            )
        );
    }
    test_field_pad2();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_hvm_altp2m_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_hvm_altp2m_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type xen_hvm_altp2m_op_t = xen_hvm_altp2m_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_op_t {
    pub p: *mut xen_hvm_altp2m_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_hvm_altp2m_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_hvm_altp2m_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_hvm_altp2m_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_op_t {
    pub p: *mut xen_hvm_altp2m_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_altp2m_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_hvm_altp2m_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_hvm_altp2m_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_op_t {
    pub p: *const xen_hvm_altp2m_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_altp2m_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_hvm_altp2m_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_hvm_altp2m_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_op_t {
    pub p: *const xen_hvm_altp2m_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_hvm_altp2m_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_hvm_altp2m_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_hvm_altp2m_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_load {
    pub buffer: __guest_handle_64_char,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_load() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_load>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_load))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_load>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_load))
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_load>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_load),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_load>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_load),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
pub type xen_flask_load_t = xen_flask_load;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_setenforce {
    pub enforcing: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_setenforce() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_setenforce>(),
        4usize,
        concat!("Size of: ", stringify!(xen_flask_setenforce))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_setenforce>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_setenforce))
    );
    fn test_field_enforcing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_setenforce>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enforcing) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_setenforce),
                "::",
                stringify!(enforcing)
            )
        );
    }
    test_field_enforcing();
}
pub type xen_flask_setenforce_t = xen_flask_setenforce;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_sid_context {
    pub sid: u32,
    pub size: u32,
    pub context: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_flask_sid_context() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_sid_context>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_sid_context))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_sid_context>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_sid_context))
    );
    fn test_field_sid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_sid_context>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_sid_context),
                "::",
                stringify!(sid)
            )
        );
    }
    test_field_sid();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_sid_context>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_sid_context),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_sid_context>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_sid_context),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
}
pub type xen_flask_sid_context_t = xen_flask_sid_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_access {
    pub ssid: u32,
    pub tsid: u32,
    pub tclass: u32,
    pub req: u32,
    pub allowed: u32,
    pub audit_allow: u32,
    pub audit_deny: u32,
    pub seqno: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_access() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_access>(),
        32usize,
        concat!("Size of: ", stringify!(xen_flask_access))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_access>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_access))
    );
    fn test_field_ssid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ssid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_access),
                "::",
                stringify!(ssid)
            )
        );
    }
    test_field_ssid();
    fn test_field_tsid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tsid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_access),
                "::",
                stringify!(tsid)
            )
        );
    }
    test_field_tsid();
    fn test_field_tclass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tclass) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_access),
                "::",
                stringify!(tclass)
            )
        );
    }
    test_field_tclass();
    fn test_field_req() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).req) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_access),
                "::",
                stringify!(req)
            )
        );
    }
    test_field_req();
    fn test_field_allowed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allowed) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_access),
                "::",
                stringify!(allowed)
            )
        );
    }
    test_field_allowed();
    fn test_field_audit_allow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).audit_allow) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_access),
                "::",
                stringify!(audit_allow)
            )
        );
    }
    test_field_audit_allow();
    fn test_field_audit_deny() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).audit_deny) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_access),
                "::",
                stringify!(audit_deny)
            )
        );
    }
    test_field_audit_deny();
    fn test_field_seqno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_access>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seqno) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_access),
                "::",
                stringify!(seqno)
            )
        );
    }
    test_field_seqno();
}
pub type xen_flask_access_t = xen_flask_access;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_transition {
    pub ssid: u32,
    pub tsid: u32,
    pub tclass: u32,
    pub newsid: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_transition() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_transition>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_transition))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_transition>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_transition))
    );
    fn test_field_ssid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_transition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ssid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_transition),
                "::",
                stringify!(ssid)
            )
        );
    }
    test_field_ssid();
    fn test_field_tsid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_transition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tsid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_transition),
                "::",
                stringify!(tsid)
            )
        );
    }
    test_field_tsid();
    fn test_field_tclass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_transition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tclass) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_transition),
                "::",
                stringify!(tclass)
            )
        );
    }
    test_field_tclass();
    fn test_field_newsid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_transition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).newsid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_transition),
                "::",
                stringify!(newsid)
            )
        );
    }
    test_field_newsid();
}
pub type xen_flask_transition_t = xen_flask_transition;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_boolean {
    pub bool_id: u32,
    pub enforcing: u8,
    pub pending: u8,
    pub new_value: u8,
    pub commit: u8,
    pub size: u32,
    pub name: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_flask_boolean() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_boolean>(),
        24usize,
        concat!("Size of: ", stringify!(xen_flask_boolean))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_boolean>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_boolean))
    );
    fn test_field_bool_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_boolean>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bool_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_boolean),
                "::",
                stringify!(bool_id)
            )
        );
    }
    test_field_bool_id();
    fn test_field_enforcing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_boolean>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enforcing) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_boolean),
                "::",
                stringify!(enforcing)
            )
        );
    }
    test_field_enforcing();
    fn test_field_pending() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_boolean>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pending) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_boolean),
                "::",
                stringify!(pending)
            )
        );
    }
    test_field_pending();
    fn test_field_new_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_boolean>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).new_value) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_boolean),
                "::",
                stringify!(new_value)
            )
        );
    }
    test_field_new_value();
    fn test_field_commit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_boolean>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).commit) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_boolean),
                "::",
                stringify!(commit)
            )
        );
    }
    test_field_commit();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_boolean>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_boolean),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_boolean>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_boolean),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
}
pub type xen_flask_boolean_t = xen_flask_boolean;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_setavc_threshold {
    pub threshold: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_setavc_threshold() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_setavc_threshold>(),
        4usize,
        concat!("Size of: ", stringify!(xen_flask_setavc_threshold))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_setavc_threshold>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_setavc_threshold))
    );
    fn test_field_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_setavc_threshold>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_setavc_threshold),
                "::",
                stringify!(threshold)
            )
        );
    }
    test_field_threshold();
}
pub type xen_flask_setavc_threshold_t = xen_flask_setavc_threshold;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_hash_stats {
    pub entries: u32,
    pub buckets_used: u32,
    pub buckets_total: u32,
    pub max_chain_len: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_hash_stats() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_hash_stats>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_hash_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_hash_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_hash_stats))
    );
    fn test_field_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_hash_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_hash_stats),
                "::",
                stringify!(entries)
            )
        );
    }
    test_field_entries();
    fn test_field_buckets_used() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_hash_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buckets_used) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_hash_stats),
                "::",
                stringify!(buckets_used)
            )
        );
    }
    test_field_buckets_used();
    fn test_field_buckets_total() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_hash_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buckets_total) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_hash_stats),
                "::",
                stringify!(buckets_total)
            )
        );
    }
    test_field_buckets_total();
    fn test_field_max_chain_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_hash_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_chain_len) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_hash_stats),
                "::",
                stringify!(max_chain_len)
            )
        );
    }
    test_field_max_chain_len();
}
pub type xen_flask_hash_stats_t = xen_flask_hash_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_cache_stats {
    pub cpu: u32,
    pub lookups: u32,
    pub hits: u32,
    pub misses: u32,
    pub allocations: u32,
    pub reclaims: u32,
    pub frees: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_cache_stats() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_cache_stats>(),
        28usize,
        concat!("Size of: ", stringify!(xen_flask_cache_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_cache_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_cache_stats))
    );
    fn test_field_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_cache_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_cache_stats),
                "::",
                stringify!(cpu)
            )
        );
    }
    test_field_cpu();
    fn test_field_lookups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_cache_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lookups) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_cache_stats),
                "::",
                stringify!(lookups)
            )
        );
    }
    test_field_lookups();
    fn test_field_hits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_cache_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hits) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_cache_stats),
                "::",
                stringify!(hits)
            )
        );
    }
    test_field_hits();
    fn test_field_misses() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_cache_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).misses) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_cache_stats),
                "::",
                stringify!(misses)
            )
        );
    }
    test_field_misses();
    fn test_field_allocations() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_cache_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allocations) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_cache_stats),
                "::",
                stringify!(allocations)
            )
        );
    }
    test_field_allocations();
    fn test_field_reclaims() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_cache_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reclaims) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_cache_stats),
                "::",
                stringify!(reclaims)
            )
        );
    }
    test_field_reclaims();
    fn test_field_frees() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_cache_stats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frees) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_cache_stats),
                "::",
                stringify!(frees)
            )
        );
    }
    test_field_frees();
}
pub type xen_flask_cache_stats_t = xen_flask_cache_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_ocontext {
    pub ocon: u32,
    pub sid: u32,
    pub low: u64,
    pub high: u64,
}
#[test]
fn bindgen_test_layout_xen_flask_ocontext() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_ocontext>(),
        24usize,
        concat!("Size of: ", stringify!(xen_flask_ocontext))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_ocontext>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_ocontext))
    );
    fn test_field_ocon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_ocontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ocon) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_ocontext),
                "::",
                stringify!(ocon)
            )
        );
    }
    test_field_ocon();
    fn test_field_sid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_ocontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_ocontext),
                "::",
                stringify!(sid)
            )
        );
    }
    test_field_sid();
    fn test_field_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_ocontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_ocontext),
                "::",
                stringify!(low)
            )
        );
    }
    test_field_low();
    fn test_field_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_ocontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_ocontext),
                "::",
                stringify!(high)
            )
        );
    }
    test_field_high();
}
pub type xen_flask_ocontext_t = xen_flask_ocontext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_peersid {
    pub evtchn: evtchn_port_t,
    pub sid: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_peersid() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_peersid>(),
        8usize,
        concat!("Size of: ", stringify!(xen_flask_peersid))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_peersid>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_peersid))
    );
    fn test_field_evtchn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_peersid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).evtchn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_peersid),
                "::",
                stringify!(evtchn)
            )
        );
    }
    test_field_evtchn();
    fn test_field_sid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_peersid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_peersid),
                "::",
                stringify!(sid)
            )
        );
    }
    test_field_sid();
}
pub type xen_flask_peersid_t = xen_flask_peersid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_relabel {
    pub domid: u32,
    pub sid: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_relabel() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_relabel>(),
        8usize,
        concat!("Size of: ", stringify!(xen_flask_relabel))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_relabel>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_relabel))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_relabel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_relabel),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_sid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_relabel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_relabel),
                "::",
                stringify!(sid)
            )
        );
    }
    test_field_sid();
}
pub type xen_flask_relabel_t = xen_flask_relabel;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_devicetree_label {
    pub sid: u32,
    pub length: u32,
    pub path: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_flask_devicetree_label() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_devicetree_label>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_devicetree_label))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_devicetree_label>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_devicetree_label))
    );
    fn test_field_sid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_devicetree_label>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_devicetree_label),
                "::",
                stringify!(sid)
            )
        );
    }
    test_field_sid();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_devicetree_label>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_devicetree_label),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_devicetree_label>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_devicetree_label),
                "::",
                stringify!(path)
            )
        );
    }
    test_field_path();
}
pub type xen_flask_devicetree_label_t = xen_flask_devicetree_label;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_op {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_flask_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_flask_op__bindgen_ty_1 {
    pub load: xen_flask_load_t,
    pub enforce: xen_flask_setenforce_t,
    pub sid_context: xen_flask_sid_context_t,
    pub access: xen_flask_access_t,
    pub transition: xen_flask_transition_t,
    pub boolean: xen_flask_boolean_t,
    pub setavc_threshold: xen_flask_setavc_threshold_t,
    pub hash_stats: xen_flask_hash_stats_t,
    pub cache_stats: xen_flask_cache_stats_t,
    pub ocontext: xen_flask_ocontext_t,
    pub peersid: xen_flask_peersid_t,
    pub relabel: xen_flask_relabel_t,
    pub devicetree_label: xen_flask_devicetree_label_t,
}
#[test]
fn bindgen_test_layout_xen_flask_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_op__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(xen_flask_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_op__bindgen_ty_1))
    );
    fn test_field_load() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).load) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(load)
            )
        );
    }
    test_field_load();
    fn test_field_enforce() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enforce) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(enforce)
            )
        );
    }
    test_field_enforce();
    fn test_field_sid_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sid_context) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(sid_context)
            )
        );
    }
    test_field_sid_context();
    fn test_field_access() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(access)
            )
        );
    }
    test_field_access();
    fn test_field_transition() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transition) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(transition)
            )
        );
    }
    test_field_transition();
    fn test_field_boolean() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).boolean) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(boolean)
            )
        );
    }
    test_field_boolean();
    fn test_field_setavc_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).setavc_threshold) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(setavc_threshold)
            )
        );
    }
    test_field_setavc_threshold();
    fn test_field_hash_stats() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hash_stats) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(hash_stats)
            )
        );
    }
    test_field_hash_stats();
    fn test_field_cache_stats() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cache_stats) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(cache_stats)
            )
        );
    }
    test_field_cache_stats();
    fn test_field_ocontext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ocontext) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(ocontext)
            )
        );
    }
    test_field_ocontext();
    fn test_field_peersid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).peersid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(peersid)
            )
        );
    }
    test_field_peersid();
    fn test_field_relabel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).relabel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(relabel)
            )
        );
    }
    test_field_relabel();
    fn test_field_devicetree_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devicetree_label) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op__bindgen_ty_1),
                "::",
                stringify!(devicetree_label)
            )
        );
    }
    test_field_devicetree_label();
}
#[test]
fn bindgen_test_layout_xen_flask_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_op>(),
        40usize,
        concat!("Size of: ", stringify!(xen_flask_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_interface_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interface_version) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op),
                "::",
                stringify!(interface_version)
            )
        );
    }
    test_field_interface_version();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_flask_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_flask_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type xen_flask_op_t = xen_flask_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_flask_op_t {
    pub p: *mut xen_flask_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_flask_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_flask_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_flask_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_flask_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_flask_op_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_flask_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_flask_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_flask_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_flask_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_flask_op_t {
    pub p: *mut xen_flask_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_flask_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_flask_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_flask_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_flask_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_flask_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_flask_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_flask_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xen_flask_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_flask_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_flask_op_t {
    pub p: *const xen_flask_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_flask_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_flask_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_flask_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_flask_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_flask_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_flask_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_flask_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_flask_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_flask_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_flask_op_t {
    pub p: *const xen_flask_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_flask_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_flask_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_flask_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_flask_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_flask_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_flask_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_flask_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_flask_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_flask_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_image {
    pub indirection_page: ::std::os::raw::c_ulong,
    pub start_address: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_xen_kexec_image() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_image>(),
        16usize,
        concat!("Size of: ", stringify!(xen_kexec_image))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_image>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_image))
    );
    fn test_field_indirection_page() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_image>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).indirection_page) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_image),
                "::",
                stringify!(indirection_page)
            )
        );
    }
    test_field_indirection_page();
    fn test_field_start_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_image>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_address) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_image),
                "::",
                stringify!(start_address)
            )
        );
    }
    test_field_start_address();
}
pub type xen_kexec_image_t = xen_kexec_image;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_exec {
    pub type_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_xen_kexec_exec() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_exec>(),
        4usize,
        concat!("Size of: ", stringify!(xen_kexec_exec))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_exec>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_kexec_exec))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_exec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_exec),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
pub type xen_kexec_exec_t = xen_kexec_exec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_load_v1 {
    pub type_: ::std::os::raw::c_int,
    pub image: xen_kexec_image_t,
}
#[test]
fn bindgen_test_layout_xen_kexec_load_v1() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_load_v1>(),
        24usize,
        concat!("Size of: ", stringify!(xen_kexec_load_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_load_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_load_v1))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load_v1),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_image() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load_v1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load_v1),
                "::",
                stringify!(image)
            )
        );
    }
    test_field_image();
}
pub type xen_kexec_load_v1_t = xen_kexec_load_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_range {
    pub range: ::std::os::raw::c_int,
    pub nr: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_ulong,
    pub start: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_xen_kexec_range() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_range>(),
        24usize,
        concat!("Size of: ", stringify!(xen_kexec_range))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_range>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_range))
    );
    fn test_field_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_range),
                "::",
                stringify!(range)
            )
        );
    }
    test_field_range();
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_range),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_range),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_range>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_range),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
}
pub type xen_kexec_range_t = xen_kexec_range;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_kexec_segment {
    pub buf: xen_kexec_segment__bindgen_ty_1,
    pub buf_size: u64,
    pub dest_maddr: u64,
    pub dest_size: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_kexec_segment__bindgen_ty_1 {
    pub h: __guest_handle_64_const_void,
    pub _pad: u64,
}
#[test]
fn bindgen_test_layout_xen_kexec_segment__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_segment__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xen_kexec_segment__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_segment__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_segment__bindgen_ty_1))
    );
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_segment__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_segment__bindgen_ty_1),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
    fn test_field__pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_segment__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_segment__bindgen_ty_1),
                "::",
                stringify!(_pad)
            )
        );
    }
    test_field__pad();
}
#[test]
fn bindgen_test_layout_xen_kexec_segment() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_segment>(),
        32usize,
        concat!("Size of: ", stringify!(xen_kexec_segment))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_segment>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_segment))
    );
    fn test_field_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_segment>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_segment),
                "::",
                stringify!(buf)
            )
        );
    }
    test_field_buf();
    fn test_field_buf_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_segment>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_segment),
                "::",
                stringify!(buf_size)
            )
        );
    }
    test_field_buf_size();
    fn test_field_dest_maddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_segment>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dest_maddr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_segment),
                "::",
                stringify!(dest_maddr)
            )
        );
    }
    test_field_dest_maddr();
    fn test_field_dest_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_segment>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dest_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_segment),
                "::",
                stringify!(dest_size)
            )
        );
    }
    test_field_dest_size();
}
pub type xen_kexec_segment_t = xen_kexec_segment;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_kexec_segment_t {
    pub p: *mut xen_kexec_segment_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_kexec_segment_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_kexec_segment_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_kexec_segment_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_kexec_segment_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_kexec_segment_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_kexec_segment_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_kexec_segment_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_kexec_segment_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_kexec_segment_t {
    pub p: *mut xen_kexec_segment_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_kexec_segment_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_kexec_segment_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_kexec_segment_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_kexec_segment_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_kexec_segment_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_kexec_segment_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_kexec_segment_t {
    pub p: *const xen_kexec_segment_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_kexec_segment_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_kexec_segment_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_kexec_segment_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_kexec_segment_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_kexec_segment_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_kexec_segment_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_kexec_segment_t {
    pub p: *const xen_kexec_segment_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_kexec_segment_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_kexec_segment_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_kexec_segment_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_kexec_segment_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_kexec_segment_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_kexec_segment_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_kexec_load {
    pub type_: u8,
    pub _pad: u8,
    pub arch: u16,
    pub nr_segments: u32,
    pub segments: xen_kexec_load__bindgen_ty_1,
    pub entry_maddr: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_kexec_load__bindgen_ty_1 {
    pub h: __guest_handle_64_xen_kexec_segment_t,
    pub _pad: u64,
}
#[test]
fn bindgen_test_layout_xen_kexec_load__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_load__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xen_kexec_load__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_load__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_load__bindgen_ty_1))
    );
    fn test_field_h() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load__bindgen_ty_1),
                "::",
                stringify!(h)
            )
        );
    }
    test_field_h();
    fn test_field__pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load__bindgen_ty_1),
                "::",
                stringify!(_pad)
            )
        );
    }
    test_field__pad();
}
#[test]
fn bindgen_test_layout_xen_kexec_load() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_load>(),
        24usize,
        concat!("Size of: ", stringify!(xen_kexec_load))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_load>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_load))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field__pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load),
                "::",
                stringify!(_pad)
            )
        );
    }
    test_field__pad();
    fn test_field_arch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arch) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load),
                "::",
                stringify!(arch)
            )
        );
    }
    test_field_arch();
    fn test_field_nr_segments() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_segments) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load),
                "::",
                stringify!(nr_segments)
            )
        );
    }
    test_field_nr_segments();
    fn test_field_segments() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).segments) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load),
                "::",
                stringify!(segments)
            )
        );
    }
    test_field_segments();
    fn test_field_entry_maddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_load>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).entry_maddr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_load),
                "::",
                stringify!(entry_maddr)
            )
        );
    }
    test_field_entry_maddr();
}
pub type xen_kexec_load_t = xen_kexec_load;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_kexec_load_t {
    pub p: *mut xen_kexec_load_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_kexec_load_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_kexec_load_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_kexec_load_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_kexec_load_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_kexec_load_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_kexec_load_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_kexec_load_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_kexec_load_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_kexec_load_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_kexec_load_t {
    pub p: *mut xen_kexec_load_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_kexec_load_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_kexec_load_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_kexec_load_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_kexec_load_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_kexec_load_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_kexec_load_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_kexec_load_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_kexec_load_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_kexec_load_t {
    pub p: *const xen_kexec_load_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_kexec_load_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_kexec_load_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_kexec_load_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_kexec_load_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_kexec_load_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_kexec_load_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_kexec_load_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_kexec_load_t {
    pub p: *const xen_kexec_load_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_kexec_load_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_kexec_load_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_kexec_load_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_kexec_load_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_kexec_load_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_kexec_load_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_kexec_load_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_unload {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_xen_kexec_unload() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_unload>(),
        1usize,
        concat!("Size of: ", stringify!(xen_kexec_unload))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_unload>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_kexec_unload))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_unload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_unload),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
pub type xen_kexec_unload_t = xen_kexec_unload;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_kexec_unload_t {
    pub p: *mut xen_kexec_unload_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_kexec_unload_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_kexec_unload_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_kexec_unload_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_kexec_unload_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_kexec_unload_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_kexec_unload_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_kexec_unload_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_kexec_unload_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_kexec_unload_t {
    pub p: *mut xen_kexec_unload_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_kexec_unload_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_kexec_unload_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_kexec_unload_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_kexec_unload_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_kexec_unload_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_kexec_unload_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_kexec_unload_t {
    pub p: *const xen_kexec_unload_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_kexec_unload_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_kexec_unload_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_kexec_unload_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_kexec_unload_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_kexec_unload_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_kexec_unload_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_kexec_unload_t {
    pub p: *const xen_kexec_unload_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_kexec_unload_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_kexec_unload_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_kexec_unload_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_kexec_unload_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_kexec_unload_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_kexec_unload_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_status {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_xen_kexec_status() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_status>(),
        1usize,
        concat!("Size of: ", stringify!(xen_kexec_status))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_status>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_kexec_status))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_kexec_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_kexec_status),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
pub type xen_kexec_status_t = xen_kexec_status;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_kexec_status_t {
    pub p: *mut xen_kexec_status_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_kexec_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_kexec_status_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_kexec_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_kexec_status_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_kexec_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_kexec_status_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_kexec_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_kexec_status_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_kexec_status_t {
    pub p: *mut xen_kexec_status_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_kexec_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_kexec_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_kexec_status_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_kexec_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_kexec_status_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_kexec_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_kexec_status_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_kexec_status_t {
    pub p: *const xen_kexec_status_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_kexec_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_kexec_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_kexec_status_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_kexec_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_kexec_status_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_kexec_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_kexec_status_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_kexec_status_t {
    pub p: *const xen_kexec_status_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_kexec_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_kexec_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_kexec_status_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_kexec_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_kexec_status_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_kexec_status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_kexec_status_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_settime32 {
    pub secs: u32,
    pub nsecs: u32,
    pub system_time: u64,
}
#[test]
fn bindgen_test_layout_xenpf_settime32() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_settime32>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_settime32))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_settime32>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_settime32))
    );
    fn test_field_secs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_settime32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).secs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_settime32),
                "::",
                stringify!(secs)
            )
        );
    }
    test_field_secs();
    fn test_field_nsecs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_settime32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nsecs) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_settime32),
                "::",
                stringify!(nsecs)
            )
        );
    }
    test_field_nsecs();
    fn test_field_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_settime32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_settime32),
                "::",
                stringify!(system_time)
            )
        );
    }
    test_field_system_time();
}
pub type xenpf_settime32_t = xenpf_settime32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_settime64 {
    pub secs: u64,
    pub nsecs: u32,
    pub mbz: u32,
    pub system_time: u64,
}
#[test]
fn bindgen_test_layout_xenpf_settime64() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_settime64>(),
        24usize,
        concat!("Size of: ", stringify!(xenpf_settime64))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_settime64>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_settime64))
    );
    fn test_field_secs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_settime64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).secs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_settime64),
                "::",
                stringify!(secs)
            )
        );
    }
    test_field_secs();
    fn test_field_nsecs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_settime64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nsecs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_settime64),
                "::",
                stringify!(nsecs)
            )
        );
    }
    test_field_nsecs();
    fn test_field_mbz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_settime64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbz) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_settime64),
                "::",
                stringify!(mbz)
            )
        );
    }
    test_field_mbz();
    fn test_field_system_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_settime64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_settime64),
                "::",
                stringify!(system_time)
            )
        );
    }
    test_field_system_time();
}
pub type xenpf_settime64_t = xenpf_settime64;
pub type xenpf_settime_t = xenpf_settime64;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_settime_t {
    pub p: *mut xenpf_settime_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_settime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_settime_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_settime_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_settime_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xenpf_settime_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xenpf_settime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_settime_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xenpf_settime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_settime_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_settime_t {
    pub p: *mut xenpf_settime_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_settime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_settime_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xenpf_settime_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_settime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_settime_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_settime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_settime_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_settime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_settime_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_settime_t {
    pub p: *const xenpf_settime_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_settime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_settime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_settime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_settime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_settime_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_settime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_settime_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_settime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_settime_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_settime_t {
    pub p: *const xenpf_settime_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_settime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_settime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_settime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_settime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_settime_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_settime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_settime_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_settime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_settime_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_add_memtype {
    pub mfn: xen_pfn_t,
    pub nr_mfns: u64,
    pub type_: u32,
    pub handle: u32,
    pub reg: u32,
}
#[test]
fn bindgen_test_layout_xenpf_add_memtype() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_add_memtype>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_add_memtype))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_add_memtype>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_add_memtype))
    );
    fn test_field_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_add_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_add_memtype),
                "::",
                stringify!(mfn)
            )
        );
    }
    test_field_mfn();
    fn test_field_nr_mfns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_add_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_mfns) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_add_memtype),
                "::",
                stringify!(nr_mfns)
            )
        );
    }
    test_field_nr_mfns();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_add_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_add_memtype),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_add_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_add_memtype),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_add_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_add_memtype),
                "::",
                stringify!(reg)
            )
        );
    }
    test_field_reg();
}
pub type xenpf_add_memtype_t = xenpf_add_memtype;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_add_memtype_t {
    pub p: *mut xenpf_add_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_add_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_add_memtype_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_add_memtype_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_add_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_add_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_add_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_add_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_add_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_add_memtype_t {
    pub p: *mut xenpf_add_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_add_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_add_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_add_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_add_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_add_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_add_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_add_memtype_t {
    pub p: *const xenpf_add_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_add_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_add_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_add_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_add_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_add_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_add_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_add_memtype_t {
    pub p: *const xenpf_add_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_add_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_add_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_add_memtype_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_add_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_add_memtype_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_add_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_del_memtype {
    pub handle: u32,
    pub reg: u32,
}
#[test]
fn bindgen_test_layout_xenpf_del_memtype() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_del_memtype>(),
        8usize,
        concat!("Size of: ", stringify!(xenpf_del_memtype))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_del_memtype>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_del_memtype))
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_del_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_del_memtype),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_del_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_del_memtype),
                "::",
                stringify!(reg)
            )
        );
    }
    test_field_reg();
}
pub type xenpf_del_memtype_t = xenpf_del_memtype;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_del_memtype_t {
    pub p: *mut xenpf_del_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_del_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_del_memtype_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_del_memtype_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_del_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_del_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_del_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_del_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_del_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_del_memtype_t {
    pub p: *mut xenpf_del_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_del_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_del_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_del_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_del_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_del_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_del_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_del_memtype_t {
    pub p: *const xenpf_del_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_del_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_del_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_del_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_del_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_del_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_del_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_del_memtype_t {
    pub p: *const xenpf_del_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_del_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_del_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_del_memtype_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_del_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_del_memtype_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_del_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_read_memtype {
    pub reg: u32,
    pub mfn: xen_pfn_t,
    pub nr_mfns: u64,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_xenpf_read_memtype() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_read_memtype>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_read_memtype))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_read_memtype>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_read_memtype))
    );
    fn test_field_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_read_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_read_memtype),
                "::",
                stringify!(reg)
            )
        );
    }
    test_field_reg();
    fn test_field_mfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_read_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_read_memtype),
                "::",
                stringify!(mfn)
            )
        );
    }
    test_field_mfn();
    fn test_field_nr_mfns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_read_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_mfns) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_read_memtype),
                "::",
                stringify!(nr_mfns)
            )
        );
    }
    test_field_nr_mfns();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_read_memtype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_read_memtype),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
pub type xenpf_read_memtype_t = xenpf_read_memtype;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_read_memtype_t {
    pub p: *mut xenpf_read_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_read_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_read_memtype_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_read_memtype_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_read_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_read_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_read_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_read_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_read_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_read_memtype_t {
    pub p: *mut xenpf_read_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_read_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_read_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_read_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_read_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_read_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_read_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_read_memtype_t {
    pub p: *const xenpf_read_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_read_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_read_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_read_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_read_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_read_memtype_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_read_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_read_memtype_t {
    pub p: *const xenpf_read_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_read_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_read_memtype_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_read_memtype_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_read_memtype_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_read_memtype_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_read_memtype_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_microcode_update {
    pub data: __guest_handle_64_const_void,
    pub length: u32,
}
#[test]
fn bindgen_test_layout_xenpf_microcode_update() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_microcode_update>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_microcode_update))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_microcode_update>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_microcode_update))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_microcode_update>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_microcode_update),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_microcode_update>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_microcode_update),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
}
pub type xenpf_microcode_update_t = xenpf_microcode_update;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_microcode_update_t {
    pub p: *mut xenpf_microcode_update_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_microcode_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_microcode_update_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_microcode_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_microcode_update_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_microcode_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_microcode_update_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_microcode_update_t {
    pub p: *mut xenpf_microcode_update_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_microcode_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_microcode_update_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_microcode_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_microcode_update_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_microcode_update_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_microcode_update_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_microcode_update_t {
    pub p: *const xenpf_microcode_update_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_microcode_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_microcode_update_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xenpf_microcode_update_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_microcode_update_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xenpf_microcode_update_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_microcode_update_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_microcode_update_t {
    pub p: *const xenpf_microcode_update_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_microcode_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_microcode_update_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_microcode_update_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_microcode_update_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_microcode_update_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_microcode_update_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_platform_quirk {
    pub quirk_id: u32,
}
#[test]
fn bindgen_test_layout_xenpf_platform_quirk() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_platform_quirk>(),
        4usize,
        concat!("Size of: ", stringify!(xenpf_platform_quirk))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_platform_quirk>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_platform_quirk))
    );
    fn test_field_quirk_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_platform_quirk>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quirk_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_platform_quirk),
                "::",
                stringify!(quirk_id)
            )
        );
    }
    test_field_quirk_id();
}
pub type xenpf_platform_quirk_t = xenpf_platform_quirk;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_platform_quirk_t {
    pub p: *mut xenpf_platform_quirk_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_platform_quirk_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_platform_quirk_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_platform_quirk_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_platform_quirk_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_platform_quirk_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_platform_quirk_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_platform_quirk_t {
    pub p: *mut xenpf_platform_quirk_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_platform_quirk_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_platform_quirk_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_platform_quirk_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_platform_quirk_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_platform_quirk_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_platform_quirk_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_platform_quirk_t {
    pub p: *const xenpf_platform_quirk_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_platform_quirk_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_platform_quirk_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_platform_quirk_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_platform_quirk_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_platform_quirk_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_platform_quirk_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_platform_quirk_t {
    pub p: *const xenpf_platform_quirk_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_platform_quirk_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_platform_quirk_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_platform_quirk_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_platform_quirk_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_platform_quirk_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_platform_quirk_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_time {
    pub year: u16,
    pub month: u8,
    pub day: u8,
    pub hour: u8,
    pub min: u8,
    pub sec: u8,
    pub ns: u32,
    pub tz: i16,
    pub daylight: u8,
}
#[test]
fn bindgen_test_layout_xenpf_efi_time() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_time>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_efi_time))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_time>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_efi_time))
    );
    fn test_field_year() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_time),
                "::",
                stringify!(year)
            )
        );
    }
    test_field_year();
    fn test_field_month() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_time),
                "::",
                stringify!(month)
            )
        );
    }
    test_field_month();
    fn test_field_day() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_time),
                "::",
                stringify!(day)
            )
        );
    }
    test_field_day();
    fn test_field_hour() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_time),
                "::",
                stringify!(hour)
            )
        );
    }
    test_field_hour();
    fn test_field_min() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_time),
                "::",
                stringify!(min)
            )
        );
    }
    test_field_min();
    fn test_field_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_time),
                "::",
                stringify!(sec)
            )
        );
    }
    test_field_sec();
    fn test_field_ns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ns) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_time),
                "::",
                stringify!(ns)
            )
        );
    }
    test_field_ns();
    fn test_field_tz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tz) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_time),
                "::",
                stringify!(tz)
            )
        );
    }
    test_field_tz();
    fn test_field_daylight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_time>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).daylight) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_time),
                "::",
                stringify!(daylight)
            )
        );
    }
    test_field_daylight();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_guid {
    pub data1: u32,
    pub data2: u16,
    pub data3: u16,
    pub data4: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_xenpf_efi_guid() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_guid>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_efi_guid))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_guid>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_efi_guid))
    );
    fn test_field_data1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_guid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_guid),
                "::",
                stringify!(data1)
            )
        );
    }
    test_field_data1();
    fn test_field_data2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_guid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_guid),
                "::",
                stringify!(data2)
            )
        );
    }
    test_field_data2();
    fn test_field_data3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_guid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_guid),
                "::",
                stringify!(data3)
            )
        );
    }
    test_field_data3();
    fn test_field_data4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_guid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_guid),
                "::",
                stringify!(data4)
            )
        );
    }
    test_field_data4();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call {
    pub function: u32,
    pub misc: u32,
    pub status: xen_ulong_t,
    pub u: xenpf_efi_runtime_call__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_efi_runtime_call__bindgen_ty_1 {
    pub get_time: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1,
    pub set_time: xenpf_efi_time,
    pub get_wakeup_time: xenpf_efi_time,
    pub set_wakeup_time: xenpf_efi_time,
    pub get_variable: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
    pub set_variable: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
    pub get_next_variable_name: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3,
    pub query_variable_info: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
    pub query_capsule_capabilities: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
    pub update_capsule: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1 {
    pub time: xenpf_efi_time,
    pub resolution: u32,
    pub accuracy: u32,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_resolution() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).resolution) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(resolution)
            )
        );
    }
    test_field_resolution();
    fn test_field_accuracy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).accuracy) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(accuracy)
            )
        );
    }
    test_field_accuracy();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2 {
    pub name: __guest_handle_64_void,
    pub size: xen_ulong_t,
    pub data: __guest_handle_64_void,
    pub vendor_guid: xenpf_efi_guid,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_vendor_guid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vendor_guid) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(vendor_guid)
            )
        );
    }
    test_field_vendor_guid();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3 {
    pub size: xen_ulong_t,
    pub name: __guest_handle_64_void,
    pub vendor_guid: xenpf_efi_guid,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3)
        )
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_vendor_guid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vendor_guid) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(vendor_guid)
            )
        );
    }
    test_field_vendor_guid();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4 {
    pub attr: u32,
    pub max_store_size: u64,
    pub remain_store_size: u64,
    pub max_size: u64,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4)
        )
    );
    fn test_field_attr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(attr)
            )
        );
    }
    test_field_attr();
    fn test_field_max_store_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_store_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(max_store_size)
            )
        );
    }
    test_field_max_store_size();
    fn test_field_remain_store_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remain_store_size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(remain_store_size)
            )
        );
    }
    test_field_remain_store_size();
    fn test_field_max_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(max_size)
            )
        );
    }
    test_field_max_size();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5 {
    pub capsule_header_array: __guest_handle_64_void,
    pub capsule_count: xen_ulong_t,
    pub max_capsule_size: u64,
    pub reset_type: u32,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5)
        )
    );
    fn test_field_capsule_header_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).capsule_header_array) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(capsule_header_array)
            )
        );
    }
    test_field_capsule_header_array();
    fn test_field_capsule_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).capsule_count) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(capsule_count)
            )
        );
    }
    test_field_capsule_count();
    fn test_field_max_capsule_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_capsule_size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(max_capsule_size)
            )
        );
    }
    test_field_max_capsule_size();
    fn test_field_reset_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reset_type) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(reset_type)
            )
        );
    }
    test_field_reset_type();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6 {
    pub capsule_header_array: __guest_handle_64_void,
    pub capsule_count: xen_ulong_t,
    pub sg_list: u64,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6)
        )
    );
    fn test_field_capsule_header_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).capsule_header_array) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6),
                "::",
                stringify!(capsule_header_array)
            )
        );
    }
    test_field_capsule_header_array();
    fn test_field_capsule_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).capsule_count) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6),
                "::",
                stringify!(capsule_count)
            )
        );
    }
    test_field_capsule_count();
    fn test_field_sg_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sg_list) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6),
                "::",
                stringify!(sg_list)
            )
        );
    }
    test_field_sg_list();
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1)
        )
    );
    fn test_field_get_time() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_time) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(get_time)
            )
        );
    }
    test_field_get_time();
    fn test_field_set_time() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_time) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(set_time)
            )
        );
    }
    test_field_set_time();
    fn test_field_get_wakeup_time() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_wakeup_time) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(get_wakeup_time)
            )
        );
    }
    test_field_get_wakeup_time();
    fn test_field_set_wakeup_time() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_wakeup_time) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(set_wakeup_time)
            )
        );
    }
    test_field_set_wakeup_time();
    fn test_field_get_variable() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_variable) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(get_variable)
            )
        );
    }
    test_field_get_variable();
    fn test_field_set_variable() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_variable) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(set_variable)
            )
        );
    }
    test_field_set_variable();
    fn test_field_get_next_variable_name() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_next_variable_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(get_next_variable_name)
            )
        );
    }
    test_field_get_next_variable_name();
    fn test_field_query_variable_info() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).query_variable_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(query_variable_info)
            )
        );
    }
    test_field_query_variable_info();
    fn test_field_query_capsule_capabilities() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).query_capsule_capabilities) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(query_capsule_capabilities)
            )
        );
    }
    test_field_query_capsule_capabilities();
    fn test_field_update_capsule() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_efi_runtime_call__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).update_capsule) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
                "::",
                stringify!(update_capsule)
            )
        );
    }
    test_field_update_capsule();
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call>(),
        56usize,
        concat!("Size of: ", stringify!(xenpf_efi_runtime_call))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_efi_runtime_call))
    );
    fn test_field_function() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_runtime_call>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call),
                "::",
                stringify!(function)
            )
        );
    }
    test_field_function();
    fn test_field_misc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_runtime_call>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).misc) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call),
                "::",
                stringify!(misc)
            )
        );
    }
    test_field_misc();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_runtime_call>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_efi_runtime_call>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_efi_runtime_call),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type xenpf_efi_runtime_call_t = xenpf_efi_runtime_call;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_efi_runtime_call_t {
    pub p: *mut xenpf_efi_runtime_call_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_efi_runtime_call_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_efi_runtime_call_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_efi_runtime_call_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_efi_runtime_call_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_efi_runtime_call_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_efi_runtime_call_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_efi_runtime_call_t {
    pub p: *mut xenpf_efi_runtime_call_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_efi_runtime_call_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_efi_runtime_call_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_efi_runtime_call_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_efi_runtime_call_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_efi_runtime_call_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_efi_runtime_call_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_efi_runtime_call_t {
    pub p: *const xenpf_efi_runtime_call_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_efi_runtime_call_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_efi_runtime_call_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xenpf_efi_runtime_call_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_efi_runtime_call_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xenpf_efi_runtime_call_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_efi_runtime_call_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_efi_runtime_call_t {
    pub p: *const xenpf_efi_runtime_call_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_efi_runtime_call_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_efi_runtime_call_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_efi_runtime_call_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_efi_runtime_call_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_efi_runtime_call_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_efi_runtime_call_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info {
    pub type_: u32,
    pub index: u32,
    pub u: xenpf_firmware_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_firmware_info__bindgen_ty_1 {
    pub disk_info: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
    pub disk_mbr_signature: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2,
    pub vbeddc_info: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3,
    pub efi_info: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
    pub kbd_shift_flags: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1 {
    pub device: u8,
    pub version: u8,
    pub interface_support: u16,
    pub legacy_max_cylinder: u16,
    pub legacy_max_head: u8,
    pub legacy_sectors_per_track: u8,
    pub edd_params: __guest_handle_64_void,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_device() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(device)
            )
        );
    }
    test_field_device();
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_interface_support() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interface_support) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(interface_support)
            )
        );
    }
    test_field_interface_support();
    fn test_field_legacy_max_cylinder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).legacy_max_cylinder) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(legacy_max_cylinder)
            )
        );
    }
    test_field_legacy_max_cylinder();
    fn test_field_legacy_max_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).legacy_max_head) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(legacy_max_head)
            )
        );
    }
    test_field_legacy_max_head();
    fn test_field_legacy_sectors_per_track() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).legacy_sectors_per_track) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(legacy_sectors_per_track)
            )
        );
    }
    test_field_legacy_sectors_per_track();
    fn test_field_edd_params() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).edd_params) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(edd_params)
            )
        );
    }
    test_field_edd_params();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2 {
    pub device: u8,
    pub mbr_signature: u32,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_device() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(device)
            )
        );
    }
    test_field_device();
    fn test_field_mbr_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbr_signature) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(mbr_signature)
            )
        );
    }
    test_field_mbr_signature();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3 {
    pub capabilities: u8,
    pub edid_transfer_time: u8,
    pub edid: __guest_handle_64_uint8,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3)
        )
    );
    fn test_field_capabilities() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(capabilities)
            )
        );
    }
    test_field_capabilities();
    fn test_field_edid_transfer_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).edid_transfer_time) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(edid_transfer_time)
            )
        );
    }
    test_field_edid_transfer_time();
    fn test_field_edid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).edid) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(edid)
            )
        );
    }
    test_field_edid();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info {
    pub version: u32,
    pub cfg: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1,
    pub vendor: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
    pub mem: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
    pub pci_rom: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
    pub apple_properties: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1 {
    pub addr: u64,
    pub nent: u32,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1)
        )
    );
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
    fn test_field_nent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nent) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1),
                "::",
                stringify!(nent)
            )
        );
    }
    test_field_nent();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2 {
    pub revision: u32,
    pub bufsz: u32,
    pub name: __guest_handle_64_void,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2)
        )
    );
    fn test_field_revision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2),
                "::",
                stringify!(revision)
            )
        );
    }
    test_field_revision();
    fn test_field_bufsz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufsz) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2),
                "::",
                stringify!(bufsz)
            )
        );
    }
    test_field_bufsz();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3 {
    pub addr: u64,
    pub size: u64,
    pub attr: u64,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3)
        )
    );
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_attr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3),
                "::",
                stringify!(attr)
            )
        );
    }
    test_field_attr();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4 {
    pub segment: u16,
    pub bus: u8,
    pub devfn: u8,
    pub vendor: u16,
    pub devid: u16,
    pub address: u64,
    pub size: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4)
        )
    );
    fn test_field_segment() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).segment) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
                "::",
                stringify!(segment)
            )
        );
    }
    test_field_segment();
    fn test_field_bus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
                "::",
                stringify!(bus)
            )
        );
    }
    test_field_bus();
    fn test_field_devfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devfn) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
                "::",
                stringify!(devfn)
            )
        );
    }
    test_field_devfn();
    fn test_field_vendor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vendor) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
                "::",
                stringify!(vendor)
            )
        );
    }
    test_field_vendor();
    fn test_field_devid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devid) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
                "::",
                stringify!(devid)
            )
        );
    }
    test_field_devid();
    fn test_field_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
                "::",
                stringify!(address)
            )
        );
    }
    test_field_address();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5 {
    pub address: u64,
    pub size: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5)
        )
    );
    fn test_field_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5),
                "::",
                stringify!(address)
            )
        );
    }
    test_field_address();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info)
        )
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
                "::",
                stringify!(cfg)
            )
        );
    }
    test_field_cfg();
    fn test_field_vendor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vendor) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
                "::",
                stringify!(vendor)
            )
        );
    }
    test_field_vendor();
    fn test_field_mem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
                "::",
                stringify!(mem)
            )
        );
    }
    test_field_mem();
    fn test_field_pci_rom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pci_rom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
                "::",
                stringify!(pci_rom)
            )
        );
    }
    test_field_pci_rom();
    fn test_field_apple_properties() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).apple_properties) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
                "::",
                stringify!(apple_properties)
            )
        );
    }
    test_field_apple_properties();
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_firmware_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1)
        )
    );
    fn test_field_disk_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_firmware_info__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disk_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1),
                "::",
                stringify!(disk_info)
            )
        );
    }
    test_field_disk_info();
    fn test_field_disk_mbr_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_firmware_info__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disk_mbr_signature) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1),
                "::",
                stringify!(disk_mbr_signature)
            )
        );
    }
    test_field_disk_mbr_signature();
    fn test_field_vbeddc_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_firmware_info__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vbeddc_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1),
                "::",
                stringify!(vbeddc_info)
            )
        );
    }
    test_field_vbeddc_info();
    fn test_field_efi_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_firmware_info__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efi_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1),
                "::",
                stringify!(efi_info)
            )
        );
    }
    test_field_efi_info();
    fn test_field_kbd_shift_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_firmware_info__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kbd_shift_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info__bindgen_ty_1),
                "::",
                stringify!(kbd_shift_flags)
            )
        );
    }
    test_field_kbd_shift_flags();
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info>(),
        40usize,
        concat!("Size of: ", stringify!(xenpf_firmware_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_firmware_info))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_firmware_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_firmware_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_firmware_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_firmware_info),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type xenpf_firmware_info_t = xenpf_firmware_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_firmware_info_t {
    pub p: *mut xenpf_firmware_info_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_firmware_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_firmware_info_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_firmware_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_firmware_info_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_firmware_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_firmware_info_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_firmware_info_t {
    pub p: *mut xenpf_firmware_info_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_firmware_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_firmware_info_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_firmware_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_firmware_info_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_firmware_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_firmware_info_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_firmware_info_t {
    pub p: *const xenpf_firmware_info_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_firmware_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_firmware_info_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_firmware_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_firmware_info_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_firmware_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_firmware_info_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_firmware_info_t {
    pub p: *const xenpf_firmware_info_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_firmware_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_firmware_info_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_const_xenpf_firmware_info_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_firmware_info_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_const_xenpf_firmware_info_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_firmware_info_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_enter_acpi_sleep {
    pub val_a: u16,
    pub val_b: u16,
    pub sleep_state: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xenpf_enter_acpi_sleep() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_enter_acpi_sleep>(),
        12usize,
        concat!("Size of: ", stringify!(xenpf_enter_acpi_sleep))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_enter_acpi_sleep>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_enter_acpi_sleep))
    );
    fn test_field_val_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_enter_acpi_sleep>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val_a) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_enter_acpi_sleep),
                "::",
                stringify!(val_a)
            )
        );
    }
    test_field_val_a();
    fn test_field_val_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_enter_acpi_sleep>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val_b) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_enter_acpi_sleep),
                "::",
                stringify!(val_b)
            )
        );
    }
    test_field_val_b();
    fn test_field_sleep_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_enter_acpi_sleep>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sleep_state) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_enter_acpi_sleep),
                "::",
                stringify!(sleep_state)
            )
        );
    }
    test_field_sleep_state();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_enter_acpi_sleep>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_enter_acpi_sleep),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
pub type xenpf_enter_acpi_sleep_t = xenpf_enter_acpi_sleep;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_enter_acpi_sleep_t {
    pub p: *mut xenpf_enter_acpi_sleep_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_enter_acpi_sleep_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_enter_acpi_sleep_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_enter_acpi_sleep_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_enter_acpi_sleep_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_enter_acpi_sleep_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_enter_acpi_sleep_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_enter_acpi_sleep_t {
    pub p: *mut xenpf_enter_acpi_sleep_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_enter_acpi_sleep_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_enter_acpi_sleep_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_enter_acpi_sleep_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_enter_acpi_sleep_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_enter_acpi_sleep_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_enter_acpi_sleep_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_enter_acpi_sleep_t {
    pub p: *const xenpf_enter_acpi_sleep_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_enter_acpi_sleep_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_enter_acpi_sleep_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xenpf_enter_acpi_sleep_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_enter_acpi_sleep_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_const_xenpf_enter_acpi_sleep_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_enter_acpi_sleep_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_enter_acpi_sleep_t {
    pub p: *const xenpf_enter_acpi_sleep_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_enter_acpi_sleep_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_enter_acpi_sleep_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_enter_acpi_sleep_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_enter_acpi_sleep_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_enter_acpi_sleep_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_enter_acpi_sleep_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_change_freq {
    pub flags: u32,
    pub cpu: u32,
    pub freq: u64,
}
#[test]
fn bindgen_test_layout_xenpf_change_freq() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_change_freq>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_change_freq))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_change_freq>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_change_freq))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_change_freq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_change_freq),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_change_freq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_change_freq),
                "::",
                stringify!(cpu)
            )
        );
    }
    test_field_cpu();
    fn test_field_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_change_freq>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_change_freq),
                "::",
                stringify!(freq)
            )
        );
    }
    test_field_freq();
}
pub type xenpf_change_freq_t = xenpf_change_freq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_change_freq_t {
    pub p: *mut xenpf_change_freq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_change_freq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_change_freq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_change_freq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_change_freq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_change_freq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_change_freq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_change_freq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_change_freq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_change_freq_t {
    pub p: *mut xenpf_change_freq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_change_freq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_change_freq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_change_freq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_change_freq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_change_freq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_change_freq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_change_freq_t {
    pub p: *const xenpf_change_freq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_change_freq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_change_freq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_change_freq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_change_freq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_change_freq_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_change_freq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_change_freq_t {
    pub p: *const xenpf_change_freq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_change_freq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_change_freq_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_change_freq_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_change_freq_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_change_freq_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_change_freq_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_getidletime {
    pub cpumap_bitmap: __guest_handle_64_uint8,
    pub cpumap_nr_cpus: u32,
    pub idletime: __guest_handle_64_uint64,
    pub now: u64,
}
#[test]
fn bindgen_test_layout_xenpf_getidletime() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_getidletime>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_getidletime))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_getidletime>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_getidletime))
    );
    fn test_field_cpumap_bitmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_getidletime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpumap_bitmap) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_getidletime),
                "::",
                stringify!(cpumap_bitmap)
            )
        );
    }
    test_field_cpumap_bitmap();
    fn test_field_cpumap_nr_cpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_getidletime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpumap_nr_cpus) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_getidletime),
                "::",
                stringify!(cpumap_nr_cpus)
            )
        );
    }
    test_field_cpumap_nr_cpus();
    fn test_field_idletime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_getidletime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idletime) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_getidletime),
                "::",
                stringify!(idletime)
            )
        );
    }
    test_field_idletime();
    fn test_field_now() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_getidletime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).now) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_getidletime),
                "::",
                stringify!(now)
            )
        );
    }
    test_field_now();
}
pub type xenpf_getidletime_t = xenpf_getidletime;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_getidletime_t {
    pub p: *mut xenpf_getidletime_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_getidletime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_getidletime_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_getidletime_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_getidletime_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_getidletime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_getidletime_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_getidletime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_getidletime_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_getidletime_t {
    pub p: *mut xenpf_getidletime_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_getidletime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_getidletime_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_getidletime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_getidletime_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_getidletime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_getidletime_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_getidletime_t {
    pub p: *const xenpf_getidletime_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_getidletime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_getidletime_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_getidletime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_getidletime_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_getidletime_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_getidletime_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_getidletime_t {
    pub p: *const xenpf_getidletime_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_getidletime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_getidletime_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_getidletime_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_getidletime_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_getidletime_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_getidletime_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_power_register {
    pub space_id: u32,
    pub bit_width: u32,
    pub bit_offset: u32,
    pub access_size: u32,
    pub address: u64,
}
#[test]
fn bindgen_test_layout_xen_power_register() {
    assert_eq!(
        ::std::mem::size_of::<xen_power_register>(),
        24usize,
        concat!("Size of: ", stringify!(xen_power_register))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_power_register>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_power_register))
    );
    fn test_field_space_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_power_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).space_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_power_register),
                "::",
                stringify!(space_id)
            )
        );
    }
    test_field_space_id();
    fn test_field_bit_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_power_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bit_width) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_power_register),
                "::",
                stringify!(bit_width)
            )
        );
    }
    test_field_bit_width();
    fn test_field_bit_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_power_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bit_offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_power_register),
                "::",
                stringify!(bit_offset)
            )
        );
    }
    test_field_bit_offset();
    fn test_field_access_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_power_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).access_size) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_power_register),
                "::",
                stringify!(access_size)
            )
        );
    }
    test_field_access_size();
    fn test_field_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_power_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_power_register),
                "::",
                stringify!(address)
            )
        );
    }
    test_field_address();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_csd {
    pub domain: u32,
    pub coord_type: u32,
    pub num: u32,
}
#[test]
fn bindgen_test_layout_xen_processor_csd() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_csd>(),
        12usize,
        concat!("Size of: ", stringify!(xen_processor_csd))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_csd>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_processor_csd))
    );
    fn test_field_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_csd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_csd),
                "::",
                stringify!(domain)
            )
        );
    }
    test_field_domain();
    fn test_field_coord_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_csd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).coord_type) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_csd),
                "::",
                stringify!(coord_type)
            )
        );
    }
    test_field_coord_type();
    fn test_field_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_csd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_csd),
                "::",
                stringify!(num)
            )
        );
    }
    test_field_num();
}
pub type xen_processor_csd_t = xen_processor_csd;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_processor_csd_t {
    pub p: *mut xen_processor_csd_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_processor_csd_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_processor_csd_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_processor_csd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_processor_csd_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_processor_csd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_processor_csd_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_processor_csd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_processor_csd_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_processor_csd_t {
    pub p: *mut xen_processor_csd_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_processor_csd_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_processor_csd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_processor_csd_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_processor_csd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_processor_csd_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_processor_csd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_processor_csd_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_processor_csd_t {
    pub p: *const xen_processor_csd_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_processor_csd_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_processor_csd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_processor_csd_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_processor_csd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_processor_csd_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_processor_csd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_processor_csd_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_processor_csd_t {
    pub p: *const xen_processor_csd_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_processor_csd_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_processor_csd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_processor_csd_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_processor_csd_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_processor_csd_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_processor_csd_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_processor_csd_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_processor_cx {
    pub reg: xen_power_register,
    pub type_: u8,
    pub latency: u32,
    pub power: u32,
    pub dpcnt: u32,
    pub dp: __guest_handle_64_xen_processor_csd_t,
}
#[test]
fn bindgen_test_layout_xen_processor_cx() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_cx>(),
        48usize,
        concat!("Size of: ", stringify!(xen_processor_cx))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_cx>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_processor_cx))
    );
    fn test_field_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_cx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_cx),
                "::",
                stringify!(reg)
            )
        );
    }
    test_field_reg();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_cx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_cx),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_latency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_cx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).latency) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_cx),
                "::",
                stringify!(latency)
            )
        );
    }
    test_field_latency();
    fn test_field_power() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_cx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_cx),
                "::",
                stringify!(power)
            )
        );
    }
    test_field_power();
    fn test_field_dpcnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_cx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dpcnt) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_cx),
                "::",
                stringify!(dpcnt)
            )
        );
    }
    test_field_dpcnt();
    fn test_field_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_cx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dp) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_cx),
                "::",
                stringify!(dp)
            )
        );
    }
    test_field_dp();
}
pub type xen_processor_cx_t = xen_processor_cx;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_processor_cx_t {
    pub p: *mut xen_processor_cx_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_processor_cx_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_processor_cx_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_processor_cx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_processor_cx_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_processor_cx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_processor_cx_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_processor_cx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_processor_cx_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_processor_cx_t {
    pub p: *mut xen_processor_cx_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_processor_cx_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_processor_cx_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_processor_cx_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_processor_cx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_processor_cx_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_processor_cx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_processor_cx_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_processor_cx_t {
    pub p: *const xen_processor_cx_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_processor_cx_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_processor_cx_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_processor_cx_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_processor_cx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_processor_cx_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_processor_cx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_processor_cx_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_processor_cx_t {
    pub p: *const xen_processor_cx_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_processor_cx_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_processor_cx_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_processor_cx_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_processor_cx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_processor_cx_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_processor_cx_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_processor_cx_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_flags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_xen_processor_flags() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_flags>(),
        4usize,
        concat!("Size of: ", stringify!(xen_processor_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_processor_flags))
    );
}
impl xen_processor_flags {
    #[inline]
    pub fn bm_control(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_control(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bm_check(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_check(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_cst(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_cst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn power_setup_done(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_power_setup_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bm_rld_set(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_rld_set(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bm_control: u32,
        bm_check: u32,
        has_cst: u32,
        power_setup_done: u32,
        bm_rld_set: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bm_control: u32 = unsafe { ::std::mem::transmute(bm_control) };
            bm_control as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bm_check: u32 = unsafe { ::std::mem::transmute(bm_check) };
            bm_check as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let has_cst: u32 = unsafe { ::std::mem::transmute(has_cst) };
            has_cst as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let power_setup_done: u32 = unsafe { ::std::mem::transmute(power_setup_done) };
            power_setup_done as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bm_rld_set: u32 = unsafe { ::std::mem::transmute(bm_rld_set) };
            bm_rld_set as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_processor_power {
    pub count: u32,
    pub flags: xen_processor_flags,
    pub states: __guest_handle_64_xen_processor_cx_t,
}
#[test]
fn bindgen_test_layout_xen_processor_power() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_power>(),
        16usize,
        concat!("Size of: ", stringify!(xen_processor_power))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_power>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_processor_power))
    );
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_power>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_power),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_power>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_power),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_states() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_power>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).states) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_power),
                "::",
                stringify!(states)
            )
        );
    }
    test_field_states();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_pct_register {
    pub descriptor: u8,
    pub length: u16,
    pub space_id: u8,
    pub bit_width: u8,
    pub bit_offset: u8,
    pub reserved: u8,
    pub address: u64,
}
#[test]
fn bindgen_test_layout_xen_pct_register() {
    assert_eq!(
        ::std::mem::size_of::<xen_pct_register>(),
        16usize,
        concat!("Size of: ", stringify!(xen_pct_register))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_pct_register>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_pct_register))
    );
    fn test_field_descriptor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pct_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).descriptor) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pct_register),
                "::",
                stringify!(descriptor)
            )
        );
    }
    test_field_descriptor();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pct_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pct_register),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_space_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pct_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).space_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pct_register),
                "::",
                stringify!(space_id)
            )
        );
    }
    test_field_space_id();
    fn test_field_bit_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pct_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bit_width) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pct_register),
                "::",
                stringify!(bit_width)
            )
        );
    }
    test_field_bit_width();
    fn test_field_bit_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pct_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bit_offset) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pct_register),
                "::",
                stringify!(bit_offset)
            )
        );
    }
    test_field_bit_offset();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pct_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pct_register),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
    fn test_field_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_pct_register>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_pct_register),
                "::",
                stringify!(address)
            )
        );
    }
    test_field_address();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_px {
    pub core_frequency: u64,
    pub power: u64,
    pub transition_latency: u64,
    pub bus_master_latency: u64,
    pub control: u64,
    pub status: u64,
}
#[test]
fn bindgen_test_layout_xen_processor_px() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_px>(),
        48usize,
        concat!("Size of: ", stringify!(xen_processor_px))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_px>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_processor_px))
    );
    fn test_field_core_frequency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_px>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).core_frequency) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_px),
                "::",
                stringify!(core_frequency)
            )
        );
    }
    test_field_core_frequency();
    fn test_field_power() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_px>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_px),
                "::",
                stringify!(power)
            )
        );
    }
    test_field_power();
    fn test_field_transition_latency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_px>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transition_latency) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_px),
                "::",
                stringify!(transition_latency)
            )
        );
    }
    test_field_transition_latency();
    fn test_field_bus_master_latency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_px>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bus_master_latency) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_px),
                "::",
                stringify!(bus_master_latency)
            )
        );
    }
    test_field_bus_master_latency();
    fn test_field_control() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_px>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).control) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_px),
                "::",
                stringify!(control)
            )
        );
    }
    test_field_control();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_px>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_px),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
pub type xen_processor_px_t = xen_processor_px;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_processor_px_t {
    pub p: *mut xen_processor_px_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_processor_px_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_processor_px_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_processor_px_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_processor_px_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_processor_px_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_processor_px_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_processor_px_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_processor_px_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_processor_px_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_processor_px_t {
    pub p: *mut xen_processor_px_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_processor_px_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_processor_px_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_processor_px_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_processor_px_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_processor_px_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_processor_px_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_processor_px_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_processor_px_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_processor_px_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_processor_px_t {
    pub p: *const xen_processor_px_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_processor_px_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_processor_px_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_processor_px_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_processor_px_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_processor_px_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_processor_px_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_processor_px_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_processor_px_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_processor_px_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_processor_px_t {
    pub p: *const xen_processor_px_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_processor_px_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_processor_px_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_processor_px_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_processor_px_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_processor_px_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_processor_px_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_processor_px_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_processor_px_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_processor_px_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_psd_package {
    pub num_entries: u64,
    pub revision: u64,
    pub domain: u64,
    pub coord_type: u64,
    pub num_processors: u64,
}
#[test]
fn bindgen_test_layout_xen_psd_package() {
    assert_eq!(
        ::std::mem::size_of::<xen_psd_package>(),
        40usize,
        concat!("Size of: ", stringify!(xen_psd_package))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_psd_package>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_psd_package))
    );
    fn test_field_num_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_psd_package>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_psd_package),
                "::",
                stringify!(num_entries)
            )
        );
    }
    test_field_num_entries();
    fn test_field_revision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_psd_package>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_psd_package),
                "::",
                stringify!(revision)
            )
        );
    }
    test_field_revision();
    fn test_field_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_psd_package>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_psd_package),
                "::",
                stringify!(domain)
            )
        );
    }
    test_field_domain();
    fn test_field_coord_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_psd_package>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).coord_type) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_psd_package),
                "::",
                stringify!(coord_type)
            )
        );
    }
    test_field_coord_type();
    fn test_field_num_processors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_psd_package>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_processors) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_psd_package),
                "::",
                stringify!(num_processors)
            )
        );
    }
    test_field_num_processors();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_processor_performance {
    pub flags: u32,
    pub platform_limit: u32,
    pub control_register: xen_pct_register,
    pub status_register: xen_pct_register,
    pub state_count: u32,
    pub states: __guest_handle_64_xen_processor_px_t,
    pub domain_info: xen_psd_package,
    pub shared_type: u32,
}
#[test]
fn bindgen_test_layout_xen_processor_performance() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_performance>(),
        104usize,
        concat!("Size of: ", stringify!(xen_processor_performance))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_performance>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_processor_performance))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_performance>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_performance),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_platform_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_performance>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).platform_limit) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_performance),
                "::",
                stringify!(platform_limit)
            )
        );
    }
    test_field_platform_limit();
    fn test_field_control_register() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_performance>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).control_register) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_performance),
                "::",
                stringify!(control_register)
            )
        );
    }
    test_field_control_register();
    fn test_field_status_register() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_performance>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status_register) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_performance),
                "::",
                stringify!(status_register)
            )
        );
    }
    test_field_status_register();
    fn test_field_state_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_performance>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state_count) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_performance),
                "::",
                stringify!(state_count)
            )
        );
    }
    test_field_state_count();
    fn test_field_states() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_performance>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).states) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_performance),
                "::",
                stringify!(states)
            )
        );
    }
    test_field_states();
    fn test_field_domain_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_performance>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain_info) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_performance),
                "::",
                stringify!(domain_info)
            )
        );
    }
    test_field_domain_info();
    fn test_field_shared_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_processor_performance>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shared_type) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_processor_performance),
                "::",
                stringify!(shared_type)
            )
        );
    }
    test_field_shared_type();
}
pub type xen_processor_performance_t = xen_processor_performance;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_processor_performance_t {
    pub p: *mut xen_processor_performance_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_processor_performance_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_processor_performance_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_processor_performance_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_processor_performance_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_processor_performance_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xen_processor_performance_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_processor_performance_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_processor_performance_t {
    pub p: *mut xen_processor_performance_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_processor_performance_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_processor_performance_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_processor_performance_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_xen_processor_performance_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_processor_performance_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = :: std :: mem :: MaybeUninit :: < __guest_handle_64_xen_processor_performance_t > :: uninit () ;
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_processor_performance_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_processor_performance_t {
    pub p: *const xen_processor_performance_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_processor_performance_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_processor_performance_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_processor_performance_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_processor_performance_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_processor_performance_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xen_processor_performance_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_processor_performance_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_processor_performance_t {
    pub p: *const xen_processor_performance_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_processor_performance_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_processor_performance_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_processor_performance_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_processor_performance_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_processor_performance_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xen_processor_performance_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_processor_performance_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_set_processor_pminfo {
    pub id: u32,
    pub type_: u32,
    pub u: xenpf_set_processor_pminfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_set_processor_pminfo__bindgen_ty_1 {
    pub power: xen_processor_power,
    pub perf: xen_processor_performance,
    pub pdc: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xenpf_set_processor_pminfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_set_processor_pminfo__bindgen_ty_1>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_set_processor_pminfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_set_processor_pminfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_set_processor_pminfo__bindgen_ty_1)
        )
    );
    fn test_field_power() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_set_processor_pminfo__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_set_processor_pminfo__bindgen_ty_1),
                "::",
                stringify!(power)
            )
        );
    }
    test_field_power();
    fn test_field_perf() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_set_processor_pminfo__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).perf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_set_processor_pminfo__bindgen_ty_1),
                "::",
                stringify!(perf)
            )
        );
    }
    test_field_perf();
    fn test_field_pdc() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_set_processor_pminfo__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pdc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_set_processor_pminfo__bindgen_ty_1),
                "::",
                stringify!(pdc)
            )
        );
    }
    test_field_pdc();
}
#[test]
fn bindgen_test_layout_xenpf_set_processor_pminfo() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_set_processor_pminfo>(),
        112usize,
        concat!("Size of: ", stringify!(xenpf_set_processor_pminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_set_processor_pminfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_set_processor_pminfo))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_set_processor_pminfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_set_processor_pminfo),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_set_processor_pminfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_set_processor_pminfo),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_set_processor_pminfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_set_processor_pminfo),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type xenpf_set_processor_pminfo_t = xenpf_set_processor_pminfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_set_processor_pminfo_t {
    pub p: *mut xenpf_set_processor_pminfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_set_processor_pminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_set_processor_pminfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_set_processor_pminfo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_set_processor_pminfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_set_processor_pminfo_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_set_processor_pminfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_set_processor_pminfo_t {
    pub p: *mut xenpf_set_processor_pminfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_set_processor_pminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_set_processor_pminfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xenpf_set_processor_pminfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_set_processor_pminfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_xenpf_set_processor_pminfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_set_processor_pminfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_set_processor_pminfo_t {
    pub p: *const xenpf_set_processor_pminfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_set_processor_pminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_set_processor_pminfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xenpf_set_processor_pminfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_set_processor_pminfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_const_xenpf_set_processor_pminfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_set_processor_pminfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_set_processor_pminfo_t {
    pub p: *const xenpf_set_processor_pminfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_set_processor_pminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_set_processor_pminfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_set_processor_pminfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_set_processor_pminfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_set_processor_pminfo_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_set_processor_pminfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_pcpuinfo {
    pub xen_cpuid: u32,
    pub max_present: u32,
    pub flags: u32,
    pub apic_id: u32,
    pub acpi_id: u32,
}
#[test]
fn bindgen_test_layout_xenpf_pcpuinfo() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_pcpuinfo>(),
        20usize,
        concat!("Size of: ", stringify!(xenpf_pcpuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_pcpuinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_pcpuinfo))
    );
    fn test_field_xen_cpuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xen_cpuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpuinfo),
                "::",
                stringify!(xen_cpuid)
            )
        );
    }
    test_field_xen_cpuid();
    fn test_field_max_present() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_present) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpuinfo),
                "::",
                stringify!(max_present)
            )
        );
    }
    test_field_max_present();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpuinfo),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_apic_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).apic_id) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpuinfo),
                "::",
                stringify!(apic_id)
            )
        );
    }
    test_field_apic_id();
    fn test_field_acpi_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpuinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).acpi_id) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpuinfo),
                "::",
                stringify!(acpi_id)
            )
        );
    }
    test_field_acpi_id();
}
pub type xenpf_pcpuinfo_t = xenpf_pcpuinfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_pcpuinfo_t {
    pub p: *mut xenpf_pcpuinfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_pcpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_pcpuinfo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_pcpuinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_pcpuinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xenpf_pcpuinfo_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xenpf_pcpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_pcpuinfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xenpf_pcpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_pcpuinfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_pcpuinfo_t {
    pub p: *mut xenpf_pcpuinfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_pcpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_pcpuinfo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xenpf_pcpuinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_pcpuinfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_pcpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_pcpuinfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_pcpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_pcpuinfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_pcpuinfo_t {
    pub p: *const xenpf_pcpuinfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_pcpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_pcpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_pcpuinfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_pcpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_pcpuinfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_pcpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_pcpuinfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_pcpuinfo_t {
    pub p: *const xenpf_pcpuinfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_pcpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_pcpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_pcpuinfo_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_pcpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_pcpuinfo_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_pcpuinfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_pcpuinfo_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_pcpu_version {
    pub xen_cpuid: u32,
    pub max_present: u32,
    pub vendor_id: [::std::os::raw::c_char; 12usize],
    pub family: u32,
    pub model: u32,
    pub stepping: u32,
}
#[test]
fn bindgen_test_layout_xenpf_pcpu_version() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_pcpu_version>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_pcpu_version))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_pcpu_version>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_pcpu_version))
    );
    fn test_field_xen_cpuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpu_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xen_cpuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpu_version),
                "::",
                stringify!(xen_cpuid)
            )
        );
    }
    test_field_xen_cpuid();
    fn test_field_max_present() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpu_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_present) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpu_version),
                "::",
                stringify!(max_present)
            )
        );
    }
    test_field_max_present();
    fn test_field_vendor_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpu_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpu_version),
                "::",
                stringify!(vendor_id)
            )
        );
    }
    test_field_vendor_id();
    fn test_field_family() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpu_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpu_version),
                "::",
                stringify!(family)
            )
        );
    }
    test_field_family();
    fn test_field_model() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpu_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).model) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpu_version),
                "::",
                stringify!(model)
            )
        );
    }
    test_field_model();
    fn test_field_stepping() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_pcpu_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stepping) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_pcpu_version),
                "::",
                stringify!(stepping)
            )
        );
    }
    test_field_stepping();
}
pub type xenpf_pcpu_version_t = xenpf_pcpu_version;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_pcpu_version_t {
    pub p: *mut xenpf_pcpu_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_pcpu_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_pcpu_version_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_pcpu_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_pcpu_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_pcpu_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_pcpu_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_pcpu_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_pcpu_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_pcpu_version_t {
    pub p: *mut xenpf_pcpu_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_pcpu_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_pcpu_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_pcpu_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_pcpu_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_pcpu_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_pcpu_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_pcpu_version_t {
    pub p: *const xenpf_pcpu_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_pcpu_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_pcpu_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_pcpu_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_pcpu_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_pcpu_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_pcpu_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_pcpu_version_t {
    pub p: *const xenpf_pcpu_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_pcpu_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_pcpu_version_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_pcpu_version_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_pcpu_version_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_pcpu_version_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_pcpu_version_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_cpu_ol {
    pub cpuid: u32,
}
#[test]
fn bindgen_test_layout_xenpf_cpu_ol() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_cpu_ol>(),
        4usize,
        concat!("Size of: ", stringify!(xenpf_cpu_ol))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_cpu_ol>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_cpu_ol))
    );
    fn test_field_cpuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_cpu_ol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_cpu_ol),
                "::",
                stringify!(cpuid)
            )
        );
    }
    test_field_cpuid();
}
pub type xenpf_cpu_ol_t = xenpf_cpu_ol;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_cpu_ol_t {
    pub p: *mut xenpf_cpu_ol_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_cpu_ol_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_cpu_ol_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_cpu_ol_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_cpu_ol_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xenpf_cpu_ol_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xenpf_cpu_ol_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_cpu_ol_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xenpf_cpu_ol_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_cpu_ol_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_cpu_ol_t {
    pub p: *mut xenpf_cpu_ol_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_cpu_ol_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_cpu_ol_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xenpf_cpu_ol_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_cpu_ol_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_cpu_ol_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_cpu_ol_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_cpu_ol_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_cpu_ol_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_cpu_ol_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_cpu_ol_t {
    pub p: *const xenpf_cpu_ol_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_cpu_ol_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_cpu_ol_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xenpf_cpu_ol_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_cpu_ol_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_cpu_ol_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_cpu_ol_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_cpu_ol_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_cpu_ol_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_cpu_ol_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_cpu_ol_t {
    pub p: *const xenpf_cpu_ol_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_cpu_ol_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_cpu_ol_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_cpu_ol_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_cpu_ol_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_cpu_ol_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_cpu_ol_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_cpu_ol_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_cpu_ol_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_cpu_ol_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_cpu_hotadd {
    pub apic_id: u32,
    pub acpi_id: u32,
    pub pxm: u32,
}
#[test]
fn bindgen_test_layout_xenpf_cpu_hotadd() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_cpu_hotadd>(),
        12usize,
        concat!("Size of: ", stringify!(xenpf_cpu_hotadd))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_cpu_hotadd>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_cpu_hotadd))
    );
    fn test_field_apic_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_cpu_hotadd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).apic_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_cpu_hotadd),
                "::",
                stringify!(apic_id)
            )
        );
    }
    test_field_apic_id();
    fn test_field_acpi_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_cpu_hotadd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).acpi_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_cpu_hotadd),
                "::",
                stringify!(acpi_id)
            )
        );
    }
    test_field_acpi_id();
    fn test_field_pxm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_cpu_hotadd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pxm) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_cpu_hotadd),
                "::",
                stringify!(pxm)
            )
        );
    }
    test_field_pxm();
}
pub type xenpf_cpu_hotadd_t = xenpf_cpu_hotadd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_mem_hotadd {
    pub spfn: u64,
    pub epfn: u64,
    pub pxm: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xenpf_mem_hotadd() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_mem_hotadd>(),
        24usize,
        concat!("Size of: ", stringify!(xenpf_mem_hotadd))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_mem_hotadd>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_mem_hotadd))
    );
    fn test_field_spfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_mem_hotadd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spfn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_mem_hotadd),
                "::",
                stringify!(spfn)
            )
        );
    }
    test_field_spfn();
    fn test_field_epfn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_mem_hotadd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).epfn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_mem_hotadd),
                "::",
                stringify!(epfn)
            )
        );
    }
    test_field_epfn();
    fn test_field_pxm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_mem_hotadd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pxm) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_mem_hotadd),
                "::",
                stringify!(pxm)
            )
        );
    }
    test_field_pxm();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_mem_hotadd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_mem_hotadd),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
pub type xenpf_mem_hotadd_t = xenpf_mem_hotadd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_core_parking {
    pub type_: u32,
    pub idle_nums: u32,
}
#[test]
fn bindgen_test_layout_xenpf_core_parking() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_core_parking>(),
        8usize,
        concat!("Size of: ", stringify!(xenpf_core_parking))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_core_parking>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_core_parking))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_core_parking>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_core_parking),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_idle_nums() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_core_parking>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idle_nums) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_core_parking),
                "::",
                stringify!(idle_nums)
            )
        );
    }
    test_field_idle_nums();
}
pub type xenpf_core_parking_t = xenpf_core_parking;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_core_parking_t {
    pub p: *mut xenpf_core_parking_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_core_parking_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_core_parking_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_core_parking_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_core_parking_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_core_parking_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_core_parking_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_core_parking_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_core_parking_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_core_parking_t {
    pub p: *mut xenpf_core_parking_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_core_parking_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_core_parking_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_core_parking_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_core_parking_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_core_parking_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_core_parking_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_core_parking_t {
    pub p: *const xenpf_core_parking_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_core_parking_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_core_parking_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_core_parking_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_core_parking_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_core_parking_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_core_parking_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_core_parking_t {
    pub p: *const xenpf_core_parking_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_core_parking_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_core_parking_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_core_parking_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_core_parking_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_core_parking_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_core_parking_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_resource_entry {
    pub u: xenpf_resource_entry__bindgen_ty_1,
    pub rsvd: u32,
    pub idx: u64,
    pub val: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_resource_entry__bindgen_ty_1 {
    pub cmd: u32,
    pub ret: i32,
}
#[test]
fn bindgen_test_layout_xenpf_resource_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_resource_entry__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(xenpf_resource_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_resource_entry__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_resource_entry__bindgen_ty_1)
        )
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_resource_entry__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_resource_entry__bindgen_ty_1),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_ret() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<xenpf_resource_entry__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ret) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_resource_entry__bindgen_ty_1),
                "::",
                stringify!(ret)
            )
        );
    }
    test_field_ret();
}
#[test]
fn bindgen_test_layout_xenpf_resource_entry() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_resource_entry>(),
        24usize,
        concat!("Size of: ", stringify!(xenpf_resource_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_resource_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_resource_entry))
    );
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_resource_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_resource_entry),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_rsvd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_resource_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsvd) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_resource_entry),
                "::",
                stringify!(rsvd)
            )
        );
    }
    test_field_rsvd();
    fn test_field_idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_resource_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_resource_entry),
                "::",
                stringify!(idx)
            )
        );
    }
    test_field_idx();
    fn test_field_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_resource_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_resource_entry),
                "::",
                stringify!(val)
            )
        );
    }
    test_field_val();
}
pub type xenpf_resource_entry_t = xenpf_resource_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_resource_entry_t {
    pub p: *mut xenpf_resource_entry_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_resource_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_resource_entry_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_resource_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_resource_entry_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_resource_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_resource_entry_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_resource_entry_t {
    pub p: *mut xenpf_resource_entry_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_resource_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_resource_entry_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_resource_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_resource_entry_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_resource_entry_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_resource_entry_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_resource_entry_t {
    pub p: *const xenpf_resource_entry_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_resource_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_resource_entry_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_resource_entry_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_resource_entry_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_resource_entry_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_resource_entry_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_resource_entry_t {
    pub p: *const xenpf_resource_entry_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_resource_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_resource_entry_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_resource_entry_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_resource_entry_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    __guest_handle_64_const_xenpf_resource_entry_t,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_resource_entry_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_resource_op {
    pub nr_entries: u32,
    pub cpu: u32,
    pub entries: __guest_handle_64_xenpf_resource_entry_t,
}
#[test]
fn bindgen_test_layout_xenpf_resource_op() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_resource_op>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_resource_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_resource_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_resource_op))
    );
    fn test_field_nr_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_resource_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_entries) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_resource_op),
                "::",
                stringify!(nr_entries)
            )
        );
    }
    test_field_nr_entries();
    fn test_field_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_resource_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_resource_op),
                "::",
                stringify!(cpu)
            )
        );
    }
    test_field_cpu();
    fn test_field_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_resource_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_resource_op),
                "::",
                stringify!(entries)
            )
        );
    }
    test_field_entries();
}
pub type xenpf_resource_op_t = xenpf_resource_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_resource_op_t {
    pub p: *mut xenpf_resource_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_resource_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_resource_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_resource_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_resource_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_resource_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_resource_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_xenpf_resource_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_resource_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_resource_op_t {
    pub p: *mut xenpf_resource_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_resource_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_resource_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_resource_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_resource_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_resource_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_resource_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_resource_op_t {
    pub p: *const xenpf_resource_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_resource_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_resource_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_resource_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_resource_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_resource_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_resource_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_resource_op_t {
    pub p: *const xenpf_resource_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_resource_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_resource_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_resource_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_resource_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_resource_op_t>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_resource_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_symdata {
    pub namelen: u32,
    pub symnum: u32,
    pub name: __guest_handle_64_char,
    pub address: u64,
    pub type_: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_xenpf_symdata() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_symdata>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_symdata))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_symdata>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_symdata))
    );
    fn test_field_namelen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_symdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).namelen) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_symdata),
                "::",
                stringify!(namelen)
            )
        );
    }
    test_field_namelen();
    fn test_field_symnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_symdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).symnum) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_symdata),
                "::",
                stringify!(symnum)
            )
        );
    }
    test_field_symnum();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_symdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_symdata),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_symdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_symdata),
                "::",
                stringify!(address)
            )
        );
    }
    test_field_address();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenpf_symdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xenpf_symdata),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
pub type xenpf_symdata_t = xenpf_symdata;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_symdata_t {
    pub p: *mut xenpf_symdata_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_symdata_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_symdata_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_symdata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_symdata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xenpf_symdata_t))
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xenpf_symdata_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_symdata_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xenpf_symdata_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xenpf_symdata_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_symdata_t {
    pub p: *mut xenpf_symdata_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_symdata_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_symdata_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xenpf_symdata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_symdata_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_symdata_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_symdata_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_64_xenpf_symdata_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xenpf_symdata_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_symdata_t {
    pub p: *const xenpf_symdata_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_symdata_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_symdata_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_symdata_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_symdata_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_symdata_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xenpf_symdata_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xenpf_symdata_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_symdata_t {
    pub p: *const xenpf_symdata_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_symdata_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_symdata_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_symdata_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_symdata_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_symdata_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xenpf_symdata_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xenpf_symdata_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_platform_op {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_platform_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_platform_op__bindgen_ty_1 {
    pub settime: xenpf_settime_t,
    pub settime32: xenpf_settime32_t,
    pub settime64: xenpf_settime64_t,
    pub add_memtype: xenpf_add_memtype_t,
    pub del_memtype: xenpf_del_memtype_t,
    pub read_memtype: xenpf_read_memtype_t,
    pub microcode: xenpf_microcode_update_t,
    pub platform_quirk: xenpf_platform_quirk_t,
    pub efi_runtime_call: xenpf_efi_runtime_call_t,
    pub firmware_info: xenpf_firmware_info_t,
    pub enter_acpi_sleep: xenpf_enter_acpi_sleep_t,
    pub change_freq: xenpf_change_freq_t,
    pub getidletime: xenpf_getidletime_t,
    pub set_pminfo: xenpf_set_processor_pminfo_t,
    pub pcpu_info: xenpf_pcpuinfo_t,
    pub pcpu_version: xenpf_pcpu_version_t,
    pub cpu_ol: xenpf_cpu_ol_t,
    pub cpu_add: xenpf_cpu_hotadd_t,
    pub mem_add: xenpf_mem_hotadd_t,
    pub core_parking: xenpf_core_parking_t,
    pub resource_op: xenpf_resource_op_t,
    pub symdata: xenpf_symdata_t,
    pub pad: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_xen_platform_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_platform_op__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(xen_platform_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_platform_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_platform_op__bindgen_ty_1))
    );
    fn test_field_settime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).settime) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(settime)
            )
        );
    }
    test_field_settime();
    fn test_field_settime32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).settime32) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(settime32)
            )
        );
    }
    test_field_settime32();
    fn test_field_settime64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).settime64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(settime64)
            )
        );
    }
    test_field_settime64();
    fn test_field_add_memtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).add_memtype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(add_memtype)
            )
        );
    }
    test_field_add_memtype();
    fn test_field_del_memtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).del_memtype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(del_memtype)
            )
        );
    }
    test_field_del_memtype();
    fn test_field_read_memtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).read_memtype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(read_memtype)
            )
        );
    }
    test_field_read_memtype();
    fn test_field_microcode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).microcode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(microcode)
            )
        );
    }
    test_field_microcode();
    fn test_field_platform_quirk() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).platform_quirk) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(platform_quirk)
            )
        );
    }
    test_field_platform_quirk();
    fn test_field_efi_runtime_call() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efi_runtime_call) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(efi_runtime_call)
            )
        );
    }
    test_field_efi_runtime_call();
    fn test_field_firmware_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firmware_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(firmware_info)
            )
        );
    }
    test_field_firmware_info();
    fn test_field_enter_acpi_sleep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enter_acpi_sleep) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(enter_acpi_sleep)
            )
        );
    }
    test_field_enter_acpi_sleep();
    fn test_field_change_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).change_freq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(change_freq)
            )
        );
    }
    test_field_change_freq();
    fn test_field_getidletime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).getidletime) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(getidletime)
            )
        );
    }
    test_field_getidletime();
    fn test_field_set_pminfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_pminfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(set_pminfo)
            )
        );
    }
    test_field_set_pminfo();
    fn test_field_pcpu_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pcpu_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(pcpu_info)
            )
        );
    }
    test_field_pcpu_info();
    fn test_field_pcpu_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pcpu_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(pcpu_version)
            )
        );
    }
    test_field_pcpu_version();
    fn test_field_cpu_ol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_ol) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(cpu_ol)
            )
        );
    }
    test_field_cpu_ol();
    fn test_field_cpu_add() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_add) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(cpu_add)
            )
        );
    }
    test_field_cpu_add();
    fn test_field_mem_add() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_add) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(mem_add)
            )
        );
    }
    test_field_mem_add();
    fn test_field_core_parking() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).core_parking) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(core_parking)
            )
        );
    }
    test_field_core_parking();
    fn test_field_resource_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).resource_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(resource_op)
            )
        );
    }
    test_field_resource_op();
    fn test_field_symdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).symdata) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(symdata)
            )
        );
    }
    test_field_symdata();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op__bindgen_ty_1),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
}
#[test]
fn bindgen_test_layout_xen_platform_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_platform_op>(),
        136usize,
        concat!("Size of: ", stringify!(xen_platform_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_platform_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_platform_op))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_interface_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interface_version) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op),
                "::",
                stringify!(interface_version)
            )
        );
    }
    test_field_interface_version();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xen_platform_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xen_platform_op),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
pub type xen_platform_op_t = xen_platform_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_platform_op_t {
    pub p: *mut xen_platform_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_platform_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_platform_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_platform_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_platform_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_platform_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_platform_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_platform_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__guest_handle_xen_platform_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_xen_platform_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_platform_op_t {
    pub p: *mut xen_platform_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_platform_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_platform_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_platform_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_platform_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_platform_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_platform_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_platform_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_xen_platform_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_xen_platform_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_platform_op_t {
    pub p: *const xen_platform_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_platform_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_platform_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_platform_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_platform_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_platform_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_platform_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_platform_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_const_xen_platform_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_const_xen_platform_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_platform_op_t {
    pub p: *const xen_platform_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_platform_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_platform_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_platform_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_platform_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_platform_op_t)
        )
    );
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_platform_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_platform_op_t),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_q() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__guest_handle_64_const_xen_platform_op_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__guest_handle_64_const_xen_platform_op_t),
                "::",
                stringify!(q)
            )
        );
    }
    test_field_q();
}
pub const xentoollog_level_XTL_NONE: xentoollog_level = 0;
pub const xentoollog_level_XTL_DEBUG: xentoollog_level = 1;
pub const xentoollog_level_XTL_VERBOSE: xentoollog_level = 2;
pub const xentoollog_level_XTL_DETAIL: xentoollog_level = 3;
pub const xentoollog_level_XTL_PROGRESS: xentoollog_level = 4;
pub const xentoollog_level_XTL_INFO: xentoollog_level = 5;
pub const xentoollog_level_XTL_NOTICE: xentoollog_level = 6;
pub const xentoollog_level_XTL_WARN: xentoollog_level = 7;
pub const xentoollog_level_XTL_ERROR: xentoollog_level = 8;
pub const xentoollog_level_XTL_CRITICAL: xentoollog_level = 9;
pub const xentoollog_level_XTL_NUM_LEVELS: xentoollog_level = 10;
pub type xentoollog_level = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xentoollog_logger {
    pub vmessage: ::std::option::Option<
        unsafe extern "C" fn(
            logger: *mut xentoollog_logger,
            level: xentoollog_level,
            errnoval: ::std::os::raw::c_int,
            context: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            al: *mut __va_list_tag,
        ),
    >,
    pub progress: ::std::option::Option<
        unsafe extern "C" fn(
            logger: *mut xentoollog_logger,
            context: *const ::std::os::raw::c_char,
            doing_what: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
            done: ::std::os::raw::c_ulong,
            total: ::std::os::raw::c_ulong,
        ),
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(logger: *mut xentoollog_logger)>,
}
#[test]
fn bindgen_test_layout_xentoollog_logger() {
    assert_eq!(
        ::std::mem::size_of::<xentoollog_logger>(),
        24usize,
        concat!("Size of: ", stringify!(xentoollog_logger))
    );
    assert_eq!(
        ::std::mem::align_of::<xentoollog_logger>(),
        8usize,
        concat!("Alignment of ", stringify!(xentoollog_logger))
    );
    fn test_field_vmessage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xentoollog_logger>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmessage) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xentoollog_logger),
                "::",
                stringify!(vmessage)
            )
        );
    }
    test_field_vmessage();
    fn test_field_progress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xentoollog_logger>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xentoollog_logger),
                "::",
                stringify!(progress)
            )
        );
    }
    test_field_progress();
    fn test_field_destroy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xentoollog_logger>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xentoollog_logger),
                "::",
                stringify!(destroy)
            )
        );
    }
    test_field_destroy();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xentoollog_logger_stdiostream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_interface_core {
    _unused: [u8; 0],
}
pub type xc_interface = xc_interface_core;
pub const xc_error_code_XC_ERROR_NONE: xc_error_code = 0;
pub const xc_error_code_XC_INTERNAL_ERROR: xc_error_code = 1;
pub const xc_error_code_XC_INVALID_KERNEL: xc_error_code = 2;
pub const xc_error_code_XC_INVALID_PARAM: xc_error_code = 3;
pub const xc_error_code_XC_OUT_OF_MEMORY: xc_error_code = 4;
pub type xc_error_code = ::std::os::raw::c_uint;
pub const xc_open_flags_XC_OPENFLAG_DUMMY: xc_open_flags = 1;
pub const xc_open_flags_XC_OPENFLAG_NON_REENTRANT: xc_open_flags = 2;
pub type xc_open_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xencall_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenforeignmemory_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xendevicemodel_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_hypercall_buffer {
    pub hbuf: *mut ::std::os::raw::c_void,
    pub param_shadow: *mut xc_hypercall_buffer,
    pub dir: ::std::os::raw::c_int,
    pub ubuf: *mut ::std::os::raw::c_void,
    pub sz: size_t,
}
#[test]
fn bindgen_test_layout_xc_hypercall_buffer() {
    assert_eq!(
        ::std::mem::size_of::<xc_hypercall_buffer>(),
        40usize,
        concat!("Size of: ", stringify!(xc_hypercall_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_hypercall_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_hypercall_buffer))
    );
    fn test_field_hbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_hypercall_buffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hbuf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_hypercall_buffer),
                "::",
                stringify!(hbuf)
            )
        );
    }
    test_field_hbuf();
    fn test_field_param_shadow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_hypercall_buffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).param_shadow) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_hypercall_buffer),
                "::",
                stringify!(param_shadow)
            )
        );
    }
    test_field_param_shadow();
    fn test_field_dir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_hypercall_buffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_hypercall_buffer),
                "::",
                stringify!(dir)
            )
        );
    }
    test_field_dir();
    fn test_field_ubuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_hypercall_buffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ubuf) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_hypercall_buffer),
                "::",
                stringify!(ubuf)
            )
        );
    }
    test_field_ubuf();
    fn test_field_sz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_hypercall_buffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sz) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_hypercall_buffer),
                "::",
                stringify!(sz)
            )
        );
    }
    test_field_sz();
}
pub type xc_hypercall_buffer_t = xc_hypercall_buffer;
extern "C" {
    pub static mut xc__hypercall_buffer_HYPERCALL_BUFFER_NULL: xc_hypercall_buffer_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_hypercall_buffer_array {
    _unused: [u8; 0],
}
pub type xc_hypercall_buffer_array_t = xc_hypercall_buffer_array;
pub type xc_cpumap_t = *mut u8;
pub type xc_nodemap_t = *mut u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_core_header {
    pub xch_magic: ::std::os::raw::c_uint,
    pub xch_nr_vcpus: ::std::os::raw::c_uint,
    pub xch_nr_pages: ::std::os::raw::c_uint,
    pub xch_ctxt_offset: ::std::os::raw::c_uint,
    pub xch_index_offset: ::std::os::raw::c_uint,
    pub xch_pages_offset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xc_core_header() {
    assert_eq!(
        ::std::mem::size_of::<xc_core_header>(),
        24usize,
        concat!("Size of: ", stringify!(xc_core_header))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_core_header>(),
        4usize,
        concat!("Alignment of ", stringify!(xc_core_header))
    );
    fn test_field_xch_magic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_core_header>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xch_magic) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_core_header),
                "::",
                stringify!(xch_magic)
            )
        );
    }
    test_field_xch_magic();
    fn test_field_xch_nr_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_core_header>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xch_nr_vcpus) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_core_header),
                "::",
                stringify!(xch_nr_vcpus)
            )
        );
    }
    test_field_xch_nr_vcpus();
    fn test_field_xch_nr_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_core_header>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xch_nr_pages) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_core_header),
                "::",
                stringify!(xch_nr_pages)
            )
        );
    }
    test_field_xch_nr_pages();
    fn test_field_xch_ctxt_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_core_header>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xch_ctxt_offset) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_core_header),
                "::",
                stringify!(xch_ctxt_offset)
            )
        );
    }
    test_field_xch_ctxt_offset();
    fn test_field_xch_index_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_core_header>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xch_index_offset) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_core_header),
                "::",
                stringify!(xch_index_offset)
            )
        );
    }
    test_field_xch_index_offset();
    fn test_field_xch_pages_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_core_header>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xch_pages_offset) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_core_header),
                "::",
                stringify!(xch_pages_offset)
            )
        );
    }
    test_field_xch_pages_offset();
}
pub type xc_core_header_t = xc_core_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_dominfo {
    pub domid: u32,
    pub ssidref: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub shutdown_reason: ::std::os::raw::c_uint,
    pub nr_pages: ::std::os::raw::c_ulong,
    pub nr_outstanding_pages: ::std::os::raw::c_ulong,
    pub nr_shared_pages: ::std::os::raw::c_ulong,
    pub nr_paged_pages: ::std::os::raw::c_ulong,
    pub shared_info_frame: ::std::os::raw::c_ulong,
    pub cpu_time: u64,
    pub max_memkb: ::std::os::raw::c_ulong,
    pub nr_online_vcpus: ::std::os::raw::c_uint,
    pub max_vcpu_id: ::std::os::raw::c_uint,
    pub handle: xen_domain_handle_t,
    pub cpupool: ::std::os::raw::c_uint,
    pub gpaddr_bits: u8,
    pub arch_config: xen_arch_domainconfig,
}
#[test]
fn bindgen_test_layout_xc_dominfo() {
    assert_eq!(
        ::std::mem::size_of::<xc_dominfo>(),
        120usize,
        concat!("Size of: ", stringify!(xc_dominfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_dominfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_dominfo))
    );
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
    fn test_field_ssidref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ssidref) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(ssidref)
            )
        );
    }
    test_field_ssidref();
    fn test_field_shutdown_reason() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shutdown_reason) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(shutdown_reason)
            )
        );
    }
    test_field_shutdown_reason();
    fn test_field_nr_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_pages) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(nr_pages)
            )
        );
    }
    test_field_nr_pages();
    fn test_field_nr_outstanding_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_outstanding_pages) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(nr_outstanding_pages)
            )
        );
    }
    test_field_nr_outstanding_pages();
    fn test_field_nr_shared_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_shared_pages) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(nr_shared_pages)
            )
        );
    }
    test_field_nr_shared_pages();
    fn test_field_nr_paged_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_paged_pages) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(nr_paged_pages)
            )
        );
    }
    test_field_nr_paged_pages();
    fn test_field_shared_info_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shared_info_frame) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(shared_info_frame)
            )
        );
    }
    test_field_shared_info_frame();
    fn test_field_cpu_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_time) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(cpu_time)
            )
        );
    }
    test_field_cpu_time();
    fn test_field_max_memkb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_memkb) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(max_memkb)
            )
        );
    }
    test_field_max_memkb();
    fn test_field_nr_online_vcpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_online_vcpus) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(nr_online_vcpus)
            )
        );
    }
    test_field_nr_online_vcpus();
    fn test_field_max_vcpu_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_vcpu_id) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(max_vcpu_id)
            )
        );
    }
    test_field_max_vcpu_id();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_cpupool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpupool) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(cpupool)
            )
        );
    }
    test_field_cpupool();
    fn test_field_gpaddr_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpaddr_bits) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(gpaddr_bits)
            )
        );
    }
    test_field_gpaddr_bits();
    fn test_field_arch_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_dominfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arch_config) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_dominfo),
                "::",
                stringify!(arch_config)
            )
        );
    }
    test_field_arch_config();
}
impl xc_dominfo {
    #[inline]
    pub fn dying(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dying(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn crashed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_crashed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shutdown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shutdown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn paused(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_paused(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn running(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_running(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hvm(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hvm(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn debugged(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_debugged(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xenstore(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xenstore(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hap(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hap(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dying: ::std::os::raw::c_uint,
        crashed: ::std::os::raw::c_uint,
        shutdown: ::std::os::raw::c_uint,
        paused: ::std::os::raw::c_uint,
        blocked: ::std::os::raw::c_uint,
        running: ::std::os::raw::c_uint,
        hvm: ::std::os::raw::c_uint,
        debugged: ::std::os::raw::c_uint,
        xenstore: ::std::os::raw::c_uint,
        hap: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dying: u32 = unsafe { ::std::mem::transmute(dying) };
            dying as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let crashed: u32 = unsafe { ::std::mem::transmute(crashed) };
            crashed as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let shutdown: u32 = unsafe { ::std::mem::transmute(shutdown) };
            shutdown as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let paused: u32 = unsafe { ::std::mem::transmute(paused) };
            paused as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let blocked: u32 = unsafe { ::std::mem::transmute(blocked) };
            blocked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let running: u32 = unsafe { ::std::mem::transmute(running) };
            running as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let hvm: u32 = unsafe { ::std::mem::transmute(hvm) };
            hvm as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let debugged: u32 = unsafe { ::std::mem::transmute(debugged) };
            debugged as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xenstore: u32 = unsafe { ::std::mem::transmute(xenstore) };
            xenstore as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let hap: u32 = unsafe { ::std::mem::transmute(hap) };
            hap as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type xc_dominfo_t = xc_dominfo;
pub type xc_domaininfo_t = xen_domctl_getdomaininfo_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_context_any_t {
    pub c: vcpu_guest_context_t,
}
#[test]
fn bindgen_test_layout_vcpu_guest_context_any_t() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_context_any_t>(),
        352usize,
        concat!("Size of: ", stringify!(vcpu_guest_context_any_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_context_any_t>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_guest_context_any_t))
    );
    fn test_field_c() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vcpu_guest_context_any_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vcpu_guest_context_any_t),
                "::",
                stringify!(c)
            )
        );
    }
    test_field_c();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union shared_info_any_t {
    pub s: shared_info_t,
}
#[test]
fn bindgen_test_layout_shared_info_any_t() {
    assert_eq!(
        ::std::mem::size_of::<shared_info_any_t>(),
        1088usize,
        concat!("Size of: ", stringify!(shared_info_any_t))
    );
    assert_eq!(
        ::std::mem::align_of::<shared_info_any_t>(),
        8usize,
        concat!("Alignment of ", stringify!(shared_info_any_t))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<shared_info_any_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(shared_info_any_t),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_vcpu_extstate {
    pub xfeature_mask: u64,
    pub size: u64,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_xc_vcpu_extstate() {
    assert_eq!(
        ::std::mem::size_of::<xc_vcpu_extstate>(),
        24usize,
        concat!("Size of: ", stringify!(xc_vcpu_extstate))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_vcpu_extstate>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_vcpu_extstate))
    );
    fn test_field_xfeature_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_vcpu_extstate>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xfeature_mask) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_vcpu_extstate),
                "::",
                stringify!(xfeature_mask)
            )
        );
    }
    test_field_xfeature_mask();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_vcpu_extstate>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_vcpu_extstate),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_vcpu_extstate>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_vcpu_extstate),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
}
pub type xc_vcpu_extstate_t = xc_vcpu_extstate;
pub type dumpcore_rtn_t = ::std::option::Option<
    unsafe extern "C" fn(
        xch: *mut xc_interface,
        arg: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type xc_vcpuinfo_t = xen_domctl_getvcpuinfo;
pub type xc_shadow_op_stats_t = xen_domctl_shadow_op_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_cpupoolinfo {
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub n_dom: u32,
    pub cpumap: xc_cpumap_t,
}
#[test]
fn bindgen_test_layout_xc_cpupoolinfo() {
    assert_eq!(
        ::std::mem::size_of::<xc_cpupoolinfo>(),
        24usize,
        concat!("Size of: ", stringify!(xc_cpupoolinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_cpupoolinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_cpupoolinfo))
    );
    fn test_field_cpupool_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cpupoolinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpupool_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cpupoolinfo),
                "::",
                stringify!(cpupool_id)
            )
        );
    }
    test_field_cpupool_id();
    fn test_field_sched_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cpupoolinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cpupoolinfo),
                "::",
                stringify!(sched_id)
            )
        );
    }
    test_field_sched_id();
    fn test_field_n_dom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cpupoolinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).n_dom) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cpupoolinfo),
                "::",
                stringify!(n_dom)
            )
        );
    }
    test_field_n_dom();
    fn test_field_cpumap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cpupoolinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpumap) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cpupoolinfo),
                "::",
                stringify!(cpumap)
            )
        );
    }
    test_field_cpumap();
}
pub type xc_cpupoolinfo_t = xc_cpupoolinfo;
pub type xc_evtchn_port_or_error_t = ::std::os::raw::c_int;
pub type xc_evtchn_status_t = evtchn_status;
pub type xc_physinfo_t = xen_sysctl_physinfo;
pub type xc_cputopo_t = xen_sysctl_cputopo;
pub type xc_numainfo_t = xen_sysctl_numainfo;
pub type xc_meminfo_t = xen_sysctl_meminfo;
pub type xc_pcitopoinfo_t = xen_sysctl_pcitopoinfo;
pub type xc_cpu_to_node_t = u32;
pub type xc_cpu_to_socket_t = u32;
pub type xc_cpu_to_core_t = u32;
pub type xc_node_to_memsize_t = u64;
pub type xc_node_to_memfree_t = u64;
pub type xc_node_to_node_dist_t = u32;
pub type xc_cpuinfo_t = xen_sysctl_cpuinfo;
pub type xc_perfc_desc_t = xen_sysctl_perfc_desc_t;
pub type xc_perfc_val_t = xen_sysctl_perfc_val_t;
pub type xc_lockprof_data_t = xen_sysctl_lockprof_data_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_error {
    pub code: xc_error_code,
    pub message: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout_xc_error() {
    assert_eq!(
        ::std::mem::size_of::<xc_error>(),
        1028usize,
        concat!("Size of: ", stringify!(xc_error))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_error>(),
        4usize,
        concat!("Alignment of ", stringify!(xc_error))
    );
    fn test_field_code() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_error>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_error),
                "::",
                stringify!(code)
            )
        );
    }
    test_field_code();
    fn test_field_message() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_error>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_error),
                "::",
                stringify!(message)
            )
        );
    }
    test_field_message();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_px_val {
    pub freq: u64,
    pub residency: u64,
    pub count: u64,
}
#[test]
fn bindgen_test_layout_xc_px_val() {
    assert_eq!(
        ::std::mem::size_of::<xc_px_val>(),
        24usize,
        concat!("Size of: ", stringify!(xc_px_val))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_px_val>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_px_val))
    );
    fn test_field_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_px_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_px_val),
                "::",
                stringify!(freq)
            )
        );
    }
    test_field_freq();
    fn test_field_residency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_px_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).residency) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_px_val),
                "::",
                stringify!(residency)
            )
        );
    }
    test_field_residency();
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_px_val>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_px_val),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_px_stat {
    pub total: u8,
    pub usable: u8,
    pub last: u8,
    pub cur: u8,
    pub trans_pt: *mut u64,
    pub pt: *mut xc_px_val,
}
#[test]
fn bindgen_test_layout_xc_px_stat() {
    assert_eq!(
        ::std::mem::size_of::<xc_px_stat>(),
        24usize,
        concat!("Size of: ", stringify!(xc_px_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_px_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_px_stat))
    );
    fn test_field_total() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_px_stat),
                "::",
                stringify!(total)
            )
        );
    }
    test_field_total();
    fn test_field_usable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).usable) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_px_stat),
                "::",
                stringify!(usable)
            )
        );
    }
    test_field_usable();
    fn test_field_last() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_px_stat),
                "::",
                stringify!(last)
            )
        );
    }
    test_field_last();
    fn test_field_cur() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cur) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_px_stat),
                "::",
                stringify!(cur)
            )
        );
    }
    test_field_cur();
    fn test_field_trans_pt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trans_pt) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_px_stat),
                "::",
                stringify!(trans_pt)
            )
        );
    }
    test_field_trans_pt();
    fn test_field_pt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_px_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pt) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_px_stat),
                "::",
                stringify!(pt)
            )
        );
    }
    test_field_pt();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_cx_stat {
    pub nr: u32,
    pub last: u32,
    pub idle_time: u64,
    pub triggers: *mut u64,
    pub residencies: *mut u64,
    pub nr_pc: u32,
    pub nr_cc: u32,
    pub pc: *mut u64,
    pub cc: *mut u64,
}
#[test]
fn bindgen_test_layout_xc_cx_stat() {
    assert_eq!(
        ::std::mem::size_of::<xc_cx_stat>(),
        56usize,
        concat!("Size of: ", stringify!(xc_cx_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_cx_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_cx_stat))
    );
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cx_stat),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_last() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cx_stat),
                "::",
                stringify!(last)
            )
        );
    }
    test_field_last();
    fn test_field_idle_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idle_time) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cx_stat),
                "::",
                stringify!(idle_time)
            )
        );
    }
    test_field_idle_time();
    fn test_field_triggers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).triggers) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cx_stat),
                "::",
                stringify!(triggers)
            )
        );
    }
    test_field_triggers();
    fn test_field_residencies() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).residencies) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cx_stat),
                "::",
                stringify!(residencies)
            )
        );
    }
    test_field_residencies();
    fn test_field_nr_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_pc) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cx_stat),
                "::",
                stringify!(nr_pc)
            )
        );
    }
    test_field_nr_pc();
    fn test_field_nr_cc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_cc) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cx_stat),
                "::",
                stringify!(nr_cc)
            )
        );
    }
    test_field_nr_cc();
    fn test_field_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cx_stat),
                "::",
                stringify!(pc)
            )
        );
    }
    test_field_pc();
    fn test_field_cc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_cx_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cc) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_cx_stat),
                "::",
                stringify!(cc)
            )
        );
    }
    test_field_cc();
}
pub type xc_cx_stat_t = xc_cx_stat;
pub type xc_userspace_t = xen_userspace;
pub type xc_ondemand_t = xen_ondemand;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xc_get_cpufreq_para {
    pub cpu_num: u32,
    pub freq_num: u32,
    pub gov_num: u32,
    pub affected_cpus: *mut u32,
    pub scaling_available_frequencies: *mut u32,
    pub scaling_available_governors: *mut ::std::os::raw::c_char,
    pub scaling_driver: [::std::os::raw::c_char; 16usize],
    pub cpuinfo_cur_freq: u32,
    pub cpuinfo_max_freq: u32,
    pub cpuinfo_min_freq: u32,
    pub scaling_cur_freq: u32,
    pub scaling_governor: [::std::os::raw::c_char; 16usize],
    pub scaling_max_freq: u32,
    pub scaling_min_freq: u32,
    pub u: xc_get_cpufreq_para__bindgen_ty_1,
    pub turbo_enabled: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xc_get_cpufreq_para__bindgen_ty_1 {
    pub userspace: xc_userspace_t,
    pub ondemand: xc_ondemand_t,
}
#[test]
fn bindgen_test_layout_xc_get_cpufreq_para__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xc_get_cpufreq_para__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(xc_get_cpufreq_para__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_get_cpufreq_para__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xc_get_cpufreq_para__bindgen_ty_1)
        )
    );
    fn test_field_userspace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).userspace) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para__bindgen_ty_1),
                "::",
                stringify!(userspace)
            )
        );
    }
    test_field_userspace();
    fn test_field_ondemand() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ondemand) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para__bindgen_ty_1),
                "::",
                stringify!(ondemand)
            )
        );
    }
    test_field_ondemand();
}
#[test]
fn bindgen_test_layout_xc_get_cpufreq_para() {
    assert_eq!(
        ::std::mem::size_of::<xc_get_cpufreq_para>(),
        120usize,
        concat!("Size of: ", stringify!(xc_get_cpufreq_para))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_get_cpufreq_para>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_get_cpufreq_para))
    );
    fn test_field_cpu_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_num) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(cpu_num)
            )
        );
    }
    test_field_cpu_num();
    fn test_field_freq_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).freq_num) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(freq_num)
            )
        );
    }
    test_field_freq_num();
    fn test_field_gov_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gov_num) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(gov_num)
            )
        );
    }
    test_field_gov_num();
    fn test_field_affected_cpus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).affected_cpus) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(affected_cpus)
            )
        );
    }
    test_field_affected_cpus();
    fn test_field_scaling_available_frequencies() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_available_frequencies) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(scaling_available_frequencies)
            )
        );
    }
    test_field_scaling_available_frequencies();
    fn test_field_scaling_available_governors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_available_governors) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(scaling_available_governors)
            )
        );
    }
    test_field_scaling_available_governors();
    fn test_field_scaling_driver() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_driver) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(scaling_driver)
            )
        );
    }
    test_field_scaling_driver();
    fn test_field_cpuinfo_cur_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpuinfo_cur_freq) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(cpuinfo_cur_freq)
            )
        );
    }
    test_field_cpuinfo_cur_freq();
    fn test_field_cpuinfo_max_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpuinfo_max_freq) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(cpuinfo_max_freq)
            )
        );
    }
    test_field_cpuinfo_max_freq();
    fn test_field_cpuinfo_min_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpuinfo_min_freq) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(cpuinfo_min_freq)
            )
        );
    }
    test_field_cpuinfo_min_freq();
    fn test_field_scaling_cur_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_cur_freq) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(scaling_cur_freq)
            )
        );
    }
    test_field_scaling_cur_freq();
    fn test_field_scaling_governor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_governor) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(scaling_governor)
            )
        );
    }
    test_field_scaling_governor();
    fn test_field_scaling_max_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_max_freq) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(scaling_max_freq)
            )
        );
    }
    test_field_scaling_max_freq();
    fn test_field_scaling_min_freq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaling_min_freq) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(scaling_min_freq)
            )
        );
    }
    test_field_scaling_min_freq();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_turbo_enabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_get_cpufreq_para>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).turbo_enabled) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_get_cpufreq_para),
                "::",
                stringify!(turbo_enabled)
            )
        );
    }
    test_field_turbo_enabled();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_binary {
    _unused: [u8; 0],
}
pub type xc_resource_entry_t = xenpf_resource_entry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_resource_op {
    pub result: u64,
    pub cpu: u32,
    pub nr_entries: u32,
    pub entries: *mut xc_resource_entry_t,
}
#[test]
fn bindgen_test_layout_xc_resource_op() {
    assert_eq!(
        ::std::mem::size_of::<xc_resource_op>(),
        24usize,
        concat!("Size of: ", stringify!(xc_resource_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_resource_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_resource_op))
    );
    fn test_field_result() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_resource_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_resource_op),
                "::",
                stringify!(result)
            )
        );
    }
    test_field_result();
    fn test_field_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_resource_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_resource_op),
                "::",
                stringify!(cpu)
            )
        );
    }
    test_field_cpu();
    fn test_field_nr_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_resource_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_entries) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_resource_op),
                "::",
                stringify!(nr_entries)
            )
        );
    }
    test_field_nr_entries();
    fn test_field_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xc_resource_op>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xc_resource_op),
                "::",
                stringify!(entries)
            )
        );
    }
    test_field_entries();
}
pub type xc_resource_op_t = xc_resource_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xengntdev_handle {
    _unused: [u8; 0],
}
pub type xengnttab_handle = xengntdev_handle;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xengnttab_grant_copy_segment {
    pub source: xengnttab_grant_copy_segment_xengnttab_copy_ptr,
    pub dest: xengnttab_grant_copy_segment_xengnttab_copy_ptr,
    pub len: u16,
    pub flags: u16,
    pub status: i16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xengnttab_grant_copy_segment_xengnttab_copy_ptr {
    pub virt: *mut ::std::os::raw::c_void,
    pub foreign: xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1 {
    pub ref_: u32,
    pub offset: u16,
    pub domid: u16,
}
#[test]
fn bindgen_test_layout_xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1)
        )
    );
    fn test_field_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1),
                "::",
                stringify!(ref_)
            )
        );
    }
    test_field_ref();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_domid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domid) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment_xengnttab_copy_ptr__bindgen_ty_1),
                "::",
                stringify!(domid)
            )
        );
    }
    test_field_domid();
}
#[test]
fn bindgen_test_layout_xengnttab_grant_copy_segment_xengnttab_copy_ptr() {
    assert_eq!(
        ::std::mem::size_of::<xengnttab_grant_copy_segment_xengnttab_copy_ptr>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xengnttab_grant_copy_segment_xengnttab_copy_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xengnttab_grant_copy_segment_xengnttab_copy_ptr>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xengnttab_grant_copy_segment_xengnttab_copy_ptr)
        )
    );
    fn test_field_virt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xengnttab_grant_copy_segment_xengnttab_copy_ptr,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).virt) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment_xengnttab_copy_ptr),
                "::",
                stringify!(virt)
            )
        );
    }
    test_field_virt();
    fn test_field_foreign() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    xengnttab_grant_copy_segment_xengnttab_copy_ptr,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).foreign) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment_xengnttab_copy_ptr),
                "::",
                stringify!(foreign)
            )
        );
    }
    test_field_foreign();
}
#[test]
fn bindgen_test_layout_xengnttab_grant_copy_segment() {
    assert_eq!(
        ::std::mem::size_of::<xengnttab_grant_copy_segment>(),
        24usize,
        concat!("Size of: ", stringify!(xengnttab_grant_copy_segment))
    );
    assert_eq!(
        ::std::mem::align_of::<xengnttab_grant_copy_segment>(),
        8usize,
        concat!("Alignment of ", stringify!(xengnttab_grant_copy_segment))
    );
    fn test_field_source() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xengnttab_grant_copy_segment>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment),
                "::",
                stringify!(source)
            )
        );
    }
    test_field_source();
    fn test_field_dest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xengnttab_grant_copy_segment>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment),
                "::",
                stringify!(dest)
            )
        );
    }
    test_field_dest();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xengnttab_grant_copy_segment>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xengnttab_grant_copy_segment>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xengnttab_grant_copy_segment>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(xengnttab_grant_copy_segment),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
}
pub type xengnttab_grant_copy_segment_t = xengnttab_grant_copy_segment;
pub type xengntshr_handle = xengntdev_handle;
pub const EPERM: _bindgen_ty_1 = 1;
pub const ENOENT: _bindgen_ty_1 = 2;
pub const ESRCH: _bindgen_ty_1 = 3;
pub const EIO: _bindgen_ty_1 = 5;
pub const ENXIO: _bindgen_ty_1 = 6;
pub const E2BIG: _bindgen_ty_1 = 7;
pub const ENOEXEC: _bindgen_ty_1 = 8;
pub const EBADF: _bindgen_ty_1 = 9;
pub const ECHILD: _bindgen_ty_1 = 10;
pub const EAGAIN: _bindgen_ty_1 = 11;
pub const EWOULDBLOCK: _bindgen_ty_1 = 11;
pub const ENOMEM: _bindgen_ty_1 = 12;
pub const EACCES: _bindgen_ty_1 = 13;
pub const EFAULT: _bindgen_ty_1 = 14;
pub const EBUSY: _bindgen_ty_1 = 16;
pub const EEXIST: _bindgen_ty_1 = 17;
pub const EXDEV: _bindgen_ty_1 = 18;
pub const ENODEV: _bindgen_ty_1 = 19;
pub const ENOTDIR: _bindgen_ty_1 = 20;
pub const EISDIR: _bindgen_ty_1 = 21;
pub const EINVAL: _bindgen_ty_1 = 22;
pub const ENFILE: _bindgen_ty_1 = 23;
pub const EMFILE: _bindgen_ty_1 = 24;
pub const ENOSPC: _bindgen_ty_1 = 28;
pub const EROFS: _bindgen_ty_1 = 30;
pub const EMLINK: _bindgen_ty_1 = 31;
pub const EDOM: _bindgen_ty_1 = 33;
pub const ERANGE: _bindgen_ty_1 = 34;
pub const EDEADLK: _bindgen_ty_1 = 35;
pub const EDEADLOCK: _bindgen_ty_1 = 35;
pub const ENAMETOOLONG: _bindgen_ty_1 = 36;
pub const ENOLCK: _bindgen_ty_1 = 37;
pub const ENOSYS: _bindgen_ty_1 = 38;
pub const ENOTEMPTY: _bindgen_ty_1 = 39;
pub const ENODATA: _bindgen_ty_1 = 61;
pub const ETIME: _bindgen_ty_1 = 62;
pub const EBADMSG: _bindgen_ty_1 = 74;
pub const EOVERFLOW: _bindgen_ty_1 = 75;
pub const EILSEQ: _bindgen_ty_1 = 84;
pub const ENOTSOCK: _bindgen_ty_1 = 88;
pub const EMSGSIZE: _bindgen_ty_1 = 90;
pub const EOPNOTSUPP: _bindgen_ty_1 = 95;
pub const EADDRINUSE: _bindgen_ty_1 = 98;
pub const EADDRNOTAVAIL: _bindgen_ty_1 = 99;
pub const ENOBUFS: _bindgen_ty_1 = 105;
pub const EISCONN: _bindgen_ty_1 = 106;
pub const ENOTCONN: _bindgen_ty_1 = 107;
pub const ETIMEDOUT: _bindgen_ty_1 = 110;
pub const ECONNREFUSED: _bindgen_ty_1 = 111;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const xsd_sockmsg_type_XS_CONTROL: xsd_sockmsg_type = 0;
pub const xsd_sockmsg_type_XS_DIRECTORY: xsd_sockmsg_type = 1;
pub const xsd_sockmsg_type_XS_READ: xsd_sockmsg_type = 2;
pub const xsd_sockmsg_type_XS_GET_PERMS: xsd_sockmsg_type = 3;
pub const xsd_sockmsg_type_XS_WATCH: xsd_sockmsg_type = 4;
pub const xsd_sockmsg_type_XS_UNWATCH: xsd_sockmsg_type = 5;
pub const xsd_sockmsg_type_XS_TRANSACTION_START: xsd_sockmsg_type = 6;
pub const xsd_sockmsg_type_XS_TRANSACTION_END: xsd_sockmsg_type = 7;
pub const xsd_sockmsg_type_XS_INTRODUCE: xsd_sockmsg_type = 8;
pub const xsd_sockmsg_type_XS_RELEASE: xsd_sockmsg_type = 9;
pub const xsd_sockmsg_type_XS_GET_DOMAIN_PATH: xsd_sockmsg_type = 10;
pub const xsd_sockmsg_type_XS_WRITE: xsd_sockmsg_type = 11;
pub const xsd_sockmsg_type_XS_MKDIR: xsd_sockmsg_type = 12;
pub const xsd_sockmsg_type_XS_RM: xsd_sockmsg_type = 13;
pub const xsd_sockmsg_type_XS_SET_PERMS: xsd_sockmsg_type = 14;
pub const xsd_sockmsg_type_XS_WATCH_EVENT: xsd_sockmsg_type = 15;
pub const xsd_sockmsg_type_XS_ERROR: xsd_sockmsg_type = 16;
pub const xsd_sockmsg_type_XS_IS_DOMAIN_INTRODUCED: xsd_sockmsg_type = 17;
pub const xsd_sockmsg_type_XS_RESUME: xsd_sockmsg_type = 18;
pub const xsd_sockmsg_type_XS_SET_TARGET: xsd_sockmsg_type = 19;
pub const xsd_sockmsg_type_XS_RESET_WATCHES: xsd_sockmsg_type = 21;
pub const xsd_sockmsg_type_XS_DIRECTORY_PART: xsd_sockmsg_type = 22;
pub const xsd_sockmsg_type_XS_TYPE_COUNT: xsd_sockmsg_type = 23;
pub const xsd_sockmsg_type_XS_INVALID: xsd_sockmsg_type = 65535;
pub type xsd_sockmsg_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsd_errors {
    pub errnum: ::std::os::raw::c_int,
    pub errstring: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_xsd_errors() {
    assert_eq!(
        ::std::mem::size_of::<xsd_errors>(),
        16usize,
        concat!("Size of: ", stringify!(xsd_errors))
    );
    assert_eq!(
        ::std::mem::align_of::<xsd_errors>(),
        8usize,
        concat!("Alignment of ", stringify!(xsd_errors))
    );
    fn test_field_errnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsd_errors>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errnum) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xsd_errors),
                "::",
                stringify!(errnum)
            )
        );
    }
    test_field_errnum();
    fn test_field_errstring() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsd_errors>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errstring) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xsd_errors),
                "::",
                stringify!(errstring)
            )
        );
    }
    test_field_errstring();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsd_sockmsg {
    pub type_: u32,
    pub req_id: u32,
    pub tx_id: u32,
    pub len: u32,
}
#[test]
fn bindgen_test_layout_xsd_sockmsg() {
    assert_eq!(
        ::std::mem::size_of::<xsd_sockmsg>(),
        16usize,
        concat!("Size of: ", stringify!(xsd_sockmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<xsd_sockmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(xsd_sockmsg))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsd_sockmsg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xsd_sockmsg),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_req_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsd_sockmsg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).req_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xsd_sockmsg),
                "::",
                stringify!(req_id)
            )
        );
    }
    test_field_req_id();
    fn test_field_tx_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsd_sockmsg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xsd_sockmsg),
                "::",
                stringify!(tx_id)
            )
        );
    }
    test_field_tx_id();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsd_sockmsg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xsd_sockmsg),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
}
pub const xs_watch_type_XS_WATCH_PATH: xs_watch_type = 0;
pub const xs_watch_type_XS_WATCH_TOKEN: xs_watch_type = 1;
pub type xs_watch_type = ::std::os::raw::c_uint;
pub type XENSTORE_RING_IDX = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenstore_domain_interface {
    pub req: [::std::os::raw::c_char; 1024usize],
    pub rsp: [::std::os::raw::c_char; 1024usize],
    pub req_cons: XENSTORE_RING_IDX,
    pub req_prod: XENSTORE_RING_IDX,
    pub rsp_cons: XENSTORE_RING_IDX,
    pub rsp_prod: XENSTORE_RING_IDX,
    pub server_features: u32,
    pub connection: u32,
    pub error: u32,
}
#[test]
fn bindgen_test_layout_xenstore_domain_interface() {
    assert_eq!(
        ::std::mem::size_of::<xenstore_domain_interface>(),
        2076usize,
        concat!("Size of: ", stringify!(xenstore_domain_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<xenstore_domain_interface>(),
        4usize,
        concat!("Alignment of ", stringify!(xenstore_domain_interface))
    );
    fn test_field_req() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenstore_domain_interface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).req) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xenstore_domain_interface),
                "::",
                stringify!(req)
            )
        );
    }
    test_field_req();
    fn test_field_rsp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenstore_domain_interface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsp) as usize - ptr as usize
            },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(xenstore_domain_interface),
                "::",
                stringify!(rsp)
            )
        );
    }
    test_field_rsp();
    fn test_field_req_cons() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenstore_domain_interface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).req_cons) as usize - ptr as usize
            },
            2048usize,
            concat!(
                "Offset of field: ",
                stringify!(xenstore_domain_interface),
                "::",
                stringify!(req_cons)
            )
        );
    }
    test_field_req_cons();
    fn test_field_req_prod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenstore_domain_interface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).req_prod) as usize - ptr as usize
            },
            2052usize,
            concat!(
                "Offset of field: ",
                stringify!(xenstore_domain_interface),
                "::",
                stringify!(req_prod)
            )
        );
    }
    test_field_req_prod();
    fn test_field_rsp_cons() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenstore_domain_interface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsp_cons) as usize - ptr as usize
            },
            2056usize,
            concat!(
                "Offset of field: ",
                stringify!(xenstore_domain_interface),
                "::",
                stringify!(rsp_cons)
            )
        );
    }
    test_field_rsp_cons();
    fn test_field_rsp_prod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenstore_domain_interface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsp_prod) as usize - ptr as usize
            },
            2060usize,
            concat!(
                "Offset of field: ",
                stringify!(xenstore_domain_interface),
                "::",
                stringify!(rsp_prod)
            )
        );
    }
    test_field_rsp_prod();
    fn test_field_server_features() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenstore_domain_interface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).server_features) as usize - ptr as usize
            },
            2064usize,
            concat!(
                "Offset of field: ",
                stringify!(xenstore_domain_interface),
                "::",
                stringify!(server_features)
            )
        );
    }
    test_field_server_features();
    fn test_field_connection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenstore_domain_interface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize
            },
            2068usize,
            concat!(
                "Offset of field: ",
                stringify!(xenstore_domain_interface),
                "::",
                stringify!(connection)
            )
        );
    }
    test_field_connection();
    fn test_field_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xenstore_domain_interface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize
            },
            2072usize,
            concat!(
                "Offset of field: ",
                stringify!(xenstore_domain_interface),
                "::",
                stringify!(error)
            )
        );
    }
    test_field_error();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xs_permissions {
    pub id: ::std::os::raw::c_uint,
    pub perms: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xs_permissions() {
    assert_eq!(
        ::std::mem::size_of::<xs_permissions>(),
        8usize,
        concat!("Size of: ", stringify!(xs_permissions))
    );
    assert_eq!(
        ::std::mem::align_of::<xs_permissions>(),
        4usize,
        concat!("Alignment of ", stringify!(xs_permissions))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xs_permissions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xs_permissions),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_perms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xs_permissions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).perms) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xs_permissions),
                "::",
                stringify!(perms)
            )
        );
    }
    test_field_perms();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xs_handle {
    _unused: [u8; 0],
}
pub type xs_transaction_t = u32;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    fn test_field_gp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
    }
    test_field_gp_offset();
    fn test_field_fp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
    }
    test_field_fp_offset();
    fn test_field_overflow_arg_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
    }
    test_field_overflow_arg_area();
    fn test_field_reg_save_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    test_field_reg_save_area();
}
